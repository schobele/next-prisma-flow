import { header } from "../strings";

export function emitFieldRegistry() {
  const content = [];
  
  content.push(header("core/field-registry.tsx"));
  content.push(`"use client";`);
  content.push(``);
  content.push(`import type React from "react";`);
  content.push(`import { type FlowFieldRenderProps } from "./field-wrapper";`);
  content.push(``);
  
  // Field renderer type
  content.push(`// Type for field renderer components`);
  content.push(`export type FlowFieldRenderer = React.ComponentType<FlowFieldRenderProps>;`);
  content.push(``);
  
  // Registry class
  content.push(`// Registry for custom field renderers`);
  content.push(`export class FlowFieldRegistry {`);
  content.push(`  private static renderers = new Map<string, FlowFieldRenderer>();`);
  content.push(`  private static typeMap = new Map<string, string>();`);
  content.push(`  `);
  content.push(`  // Register a renderer for a field type`);
  content.push(`  static register(type: string, renderer: FlowFieldRenderer) {`);
  content.push(`    this.renderers.set(type, renderer);`);
  content.push(`  }`);
  content.push(`  `);
  content.push(`  // Register multiple renderers at once`);
  content.push(`  static registerMany(renderers: Record<string, FlowFieldRenderer>) {`);
  content.push(`    Object.entries(renderers).forEach(([type, renderer]) => {`);
  content.push(`      this.register(type, renderer);`);
  content.push(`    });`);
  content.push(`  }`);
  content.push(`  `);
  content.push(`  // Map a field name to a specific type`);
  content.push(`  static mapFieldType(fieldName: string, type: string) {`);
  content.push(`    this.typeMap.set(fieldName, type);`);
  content.push(`  }`);
  content.push(`  `);
  content.push(`  // Map multiple fields at once`);
  content.push(`  static mapFieldTypes(mappings: Record<string, string>) {`);
  content.push(`    Object.entries(mappings).forEach(([fieldName, type]) => {`);
  content.push(`      this.mapFieldType(fieldName, type);`);
  content.push(`    });`);
  content.push(`  }`);
  content.push(`  `);
  content.push(`  // Get a renderer by type`);
  content.push(`  static get(type: string): FlowFieldRenderer | undefined {`);
  content.push(`    return this.renderers.get(type);`);
  content.push(`  }`);
  content.push(`  `);
  content.push(`  // Get renderer for a specific field`);
  content.push(`  static getForField(fieldName: string, defaultType: string = "text"): FlowFieldRenderer | undefined {`);
  content.push(`    const type = this.typeMap.get(fieldName) || defaultType;`);
  content.push(`    return this.get(type);`);
  content.push(`  }`);
  content.push(`  `);
  content.push(`  // Unregister a renderer`);
  content.push(`  static unregister(type: string) {`);
  content.push(`    this.renderers.delete(type);`);
  content.push(`  }`);
  content.push(`  `);
  content.push(`  // Clear all registrations`);
  content.push(`  static clear() {`);
  content.push(`    this.renderers.clear();`);
  content.push(`    this.typeMap.clear();`);
  content.push(`  }`);
  content.push(`  `);
  content.push(`  // Get all registered types`);
  content.push(`  static getTypes(): string[] {`);
  content.push(`    return Array.from(this.renderers.keys());`);
  content.push(`  }`);
  content.push(`  `);
  content.push(`  // Check if a type is registered`);
  content.push(`  static has(type: string): boolean {`);
  content.push(`    return this.renderers.has(type);`);
  content.push(`  }`);
  content.push(`}`);
  content.push(``);
  
  // Auto field component that uses the registry
  content.push(`// Auto field component that uses registered renderers`);
  content.push(`export interface FlowAutoFieldProps {`);
  content.push(`  name: string;`);
  content.push(`  type?: string;`);
  content.push(`  fallback?: FlowFieldRenderer;`);
  content.push(`  [key: string]: any;`);
  content.push(`}`);
  content.push(``);
  
  content.push(`export function FlowAutoField({ name, type, fallback, ...props }: FlowAutoFieldProps) {`);
  content.push(`  const Renderer = type `);
  content.push(`    ? FlowFieldRegistry.get(type)`);
  content.push(`    : FlowFieldRegistry.getForField(name);`);
  content.push(`  `);
  content.push(`  if (!Renderer) {`);
  content.push(`    if (fallback) {`);
  content.push(`      const Fallback = fallback;`);
  content.push(`      return <Fallback {...props} />;`);
  content.push(`    }`);
  content.push(`    `);
  content.push(`    console.warn(\`No renderer registered for field "\${name}" with type "\${type || 'auto'}"\`);`);
  content.push(`    return null;`);
  content.push(`  }`);
  content.push(`  `);
  content.push(`  return <Renderer {...props} />;`);
  content.push(`}`);
  content.push(``);
  
  // Default field renderers
  content.push(`// Default field renderer components`);
  content.push(`export const DefaultFieldRenderers = {`);
  content.push(`  text: ({ field, fieldState, meta, error }: FlowFieldRenderProps) => (`);
  content.push(`    <div>`);
  content.push(`      {meta.label && <label htmlFor={field.name}>{meta.label}</label>}`);
  content.push(`      <input`);
  content.push(`        {...field}`);
  content.push(`        type="text"`);
  content.push(`        id={field.name}`);
  content.push(`        placeholder={meta.placeholder}`);
  content.push(`        aria-invalid={!!error}`);
  content.push(`        aria-describedby={error ? \`\${field.name}-error\` : undefined}`);
  content.push(`      />`);
  content.push(`      {error && (`);
  content.push(`        <span id={\`\${field.name}-error\`} role="alert">`);
  content.push(`          {error.message}`);
  content.push(`        </span>`);
  content.push(`      )}`);
  content.push(`    </div>`);
  content.push(`  ),`);
  content.push(`  `);
  content.push(`  textarea: ({ field, fieldState, meta, error }: FlowFieldRenderProps) => (`);
  content.push(`    <div>`);
  content.push(`      {meta.label && <label htmlFor={field.name}>{meta.label}</label>}`);
  content.push(`      <textarea`);
  content.push(`        {...field}`);
  content.push(`        id={field.name}`);
  content.push(`        placeholder={meta.placeholder}`);
  content.push(`        aria-invalid={!!error}`);
  content.push(`        aria-describedby={error ? \`\${field.name}-error\` : undefined}`);
  content.push(`      />`);
  content.push(`      {error && (`);
  content.push(`        <span id={\`\${field.name}-error\`} role="alert">`);
  content.push(`          {error.message}`);
  content.push(`        </span>`);
  content.push(`      )}`);
  content.push(`    </div>`);
  content.push(`  ),`);
  content.push(`  `);
  content.push(`  select: ({ field, fieldState, meta, error }: FlowFieldRenderProps) => (`);
  content.push(`    <div>`);
  content.push(`      {meta.label && <label htmlFor={field.name}>{meta.label}</label>}`);
  content.push(`      <select`);
  content.push(`        {...field}`);
  content.push(`        id={field.name}`);
  content.push(`        aria-invalid={!!error}`);
  content.push(`        aria-describedby={error ? \`\${field.name}-error\` : undefined}`);
  content.push(`      >`);
  content.push(`        {meta.placeholder && (`);
  content.push(`          <option value="" disabled>`);
  content.push(`            {meta.placeholder}`);
  content.push(`          </option>`);
  content.push(`        )}`);
  content.push(`        {meta.options?.map((option) => (`);
  content.push(`          <option key={option.value} value={option.value}>`);
  content.push(`            {option.label}`);
  content.push(`          </option>`);
  content.push(`        ))}`);
  content.push(`      </select>`);
  content.push(`      {error && (`);
  content.push(`        <span id={\`\${field.name}-error\`} role="alert">`);
  content.push(`          {error.message}`);
  content.push(`        </span>`);
  content.push(`      )}`);
  content.push(`    </div>`);
  content.push(`  ),`);
  content.push(`  `);
  content.push(`  checkbox: ({ field, fieldState, meta, error }: FlowFieldRenderProps) => (`);
  content.push(`    <div>`);
  content.push(`      <label>`);
  content.push(`        <input`);
  content.push(`          {...field}`);
  content.push(`          type="checkbox"`);
  content.push(`          checked={field.value}`);
  content.push(`          aria-invalid={!!error}`);
  content.push(`          aria-describedby={error ? \`\${field.name}-error\` : undefined}`);
  content.push(`        />`);
  content.push(`        {meta.label}`);
  content.push(`      </label>`);
  content.push(`      {error && (`);
  content.push(`        <span id={\`\${field.name}-error\`} role="alert">`);
  content.push(`          {error.message}`);
  content.push(`        </span>`);
  content.push(`      )}`);
  content.push(`    </div>`);
  content.push(`  ),`);
  content.push(`  `);
  content.push(`  number: ({ field, fieldState, meta, error }: FlowFieldRenderProps) => (`);
  content.push(`    <div>`);
  content.push(`      {meta.label && <label htmlFor={field.name}>{meta.label}</label>}`);
  content.push(`      <input`);
  content.push(`        {...field}`);
  content.push(`        type="number"`);
  content.push(`        id={field.name}`);
  content.push(`        placeholder={meta.placeholder}`);
  content.push(`        min={meta.min}`);
  content.push(`        max={meta.max}`);
  content.push(`        aria-invalid={!!error}`);
  content.push(`        aria-describedby={error ? \`\${field.name}-error\` : undefined}`);
  content.push(`      />`);
  content.push(`      {error && (`);
  content.push(`        <span id={\`\${field.name}-error\`} role="alert">`);
  content.push(`          {error.message}`);
  content.push(`        </span>`);
  content.push(`      )}`);
  content.push(`    </div>`);
  content.push(`  ),`);
  content.push(`  `);
  content.push(`  date: ({ field, fieldState, meta, error }: FlowFieldRenderProps) => (`);
  content.push(`    <div>`);
  content.push(`      {meta.label && <label htmlFor={field.name}>{meta.label}</label>}`);
  content.push(`      <input`);
  content.push(`        {...field}`);
  content.push(`        type="date"`);
  content.push(`        id={field.name}`);
  content.push(`        min={meta.min}`);
  content.push(`        max={meta.max}`);
  content.push(`        aria-invalid={!!error}`);
  content.push(`        aria-describedby={error ? \`\${field.name}-error\` : undefined}`);
  content.push(`      />`);
  content.push(`      {error && (`);
  content.push(`        <span id={\`\${field.name}-error\`} role="alert">`);
  content.push(`          {error.message}`);
  content.push(`        </span>`);
  content.push(`      )}`);
  content.push(`    </div>`);
  content.push(`  )`);
  content.push(`};`);
  
  return content.join("\n");
}