// @generated by next-prisma-flow-state-engine
// file: hooks.ts

"use client";

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useState } from "react";
import { keys } from "../core/keys";
import { useFlowCtx } from "../core/provider";
import type { AuthorListParams } from "./queries.server";
import type { FlowAuthor, FlowAuthorWrite } from "./zod";

export function useAuthor(id: string) {
  const ctx = useFlowCtx();
  return useQuery({
    queryKey: keys.m("Author").byId(String(id)),
    queryFn: async () => {
      const { getAuthorById } = await import("./queries.server");
      return getAuthorById(id, ctx);
    },
  });
}

export function useAuthorList(params?: AuthorListParams) {
  const ctx = useFlowCtx();
  const [localParams, setLocalParams] = useState(params || {});

  const query = useQuery({
    queryKey: keys.m("Author").list(localParams),
    queryFn: async () => {
      const { listAuthors } = await import("./queries.server");
      return listAuthors(localParams, ctx);
    },
  });

  return {
    ...query,
    params: localParams,
    setParams: setLocalParams,
  };
}

export function useCreateAuthor() {
  const ctx = useFlowCtx();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (data: FlowAuthorWrite) => {
      const { createAuthor } = await import("./actions.server");
      const result = await createAuthor(data, ctx);
      if (!result.ok) throw result;
      return result.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [keys.m("Author").tag()] });
    },
  });
}

export function useUpdateAuthor(id: string) {
  const ctx = useFlowCtx();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (data: Partial<FlowAuthorWrite>) => {
      const { updateAuthor } = await import("./actions.server");
      const result = await updateAuthor(id, data, ctx);
      if (!result.ok) throw result;
      return result.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: keys.m("Author").byId(String(id)),
      });
      queryClient.invalidateQueries({ queryKey: [keys.m("Author").tag()] });
    },
  });
}

export function useDeleteAuthor() {
  const ctx = useFlowCtx();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (id: string) => {
      const { deleteAuthor } = await import("./actions.server");
      const result = await deleteAuthor(id, ctx);
      if (!result.ok) throw result;
    },
    onSuccess: (_, id) => {
      queryClient.invalidateQueries({
        queryKey: keys.m("Author").byId(String(id)),
      });
      queryClient.invalidateQueries({ queryKey: [keys.m("Author").tag()] });
    },
  });
}
