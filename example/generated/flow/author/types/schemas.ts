// @generated by next-prisma-flow-state-engine
// file: types/schemas.ts

import { z } from "zod";

// Scalar fields only
export const AuthorScalarSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  createdAt: z.date(),
  updatedAt: z.date(),
  organizationId: z.string().optional().nullable(),
});

// Relation schemas
export const AuthorPostsCommentsSchema = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional().nullable(),
});

export const AuthorPostsTagsSchema = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.date(),
});

export const AuthorCommentsRepliesSchema = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional().nullable(),
});

export const AuthorPostsSchema = z.object({
  id: z.string(),
  title: z.string(),
  content: z.string().optional().nullable(),
  published: z.boolean(),
  views: z.number().int(),
  createdAt: z.date(),
  updatedAt: z.date(),
  authorId: z.string(),
  comments: z.array(AuthorPostsCommentsSchema).optional(),
  tags: z.array(AuthorPostsTagsSchema).optional(),
});

export const AuthorCommentsSchema = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional().nullable(),
  replies: z.array(AuthorCommentsRepliesSchema).optional(),
});

// Main schema with relations
export const AuthorSchema = AuthorScalarSchema.extend({
  posts: z.array(AuthorPostsSchema).optional(),
  comments: z.array(AuthorCommentsSchema).optional(),
});

// Input schemas for create operations
const AuthorCreatePostsInputSchema = z.object({
  id: z.string().optional(),
  title: z.string(),
  content: z.string().optional().nullable(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  comments: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const AuthorCreateCommentsInputSchema = z.object({
  id: z.string().optional(),
  content: z.string(),
  createdAt: z.date().optional(),
  postId: z.string(),
  parentId: z.string().optional().nullable(),
  replies: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const AuthorCreateSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  name: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  createdAt: z.date().optional(),
  posts: z
    .object({
      create: z
        .union([
          AuthorCreatePostsInputSchema,
          z.array(AuthorCreatePostsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: AuthorCreatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: AuthorCreatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
  comments: z
    .object({
      create: z
        .union([
          AuthorCreateCommentsInputSchema,
          z.array(AuthorCreateCommentsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: AuthorCreateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: AuthorCreateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
});

export const AuthorCreateManyInputSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  name: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  createdAt: z.date().optional(),
});

// Input schemas for update operations
const AuthorUpdatePostsInputSchema = z.object({
  title: z.string().optional(),
  content: z.string().optional().nullable(),
  published: z.boolean().optional().nullable(),
  views: z.number().int().optional().nullable(),
  createdAt: z.date().optional().nullable(),
  comments: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const AuthorUpdateCommentsInputSchema = z.object({
  content: z.string().optional(),
  createdAt: z.date().optional().nullable(),
  postId: z.string().optional(),
  parentId: z.string().optional().nullable(),
  replies: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const AuthorUpdateSchema = z.object({
  email: z.string().optional(),
  name: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
  posts: z
    .object({
      create: z
        .union([
          AuthorUpdatePostsInputSchema,
          z.array(AuthorUpdatePostsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: AuthorUpdatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: AuthorUpdatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: AuthorUpdatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: AuthorUpdatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: AuthorUpdatePostsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: AuthorUpdatePostsInputSchema,
            create: AuthorUpdatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: AuthorUpdatePostsInputSchema,
              create: AuthorUpdatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
  comments: z
    .object({
      create: z
        .union([
          AuthorUpdateCommentsInputSchema,
          z.array(AuthorUpdateCommentsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: AuthorUpdateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: AuthorUpdateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: AuthorUpdateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: AuthorUpdateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: AuthorUpdateCommentsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: AuthorUpdateCommentsInputSchema,
            create: AuthorUpdateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: AuthorUpdateCommentsInputSchema,
              create: AuthorUpdateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
});

export const AuthorUpdateManyInputSchema = z.object({
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
});

export const AuthorUpsertInputSchema = z.object({
  create: AuthorCreateSchema,
  update: AuthorUpdateSchema,
});

// Filter and where schemas
// Relation where schemas
export const AuthorPostsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  title: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  content: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  published: z
    .union([
      z.boolean(),
      z.object({
        equals: z.boolean().optional(),
        not: z.boolean().optional(),
      }),
    ])
    .optional(),
  views: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  authorId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const AuthorCommentsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  content: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  postId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  authorId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  parentId: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

// Base filter schema
export const AuthorFilterBaseSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  email: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  bio: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  posts: z
    .object({
      every: AuthorPostsFilterSchema.optional(),
      some: AuthorPostsFilterSchema.optional(),
      none: AuthorPostsFilterSchema.optional(),
    })
    .optional(),
  comments: z
    .object({
      every: AuthorCommentsFilterSchema.optional(),
      some: AuthorCommentsFilterSchema.optional(),
      none: AuthorCommentsFilterSchema.optional(),
    })
    .optional(),
  AND: z.union([z.any(), z.array(z.any())]).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.union([z.any(), z.array(z.any())]).optional(),
});

// Extended filter schema with self-references
export const AuthorFilterSchema = AuthorFilterBaseSchema.extend({
  AND: z.array(AuthorFilterBaseSchema).optional(),
  OR: z.array(AuthorFilterBaseSchema).optional(),
  NOT: AuthorFilterBaseSchema.optional(),
});

// Alias for Prisma compatibility
export const AuthorWhereInputSchema = AuthorFilterSchema;

export const AuthorWhereUniqueInputSchema = z.object({
  id: z.string().optional(),
  email: z.string().optional(),
});

// Type exports
export type FlowAuthor = z.infer<typeof AuthorSchema>;
export type FlowAuthorCreate = z.infer<typeof AuthorCreateSchema>;
export type FlowAuthorUpdate = z.infer<typeof AuthorUpdateSchema>;
export type FlowAuthorFilter = z.infer<typeof AuthorFilterSchema>;
export type FlowAuthorWhere = z.infer<typeof AuthorWhereInputSchema>;
export type FlowAuthorWhereUnique = z.infer<
  typeof AuthorWhereUniqueInputSchema
>;
