// @generated by next-prisma-flow-state-engine
// file: types/types.ts

import type { Prisma } from "@prisma/client";
import type {
  AuthorDeepSelect,
  AuthorListSelect,
  AuthorShallowSelect,
} from "../server/selects";

// Type aliases for Author with different select levels
export type AuthorWithRelations = Prisma.AuthorGetPayload<{
  select: typeof AuthorDeepSelect;
}>;

export type AuthorListItem = Prisma.AuthorGetPayload<{
  select: typeof AuthorListSelect;
}>;

export type AuthorShallow = Prisma.AuthorGetPayload<{
  select: typeof AuthorShallowSelect;
}>;

// Input type helpers
export type AuthorCreateInput = Prisma.AuthorCreateInput;
export type AuthorUpdateInput = Prisma.AuthorUpdateInput;
export type AuthorWhereInput = Prisma.AuthorWhereInput;
export type AuthorWhereUniqueInput = Prisma.AuthorWhereUniqueInput;
export type AuthorOrderByInput = Prisma.AuthorOrderByWithRelationInput;

// Relation type helpers
export type AuthorWithPosts = AuthorWithRelations & {
  posts: NonNullable<AuthorWithRelations["posts"]>;
};
export type AuthorWithComments = AuthorWithRelations & {
  comments: NonNullable<AuthorWithRelations["comments"]>;
};
export type AuthorWithOrganization = AuthorWithRelations & {
  organization: NonNullable<AuthorWithRelations["organization"]>;
};

// Utility types
export type AuthorId = AuthorWithRelations["id"];
export type PartialAuthor = Partial<AuthorWithRelations>;
export type AuthorKeys = keyof AuthorWithRelations;

// Pagination types
export type AuthorPage = {
  items: AuthorListItem[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
};

export type AuthorCursor = {
  items: AuthorListItem[];
  nextCursor?: AuthorWhereUniqueInput;
  hasMore: boolean;
};
