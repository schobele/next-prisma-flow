// @generated by next-prisma-flow-state-engine
// file: server/queries.ts

"use server";

import { prisma } from "../../prisma";
import { cacheTagged, FlowCtx, FlowPolicyError } from "../../core";
import { canAuthor } from "../../policies";
import { AuthorSelect } from "./selects";
import type { Prisma } from "@prisma/client";

// Transform Prisma response to match FlowAuthor schema (null -> undefined for relations)
function transformResponse(item: any): any {
  if (!item) return item;
  const result = { ...item };
  if (result.organization === null) result.organization = undefined;
  return result;
}

function transformResponseList(items: any[]): any[] {
  return items.map(transformResponse);
}

export const getAuthorById = cacheTagged(async function (
  id: string,
  ctx: FlowCtx = {},
) {
  const policy = await canAuthor("read", ctx || {});
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  const item = await prisma.author.findUnique({
    where: { id: id, ...policy.where },
    select: AuthorSelect,
  });

  return transformResponse(item);
});

export type AuthorListParams = {
  where?: Prisma.AuthorWhereInput;
  orderBy?:
    | Prisma.AuthorOrderByWithRelationInput
    | Prisma.AuthorOrderByWithRelationInput[];
  skip?: number;
  take?: number;
  cursor?: Prisma.AuthorWhereUniqueInput;
};

export const listAuthors = cacheTagged(async function (
  params: AuthorListParams = {},
  ctx: FlowCtx = {},
) {
  const policy = await canAuthor("list", ctx || {});
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  const where = { ...params.where, ...policy.where };

  const [items, total] = await Promise.all([
    prisma.author.findMany({
      where,
      orderBy: params.orderBy,
      skip: params.skip,
      take: params.take || 50,
      cursor: params.cursor,
      select: AuthorSelect,
    }),
    prisma.author.count({ where }),
  ]);

  return { items: transformResponseList(items), total };
});

export const searchAuthors = cacheTagged(async function (
  query: string,
  params: Omit<AuthorListParams, "where"> = {},
  ctx: FlowCtx = {},
) {
  const policy = await canAuthor("list", ctx || {});
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  const where = {
    AND: [
      policy.where,
      {
        OR: [
          { email: { contains: query, mode: "insensitive" as const } },
          { name: { contains: query, mode: "insensitive" as const } },
          { bio: { contains: query, mode: "insensitive" as const } },
          { organizationId: { contains: query, mode: "insensitive" as const } },
        ],
      },
    ],
  };

  const [items, total] = await Promise.all([
    prisma.author.findMany({
      where,
      orderBy: params.orderBy,
      skip: params.skip,
      take: params.take || 50,
      cursor: params.cursor,
      select: AuthorSelect,
    }),
    prisma.author.count({ where }),
  ]);

  return { items: transformResponseList(items), total };
});
