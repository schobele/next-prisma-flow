// @generated by next-prisma-flow-state-engine
// file: zod.ts

import { z } from "zod";
import type { AuthorDeepSelect, AuthorShallowSelect } from "./selects";

// Reusable scalar field helpers for Author
// Note: Relations are added via named schemas to avoid cycles

export const FlowAuthorPostCommentComment = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional(),
});
export const FlowAuthorPostComment = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional(),
  replies: z.array(z.lazy(() => FlowAuthorPostCommentComment)),
});
export const FlowAuthorPostTag = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.date(),
});
export const FlowAuthorPost = z.object({
  id: z.string(),
  title: z.string(),
  content: z.string().optional(),
  published: z.boolean(),
  views: z.number().int(),
  createdAt: z.date(),
  updatedAt: z.date(),
  authorId: z.string(),
  comments: z.array(z.lazy(() => FlowAuthorPostComment)),
  tags: z.array(z.lazy(() => FlowAuthorPostTag)),
});
export const FlowAuthorCommentComment = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional(),
});
export const FlowAuthorComment = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional(),
  replies: z.array(z.lazy(() => FlowAuthorCommentComment)),
});
export const FlowAuthorSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional(),
  bio: z.string().optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
  posts: z.array(z.lazy(() => FlowAuthorPost)),
  comments: z.array(z.lazy(() => FlowAuthorComment)),
});
export type FlowAuthor = z.infer<typeof FlowAuthorSchema>;
export const AuthorDeepSchema = FlowAuthorSchema;

export const AuthorShallowSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional(),
  bio: z.string().optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
});
export type FlowAuthorShallow = z.infer<typeof AuthorShallowSchema>;
// Shallow Prisma payload type removed; prefer inferring from Zod schema

export const FlowAuthorPostCommentCommentOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorPostCommentCommentOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostCommentCommentOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostCommentCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowAuthorPostCommentCommentOrganizationTagWrite))
    .optional(),
});
export const FlowAuthorPostCommentCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostCommentCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  organization: z
    .lazy(() => FlowAuthorPostCommentCommentOrganizationWrite)
    .optional(),
});
export const FlowAuthorPostCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostCommentOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorPostCommentOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostCommentOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowAuthorPostCommentOrganizationTagWrite))
    .optional(),
});
export const FlowAuthorPostCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z.lazy(() => FlowAuthorPostCommentCommentWrite).optional(),
  replies: z.array(z.lazy(() => FlowAuthorPostCommentCommentWrite)).optional(),
  organization: z.lazy(() => FlowAuthorPostCommentOrganizationWrite).optional(),
});
export const FlowAuthorPostCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostTagOrganizationCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorPostTagOrganizationCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostTagOrganizationCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostTagOrganizationCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowAuthorPostTagOrganizationCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowAuthorPostTagOrganizationCommentCommentWrite))
    .optional(),
});
export const FlowAuthorPostTagOrganizationCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostTagOrganizationCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostTagOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowAuthorPostTagOrganizationCommentWrite))
    .optional(),
});
export const FlowAuthorPostTagOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostTagOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  organization: z.lazy(() => FlowAuthorPostTagOrganizationWrite).optional(),
});
export const FlowAuthorPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostOrganizationCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorPostOrganizationCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostOrganizationCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostOrganizationCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowAuthorPostOrganizationCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowAuthorPostOrganizationCommentCommentWrite))
    .optional(),
});
export const FlowAuthorPostOrganizationCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostOrganizationCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorPostOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowAuthorPostOrganizationCommentWrite))
    .optional(),
  tags: z.array(z.lazy(() => FlowAuthorPostOrganizationTagWrite)).optional(),
});
export const FlowAuthorPostOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  comments: z.array(z.lazy(() => FlowAuthorPostCommentWrite)).optional(),
  tags: z.array(z.lazy(() => FlowAuthorPostTagWrite)).optional(),
  organization: z.lazy(() => FlowAuthorPostOrganizationWrite).optional(),
});
export const FlowAuthorPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentPostTagOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowAuthorCommentPostTagOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentPostTagOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  organization: z
    .lazy(() => FlowAuthorCommentPostTagOrganizationWrite)
    .optional(),
});
export const FlowAuthorCommentPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentPostOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorCommentPostOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentPostOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentPostOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowAuthorCommentPostOrganizationTagWrite))
    .optional(),
});
export const FlowAuthorCommentPostOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentPostOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z.array(z.lazy(() => FlowAuthorCommentPostTagWrite)).optional(),
  organization: z.lazy(() => FlowAuthorCommentPostOrganizationWrite).optional(),
});
export const FlowAuthorCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentCommentPostTagOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowAuthorCommentCommentPostTagOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentCommentPostTagOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentCommentPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  organization: z
    .lazy(() => FlowAuthorCommentCommentPostTagOrganizationWrite)
    .optional(),
});
export const FlowAuthorCommentCommentPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentCommentPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentCommentPostOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorCommentCommentPostOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentCommentPostOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentCommentPostOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowAuthorCommentCommentPostOrganizationTagWrite))
    .optional(),
});
export const FlowAuthorCommentCommentPostOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentCommentPostOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z.array(z.lazy(() => FlowAuthorCommentCommentPostTagWrite)).optional(),
  organization: z
    .lazy(() => FlowAuthorCommentCommentPostOrganizationWrite)
    .optional(),
});
export const FlowAuthorCommentCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentCommentOrganizationPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorCommentCommentOrganizationPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentCommentOrganizationPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentCommentOrganizationPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowAuthorCommentCommentOrganizationPostTagWrite))
    .optional(),
});
export const FlowAuthorCommentCommentOrganizationPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentCommentOrganizationPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentCommentOrganizationTagPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
});
export const FlowAuthorCommentCommentOrganizationTagPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentCommentOrganizationTagPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentCommentOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowAuthorCommentCommentOrganizationTagPostWrite))
    .optional(),
});
export const FlowAuthorCommentCommentOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentCommentOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowAuthorCommentCommentOrganizationPostWrite))
    .optional(),
  tags: z
    .array(z.lazy(() => FlowAuthorCommentCommentOrganizationTagWrite))
    .optional(),
});
export const FlowAuthorCommentCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowAuthorCommentCommentPostWrite).optional(),
  organization: z
    .lazy(() => FlowAuthorCommentCommentOrganizationWrite)
    .optional(),
});
export const FlowAuthorCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentOrganizationPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorCommentOrganizationPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentOrganizationPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentOrganizationPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowAuthorCommentOrganizationPostTagWrite))
    .optional(),
});
export const FlowAuthorCommentOrganizationPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentOrganizationPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentOrganizationTagPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
});
export const FlowAuthorCommentOrganizationTagPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentOrganizationTagPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowAuthorCommentOrganizationTagPostWrite))
    .optional(),
});
export const FlowAuthorCommentOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowAuthorCommentOrganizationPostWrite))
    .optional(),
  tags: z.array(z.lazy(() => FlowAuthorCommentOrganizationTagWrite)).optional(),
});
export const FlowAuthorCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowAuthorCommentPostWrite).optional(),
  parent: z.lazy(() => FlowAuthorCommentCommentWrite).optional(),
  replies: z.array(z.lazy(() => FlowAuthorCommentCommentWrite)).optional(),
  organization: z.lazy(() => FlowAuthorCommentOrganizationWrite).optional(),
});
export const FlowAuthorCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationPostCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorOrganizationPostCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationPostCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationPostCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowAuthorOrganizationPostCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowAuthorOrganizationPostCommentCommentWrite))
    .optional(),
});
export const FlowAuthorOrganizationPostCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationPostCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorOrganizationPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowAuthorOrganizationPostCommentWrite))
    .optional(),
  tags: z.array(z.lazy(() => FlowAuthorOrganizationPostTagWrite)).optional(),
});
export const FlowAuthorOrganizationPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationCommentPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorOrganizationCommentPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationCommentPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowAuthorOrganizationCommentPostTagWrite))
    .optional(),
});
export const FlowAuthorOrganizationCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationCommentCommentPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorOrganizationCommentCommentPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationCommentCommentPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationCommentCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowAuthorOrganizationCommentCommentPostTagWrite))
    .optional(),
});
export const FlowAuthorOrganizationCommentCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationCommentCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowAuthorOrganizationCommentCommentPostWrite).optional(),
});
export const FlowAuthorOrganizationCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowAuthorOrganizationCommentPostWrite).optional(),
  parent: z.lazy(() => FlowAuthorOrganizationCommentCommentWrite).optional(),
  replies: z
    .array(z.lazy(() => FlowAuthorOrganizationCommentCommentWrite))
    .optional(),
});
export const FlowAuthorOrganizationCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationTagPostCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowAuthorOrganizationTagPostCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationTagPostCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationTagPostCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowAuthorOrganizationTagPostCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowAuthorOrganizationTagPostCommentCommentWrite))
    .optional(),
});
export const FlowAuthorOrganizationTagPostCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationTagPostCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationTagPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowAuthorOrganizationTagPostCommentWrite))
    .optional(),
});
export const FlowAuthorOrganizationTagPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationTagPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  posts: z.array(z.lazy(() => FlowAuthorOrganizationTagPostWrite)).optional(),
});
export const FlowAuthorOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z.array(z.lazy(() => FlowAuthorOrganizationPostWrite)).optional(),
  comments: z
    .array(z.lazy(() => FlowAuthorOrganizationCommentWrite))
    .optional(),
  tags: z.array(z.lazy(() => FlowAuthorOrganizationTagWrite)).optional(),
});
export const FlowAuthorOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowAuthorOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z.array(z.lazy(() => FlowAuthorPostWrite)).optional(),
  comments: z.array(z.lazy(() => FlowAuthorCommentWrite)).optional(),
  organization: z.lazy(() => FlowAuthorOrganizationWrite).optional(),
});
export const FlowAuthorUpdateData = z.object({
  email: z.string().optional(),
  name: z.string().optional(),
  bio: z.string().optional(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
  posts: z.array(z.lazy(() => FlowAuthorPostWrite)).optional(),
  comments: z.array(z.lazy(() => FlowAuthorCommentWrite)).optional(),
  organization: z.lazy(() => FlowAuthorOrganizationWrite).optional(),
});
export const AuthorCreateSchema = FlowAuthorCreateData;
export type FlowAuthorCreate = z.infer<typeof AuthorCreateSchema>;
export const AuthorUpdateSchema = FlowAuthorUpdateData;
export type FlowAuthorUpdate = z.infer<typeof AuthorUpdateSchema>;
export type FlowAuthorWrite = FlowAuthorCreate | FlowAuthorUpdate;
