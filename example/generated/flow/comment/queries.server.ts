// @generated by next-prisma-flow-state-engine
// file: queries.server.ts

"use server";

import { prisma } from "../../../lib/prisma";
import { cacheTagged, keys, FlowCtx } from "../core";
import { canComment } from "../policies";
import { CommentDeepSelect, CommentListSelect } from "./selects";
import type { Prisma } from "@prisma/client";

export const getCommentById = cacheTagged(async function (
  id: string,
  ctx: FlowCtx,
) {
  const policy = await canComment("read", ctx);
  if (!policy.ok) return null;

  const item = await prisma.comment.findUnique({
    where: { id: id, ...policy.where },
    select: CommentDeepSelect,
  });

  return item;
});

export type CommentListParams = {
  where?: Prisma.CommentWhereInput;
  orderBy?: Prisma.CommentOrderByWithRelationInput;
  skip?: number;
  take?: number;
};

export const listComments = cacheTagged(async function (
  params: CommentListParams,
  ctx: FlowCtx,
) {
  const policy = await canComment("list", ctx);
  if (!policy.ok) return { items: [], total: 0 };

  const where = { ...params.where, ...policy.where };

  const [items, total] = await Promise.all([
    prisma.comment.findMany({
      where,
      orderBy: params.orderBy,
      skip: params.skip,
      take: params.take || 50,
      select: CommentListSelect,
    }),
    prisma.comment.count({ where }),
  ]);

  return { items, total };
});
