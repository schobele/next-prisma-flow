// @generated by next-prisma-flow-state-engine
// file: zod.ts

import { z } from "zod";
import type { CommentDeepSelect, CommentShallowSelect } from "./selects";

// Reusable scalar field helpers for Comment
// Note: Relations are added via named schemas to avoid cycles

export const FlowCommentAuthorPostTag = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.date(),
});
export const FlowCommentAuthorPost = z.object({
  id: z.string(),
  title: z.string(),
  content: z.string().optional(),
  published: z.boolean(),
  views: z.number().int(),
  createdAt: z.date(),
  updatedAt: z.date(),
  authorId: z.string(),
  tags: z.array(z.lazy(() => FlowCommentAuthorPostTag)),
});
export const FlowCommentAuthor = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional(),
  bio: z.string().optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
  posts: z.array(z.lazy(() => FlowCommentAuthorPost)),
});
export const FlowCommentCommentAuthorPostTag = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.date(),
});
export const FlowCommentCommentAuthorPost = z.object({
  id: z.string(),
  title: z.string(),
  content: z.string().optional(),
  published: z.boolean(),
  views: z.number().int(),
  createdAt: z.date(),
  updatedAt: z.date(),
  authorId: z.string(),
  tags: z.array(z.lazy(() => FlowCommentCommentAuthorPostTag)),
});
export const FlowCommentCommentAuthor = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional(),
  bio: z.string().optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
  posts: z.array(z.lazy(() => FlowCommentCommentAuthorPost)),
});
export const FlowCommentComment = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  author: z.lazy(() => FlowCommentCommentAuthor),
  parentId: z.string().optional(),
});
export const FlowCommentSchema = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  author: z.lazy(() => FlowCommentAuthor),
  parentId: z.string().optional(),
  replies: z.array(z.lazy(() => FlowCommentComment)),
});
export type FlowComment = z.infer<typeof FlowCommentSchema>;
export const CommentDeepSchema = FlowCommentSchema;

export const CommentShallowSchema = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional(),
});
export type FlowCommentShallow = z.infer<typeof CommentShallowSchema>;
// Shallow Prisma payload type removed; prefer inferring from Zod schema

export const FlowCommentPostAuthorOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowCommentPostAuthorOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentPostAuthorOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentPostAuthorOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowCommentPostAuthorOrganizationTagWrite))
    .optional(),
});
export const FlowCommentPostAuthorOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentPostAuthorOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  organization: z.lazy(() => FlowCommentPostAuthorOrganizationWrite).optional(),
});
export const FlowCommentPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentPostTagOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowCommentPostTagOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentPostTagOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentPostTagOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z
    .array(z.lazy(() => FlowCommentPostTagOrganizationAuthorWrite))
    .optional(),
});
export const FlowCommentPostTagOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentPostTagOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  organization: z.lazy(() => FlowCommentPostTagOrganizationWrite).optional(),
});
export const FlowCommentPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentPostOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowCommentPostOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentPostOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentPostOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowCommentPostOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentPostOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentPostOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z
    .array(z.lazy(() => FlowCommentPostOrganizationAuthorWrite))
    .optional(),
  tags: z.array(z.lazy(() => FlowCommentPostOrganizationTagWrite)).optional(),
});
export const FlowCommentPostOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentPostOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowCommentPostAuthorWrite).optional(),
  tags: z.array(z.lazy(() => FlowCommentPostTagWrite)).optional(),
  organization: z.lazy(() => FlowCommentPostOrganizationWrite).optional(),
});
export const FlowCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentAuthorPostTagOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowCommentAuthorPostTagOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentAuthorPostTagOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentAuthorPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  organization: z
    .lazy(() => FlowCommentAuthorPostTagOrganizationWrite)
    .optional(),
});
export const FlowCommentAuthorPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentAuthorPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentAuthorPostOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowCommentAuthorPostOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentAuthorPostOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentAuthorPostOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowCommentAuthorPostOrganizationTagWrite))
    .optional(),
});
export const FlowCommentAuthorPostOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentAuthorPostOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentAuthorPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z.array(z.lazy(() => FlowCommentAuthorPostTagWrite)).optional(),
  organization: z.lazy(() => FlowCommentAuthorPostOrganizationWrite).optional(),
});
export const FlowCommentAuthorPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentAuthorPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentAuthorOrganizationPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowCommentAuthorOrganizationPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentAuthorOrganizationPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentAuthorOrganizationPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowCommentAuthorOrganizationPostTagWrite))
    .optional(),
});
export const FlowCommentAuthorOrganizationPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentAuthorOrganizationPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentAuthorOrganizationTagPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
});
export const FlowCommentAuthorOrganizationTagPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentAuthorOrganizationTagPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentAuthorOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowCommentAuthorOrganizationTagPostWrite))
    .optional(),
});
export const FlowCommentAuthorOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentAuthorOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentAuthorOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowCommentAuthorOrganizationPostWrite))
    .optional(),
  tags: z.array(z.lazy(() => FlowCommentAuthorOrganizationTagWrite)).optional(),
});
export const FlowCommentAuthorOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentAuthorOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z.array(z.lazy(() => FlowCommentAuthorPostWrite)).optional(),
  organization: z.lazy(() => FlowCommentAuthorOrganizationWrite).optional(),
});
export const FlowCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentPostAuthorOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowCommentCommentPostAuthorOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentPostAuthorOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentPostAuthorOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowCommentCommentPostAuthorOrganizationTagWrite))
    .optional(),
});
export const FlowCommentCommentPostAuthorOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentPostAuthorOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  organization: z
    .lazy(() => FlowCommentCommentPostAuthorOrganizationWrite)
    .optional(),
});
export const FlowCommentCommentPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentPostTagOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowCommentCommentPostTagOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentPostTagOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentPostTagOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z
    .array(z.lazy(() => FlowCommentCommentPostTagOrganizationAuthorWrite))
    .optional(),
});
export const FlowCommentCommentPostTagOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentPostTagOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  organization: z
    .lazy(() => FlowCommentCommentPostTagOrganizationWrite)
    .optional(),
});
export const FlowCommentCommentPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentPostOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowCommentCommentPostOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentPostOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentPostOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowCommentCommentPostOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentPostOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentPostOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z
    .array(z.lazy(() => FlowCommentCommentPostOrganizationAuthorWrite))
    .optional(),
  tags: z
    .array(z.lazy(() => FlowCommentCommentPostOrganizationTagWrite))
    .optional(),
});
export const FlowCommentCommentPostOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentPostOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowCommentCommentPostAuthorWrite).optional(),
  tags: z.array(z.lazy(() => FlowCommentCommentPostTagWrite)).optional(),
  organization: z
    .lazy(() => FlowCommentCommentPostOrganizationWrite)
    .optional(),
});
export const FlowCommentCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentAuthorPostTagOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowCommentCommentAuthorPostTagOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentAuthorPostTagOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentAuthorPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  organization: z
    .lazy(() => FlowCommentCommentAuthorPostTagOrganizationWrite)
    .optional(),
});
export const FlowCommentCommentAuthorPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentAuthorPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentAuthorPostOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowCommentCommentAuthorPostOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentAuthorPostOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentAuthorPostOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowCommentCommentAuthorPostOrganizationTagWrite))
    .optional(),
});
export const FlowCommentCommentAuthorPostOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentAuthorPostOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentAuthorPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z.array(z.lazy(() => FlowCommentCommentAuthorPostTagWrite)).optional(),
  organization: z
    .lazy(() => FlowCommentCommentAuthorPostOrganizationWrite)
    .optional(),
});
export const FlowCommentCommentAuthorPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentAuthorPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentAuthorOrganizationPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowCommentCommentAuthorOrganizationPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentAuthorOrganizationPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentAuthorOrganizationPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowCommentCommentAuthorOrganizationPostTagWrite))
    .optional(),
});
export const FlowCommentCommentAuthorOrganizationPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentAuthorOrganizationPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentAuthorOrganizationTagPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
});
export const FlowCommentCommentAuthorOrganizationTagPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentAuthorOrganizationTagPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentAuthorOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowCommentCommentAuthorOrganizationTagPostWrite))
    .optional(),
});
export const FlowCommentCommentAuthorOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentAuthorOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentAuthorOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowCommentCommentAuthorOrganizationPostWrite))
    .optional(),
  tags: z
    .array(z.lazy(() => FlowCommentCommentAuthorOrganizationTagWrite))
    .optional(),
});
export const FlowCommentCommentAuthorOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentAuthorOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z.array(z.lazy(() => FlowCommentCommentAuthorPostWrite)).optional(),
  organization: z
    .lazy(() => FlowCommentCommentAuthorOrganizationWrite)
    .optional(),
});
export const FlowCommentCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentOrganizationAuthorPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowCommentCommentOrganizationAuthorPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentOrganizationAuthorPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentOrganizationAuthorPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowCommentCommentOrganizationAuthorPostTagWrite))
    .optional(),
});
export const FlowCommentCommentOrganizationAuthorPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentOrganizationAuthorPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowCommentCommentOrganizationAuthorPostWrite))
    .optional(),
});
export const FlowCommentCommentOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentOrganizationPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowCommentCommentOrganizationPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentOrganizationPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentOrganizationPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowCommentCommentOrganizationPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentOrganizationPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentOrganizationPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z
    .lazy(() => FlowCommentCommentOrganizationPostAuthorWrite)
    .optional(),
  tags: z
    .array(z.lazy(() => FlowCommentCommentOrganizationPostTagWrite))
    .optional(),
});
export const FlowCommentCommentOrganizationPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentOrganizationPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentOrganizationTagPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowCommentCommentOrganizationTagPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentOrganizationTagPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentOrganizationTagPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z
    .lazy(() => FlowCommentCommentOrganizationTagPostAuthorWrite)
    .optional(),
});
export const FlowCommentCommentOrganizationTagPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentOrganizationTagPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowCommentCommentOrganizationTagPostWrite))
    .optional(),
});
export const FlowCommentCommentOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z
    .array(z.lazy(() => FlowCommentCommentOrganizationAuthorWrite))
    .optional(),
  posts: z
    .array(z.lazy(() => FlowCommentCommentOrganizationPostWrite))
    .optional(),
  tags: z
    .array(z.lazy(() => FlowCommentCommentOrganizationTagWrite))
    .optional(),
});
export const FlowCommentCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowCommentCommentPostWrite).optional(),
  author: z.lazy(() => FlowCommentCommentAuthorWrite).optional(),
  organization: z.lazy(() => FlowCommentCommentOrganizationWrite).optional(),
});
export const FlowCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentOrganizationAuthorPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowCommentOrganizationAuthorPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentOrganizationAuthorPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentOrganizationAuthorPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowCommentOrganizationAuthorPostTagWrite))
    .optional(),
});
export const FlowCommentOrganizationAuthorPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentOrganizationAuthorPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowCommentOrganizationAuthorPostWrite))
    .optional(),
});
export const FlowCommentOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentOrganizationPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowCommentOrganizationPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentOrganizationPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentOrganizationPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowCommentOrganizationPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentOrganizationPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentOrganizationPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowCommentOrganizationPostAuthorWrite).optional(),
  tags: z.array(z.lazy(() => FlowCommentOrganizationPostTagWrite)).optional(),
});
export const FlowCommentOrganizationPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentOrganizationPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentOrganizationTagPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowCommentOrganizationTagPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentOrganizationTagPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentOrganizationTagPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowCommentOrganizationTagPostAuthorWrite).optional(),
});
export const FlowCommentOrganizationTagPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentOrganizationTagPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  posts: z.array(z.lazy(() => FlowCommentOrganizationTagPostWrite)).optional(),
});
export const FlowCommentOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z.array(z.lazy(() => FlowCommentOrganizationAuthorWrite)).optional(),
  posts: z.array(z.lazy(() => FlowCommentOrganizationPostWrite)).optional(),
  tags: z.array(z.lazy(() => FlowCommentOrganizationTagWrite)).optional(),
});
export const FlowCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowCommentPostWrite).optional(),
  author: z.lazy(() => FlowCommentAuthorWrite).optional(),
  parent: z.lazy(() => FlowCommentCommentWrite).optional(),
  replies: z.array(z.lazy(() => FlowCommentCommentWrite)).optional(),
  organization: z.lazy(() => FlowCommentOrganizationWrite).optional(),
});
export const FlowCommentUpdateData = z.object({
  content: z.string().optional(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
  post: z.lazy(() => FlowCommentPostWrite).optional(),
  author: z.lazy(() => FlowCommentAuthorWrite).optional(),
  parent: z.lazy(() => FlowCommentCommentWrite).optional(),
  replies: z.array(z.lazy(() => FlowCommentCommentWrite)).optional(),
  organization: z.lazy(() => FlowCommentOrganizationWrite).optional(),
});
export const CommentCreateSchema = FlowCommentCreateData;
export type FlowCommentCreate = z.infer<typeof CommentCreateSchema>;
export const CommentUpdateSchema = FlowCommentUpdateData;
export type FlowCommentUpdate = z.infer<typeof CommentUpdateSchema>;
export type FlowCommentWrite = FlowCommentCreate | FlowCommentUpdate;
