// @generated by next-prisma-flow-state-engine
// file: types/transforms.ts

import type { Prisma } from "../../prisma";
import type { FlowCommentCreate, FlowCommentUpdate } from "./schemas";

export function transformCommentCreate(
  input: FlowCommentCreate,
): Prisma.CommentCreateInput {
  const result: any = {};

  result.content = input.content;
  if ("createdAt" in input && input.createdAt !== undefined) {
    result.createdAt = input.createdAt;
  }
  if (input.author !== undefined) {
    const authorData = input.author;
    if (authorData) {
      if ("connect" in authorData && authorData.connect) {
        result.author = { connect: authorData.connect };
      } else if ("create" in authorData && authorData.create) {
        result.author = { create: authorData.create as any };
      } else if (
        "connectOrCreate" in authorData &&
        authorData.connectOrCreate
      ) {
        result.author = {
          connectOrCreate: authorData.connectOrCreate as any,
        };
      }
    }
  }
  // Handle foreign key field when relation is not provided
  if (input.author === undefined && "authorId" in input && input.authorId) {
    result.author = { connect: { id: input.authorId } };
  }
  if (input.replies !== undefined) {
    const repliesData = input.replies;
    if (repliesData) {
      if ("connect" in repliesData && repliesData.connect) {
        result.replies = { connect: repliesData.connect };
      } else if ("create" in repliesData && repliesData.create) {
        result.replies = {
          create: repliesData.create as any,
        };
      } else if ("createMany" in repliesData && repliesData.createMany) {
      } else if (
        "connectOrCreate" in repliesData &&
        repliesData.connectOrCreate
      ) {
        result.replies = {
          connectOrCreate: repliesData.connectOrCreate as any,
        };
      }
    }
  }
  // Handle post foreign key when relation is not configured
  if (
    "postId" in input &&
    input.postId !== undefined &&
    input.postId !== null
  ) {
    result.post = { connect: { id: input.postId } };
  }
  // Handle parent foreign key when relation is not configured
  if (
    "parentId" in input &&
    input.parentId !== undefined &&
    input.parentId !== null
  ) {
    result.parent = { connect: { id: input.parentId } };
  }
  // Handle organization foreign key when relation is not configured
  if (
    "organizationId" in input &&
    input.organizationId !== undefined &&
    input.organizationId !== null
  ) {
    result.organization = { connect: { id: input.organizationId } };
  }

  return result;
}

export function transformCommentUpdate(
  input: FlowCommentUpdate,
): Prisma.CommentUpdateInput {
  const result: any = {};

  const contentValue = input.content;
  if (contentValue !== undefined && contentValue !== null) {
    result.content = contentValue;
  }
  const createdAtValue = input.createdAt;
  if (createdAtValue !== undefined && createdAtValue !== null) {
    result.createdAt = createdAtValue;
  }
  if (input.author !== undefined) {
    const authorData = input.author;
    if (authorData) {
      result.author = authorData as any;
    }
  }
  if (input.replies !== undefined) {
    const repliesData = input.replies;
    if (repliesData) {
      result.replies = repliesData as any;
    }
  }

  return result;
}
