// @generated by next-prisma-flow-state-engine
// file: types/schemas.ts

import { z } from "zod";

// Scalar fields only
export const CommentScalarSchema = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
});

// Relation schemas
export const CommentAuthorPostsSchema = z.object({
  id: z.string(),
  title: z.string(),
  content: z.string().optional().nullable(),
  published: z.boolean(),
  views: z.number().int(),
  createdAt: z.date(),
  updatedAt: z.date(),
  authorId: z.string(),
});

export const CommentRepliesAuthorSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const CommentAuthorSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  createdAt: z.date(),
  updatedAt: z.date(),
  posts: z.array(CommentAuthorPostsSchema).optional(),
});

export const CommentRepliesSchema = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional().nullable(),
  author: CommentRepliesAuthorSchema.optional(),
});

// Main schema with relations
export const CommentSchema = CommentScalarSchema.extend({
  author: CommentAuthorSchema.optional(),
  replies: z.array(CommentRepliesSchema).optional(),
});

// Input schemas for create operations
const CommentCreateAuthorInputSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  name: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  createdAt: z.date().optional(),
  posts: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  comments: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const CommentCreateRepliesInputSchema = z.object({
  id: z.string().optional(),
  content: z.string(),
  createdAt: z.date().optional(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional().nullable(),
  author: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  replies: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const CommentCreateSchema = z.object({
  id: z.string().optional(),
  content: z.string(),
  createdAt: z.date().optional(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional().nullable(),
  author: z
    .object({
      create: CommentCreateAuthorInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: CommentCreateAuthorInputSchema,
        })
        .optional(),
    })
    .optional(),
  replies: z
    .object({
      create: z
        .union([
          CommentCreateRepliesInputSchema,
          z.array(CommentCreateRepliesInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: CommentCreateRepliesInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: CommentCreateRepliesInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
});

export const CommentCreateManyInputSchema = z.object({
  id: z.string().optional(),
  content: z.string(),
  createdAt: z.date().optional(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional().nullable(),
});

// Input schemas for update operations
const CommentUpdateAuthorInputSchema = z.object({
  email: z.string().optional(),
  name: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  createdAt: z.date().optional(),
  posts: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  comments: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const CommentUpdateRepliesInputSchema = z.object({
  content: z.string().optional(),
  createdAt: z.date().optional(),
  postId: z.string().optional(),
  authorId: z.string().optional(),
  parentId: z.string().optional().nullable(),
  author: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  replies: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const CommentUpdateSchema = z.object({
  content: z.string().optional(),
  createdAt: z.date().optional(),
  postId: z.string().optional(),
  authorId: z.string().optional(),
  parentId: z.string().optional().nullable(),
  author: z
    .object({
      create: CommentCreateAuthorInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: CommentCreateAuthorInputSchema,
        })
        .optional(),
      update: z
        .object({
          where: z.object({ id: z.string() }).optional(),
          data: CommentUpdateAuthorInputSchema,
        })
        .optional(),
      upsert: z
        .object({
          where: z.object({ id: z.string() }),
          update: CommentUpdateAuthorInputSchema,
          create: CommentCreateAuthorInputSchema,
        })
        .optional(),
    })
    .optional(),
  replies: z
    .object({
      create: z
        .union([
          CommentCreateRepliesInputSchema,
          z.array(CommentCreateRepliesInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: CommentCreateRepliesInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: CommentCreateRepliesInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: CommentUpdateRepliesInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: CommentUpdateRepliesInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: CommentUpdateRepliesInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: CommentUpdateRepliesInputSchema,
            create: CommentCreateRepliesInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: CommentUpdateRepliesInputSchema,
              create: CommentCreateRepliesInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
});

export const CommentUpdateManyInputSchema = z.object({
  content: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
  postId: z.string().optional().nullable(),
  authorId: z.string().optional().nullable(),
  parentId: z.string().optional().nullable(),
});

export const CommentUpsertInputSchema = z.object({
  create: CommentCreateSchema,
  update: CommentUpdateSchema,
});

// Filter and where schemas
// Relation where schemas
export const CommentAuthorFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  email: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  bio: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const CommentRepliesFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  content: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  postId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  authorId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  parentId: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

// Base filter schema
export const CommentFilterBaseSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  content: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  postId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  authorId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  parentId: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  author: z.union([CommentAuthorFilterSchema, z.null()]).optional(),
  replies: z
    .object({
      every: CommentRepliesFilterSchema.optional(),
      some: CommentRepliesFilterSchema.optional(),
      none: CommentRepliesFilterSchema.optional(),
    })
    .optional(),
  AND: z.union([z.any(), z.array(z.any())]).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.union([z.any(), z.array(z.any())]).optional(),
});

// Extended filter schema with self-references
export const CommentFilterSchema = CommentFilterBaseSchema.extend({
  AND: z.array(CommentFilterBaseSchema).optional(),
  OR: z.array(CommentFilterBaseSchema).optional(),
  NOT: CommentFilterBaseSchema.optional(),
});

// Alias for Prisma compatibility
export const CommentWhereInputSchema = CommentFilterSchema;

export const CommentWhereUniqueInputSchema = z.object({
  id: z.string().optional(),
});

// Type exports
export type FlowComment = z.infer<typeof CommentSchema>;
export type FlowCommentCreate = z.infer<typeof CommentCreateSchema>;
export type FlowCommentUpdate = z.infer<typeof CommentUpdateSchema>;
export type FlowCommentFilter = z.infer<typeof CommentFilterSchema>;
export type FlowCommentWhere = z.infer<typeof CommentWhereInputSchema>;
export type FlowCommentWhereUnique = z.infer<
  typeof CommentWhereUniqueInputSchema
>;
