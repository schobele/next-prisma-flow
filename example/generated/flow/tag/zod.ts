// @generated by next-prisma-flow-state-engine
// file: zod.ts

import { z } from "zod";
import type { TagDeepSelect, TagShallowSelect } from "./selects";

// Reusable scalar field helpers for Tag
// Note: Relations are added via named schemas to avoid cycles

export const FlowTagSchema = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.date(),
});
export type FlowTag = z.infer<typeof FlowTagSchema>;
export const TagDeepSchema = FlowTagSchema;

export const TagShallowSchema = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.date(),
});
export type FlowTagShallow = z.infer<typeof TagShallowSchema>;
// Shallow Prisma payload type removed; prefer inferring from Zod schema

export const FlowTagPostAuthorCommentCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagPostAuthorCommentCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostAuthorCommentCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostAuthorCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  organization: z
    .lazy(() => FlowTagPostAuthorCommentCommentOrganizationWrite)
    .optional(),
});
export const FlowTagPostAuthorCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostAuthorCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostAuthorCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagPostAuthorCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostAuthorCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostAuthorCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z.lazy(() => FlowTagPostAuthorCommentCommentWrite).optional(),
  replies: z
    .array(z.lazy(() => FlowTagPostAuthorCommentCommentWrite))
    .optional(),
  organization: z
    .lazy(() => FlowTagPostAuthorCommentOrganizationWrite)
    .optional(),
});
export const FlowTagPostAuthorCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostAuthorCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostAuthorOrganizationCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowTagPostAuthorOrganizationCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostAuthorOrganizationCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostAuthorOrganizationCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowTagPostAuthorOrganizationCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowTagPostAuthorOrganizationCommentCommentWrite))
    .optional(),
});
export const FlowTagPostAuthorOrganizationCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostAuthorOrganizationCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostAuthorOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowTagPostAuthorOrganizationCommentWrite))
    .optional(),
});
export const FlowTagPostAuthorOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostAuthorOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  comments: z.array(z.lazy(() => FlowTagPostAuthorCommentWrite)).optional(),
  organization: z.lazy(() => FlowTagPostAuthorOrganizationWrite).optional(),
});
export const FlowTagPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostCommentAuthorOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagPostCommentAuthorOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostCommentAuthorOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  organization: z
    .lazy(() => FlowTagPostCommentAuthorOrganizationWrite)
    .optional(),
});
export const FlowTagPostCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostCommentCommentAuthorOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagPostCommentCommentAuthorOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostCommentCommentAuthorOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostCommentCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  organization: z
    .lazy(() => FlowTagPostCommentCommentAuthorOrganizationWrite)
    .optional(),
});
export const FlowTagPostCommentCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostCommentCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostCommentCommentOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagPostCommentCommentOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostCommentCommentOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostCommentCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z
    .array(z.lazy(() => FlowTagPostCommentCommentOrganizationAuthorWrite))
    .optional(),
});
export const FlowTagPostCommentCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostCommentCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowTagPostCommentCommentAuthorWrite).optional(),
  organization: z
    .lazy(() => FlowTagPostCommentCommentOrganizationWrite)
    .optional(),
});
export const FlowTagPostCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostCommentOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagPostCommentOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostCommentOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z
    .array(z.lazy(() => FlowTagPostCommentOrganizationAuthorWrite))
    .optional(),
});
export const FlowTagPostCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowTagPostCommentAuthorWrite).optional(),
  parent: z.lazy(() => FlowTagPostCommentCommentWrite).optional(),
  replies: z.array(z.lazy(() => FlowTagPostCommentCommentWrite)).optional(),
  organization: z.lazy(() => FlowTagPostCommentOrganizationWrite).optional(),
});
export const FlowTagPostCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostOrganizationAuthorCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowTagPostOrganizationAuthorCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostOrganizationAuthorCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostOrganizationAuthorCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowTagPostOrganizationAuthorCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowTagPostOrganizationAuthorCommentCommentWrite))
    .optional(),
});
export const FlowTagPostOrganizationAuthorCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostOrganizationAuthorCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowTagPostOrganizationAuthorCommentWrite))
    .optional(),
});
export const FlowTagPostOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostOrganizationCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagPostOrganizationCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostOrganizationCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostOrganizationCommentCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagPostOrganizationCommentCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostOrganizationCommentCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostOrganizationCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z
    .lazy(() => FlowTagPostOrganizationCommentCommentAuthorWrite)
    .optional(),
});
export const FlowTagPostOrganizationCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostOrganizationCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostOrganizationCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowTagPostOrganizationCommentAuthorWrite).optional(),
  parent: z.lazy(() => FlowTagPostOrganizationCommentCommentWrite).optional(),
  replies: z
    .array(z.lazy(() => FlowTagPostOrganizationCommentCommentWrite))
    .optional(),
});
export const FlowTagPostOrganizationCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostOrganizationCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z.array(z.lazy(() => FlowTagPostOrganizationAuthorWrite)).optional(),
  comments: z
    .array(z.lazy(() => FlowTagPostOrganizationCommentWrite))
    .optional(),
});
export const FlowTagPostOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowTagPostAuthorWrite).optional(),
  comments: z.array(z.lazy(() => FlowTagPostCommentWrite)).optional(),
  organization: z.lazy(() => FlowTagPostOrganizationWrite).optional(),
});
export const FlowTagPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationAuthorPostCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowTagOrganizationAuthorPostCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationAuthorPostCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationAuthorPostCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowTagOrganizationAuthorPostCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowTagOrganizationAuthorPostCommentCommentWrite))
    .optional(),
});
export const FlowTagOrganizationAuthorPostCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationAuthorPostCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationAuthorPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowTagOrganizationAuthorPostCommentWrite))
    .optional(),
});
export const FlowTagOrganizationAuthorPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationAuthorPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationAuthorCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagOrganizationAuthorCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationAuthorCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationAuthorCommentCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagOrganizationAuthorCommentCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationAuthorCommentCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationAuthorCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z
    .lazy(() => FlowTagOrganizationAuthorCommentCommentPostWrite)
    .optional(),
});
export const FlowTagOrganizationAuthorCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationAuthorCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationAuthorCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowTagOrganizationAuthorCommentPostWrite).optional(),
  parent: z.lazy(() => FlowTagOrganizationAuthorCommentCommentWrite).optional(),
  replies: z
    .array(z.lazy(() => FlowTagOrganizationAuthorCommentCommentWrite))
    .optional(),
});
export const FlowTagOrganizationAuthorCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationAuthorCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z.array(z.lazy(() => FlowTagOrganizationAuthorPostWrite)).optional(),
  comments: z
    .array(z.lazy(() => FlowTagOrganizationAuthorCommentWrite))
    .optional(),
});
export const FlowTagOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationPostAuthorCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowTagOrganizationPostAuthorCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationPostAuthorCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationPostAuthorCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowTagOrganizationPostAuthorCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowTagOrganizationPostAuthorCommentCommentWrite))
    .optional(),
});
export const FlowTagOrganizationPostAuthorCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationPostAuthorCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowTagOrganizationPostAuthorCommentWrite))
    .optional(),
});
export const FlowTagOrganizationPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationPostCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagOrganizationPostCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationPostCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationPostCommentCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagOrganizationPostCommentCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationPostCommentCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationPostCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z
    .lazy(() => FlowTagOrganizationPostCommentCommentAuthorWrite)
    .optional(),
});
export const FlowTagOrganizationPostCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationPostCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationPostCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowTagOrganizationPostCommentAuthorWrite).optional(),
  parent: z.lazy(() => FlowTagOrganizationPostCommentCommentWrite).optional(),
  replies: z
    .array(z.lazy(() => FlowTagOrganizationPostCommentCommentWrite))
    .optional(),
});
export const FlowTagOrganizationPostCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationPostCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowTagOrganizationPostAuthorWrite).optional(),
  comments: z
    .array(z.lazy(() => FlowTagOrganizationPostCommentWrite))
    .optional(),
});
export const FlowTagOrganizationPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationCommentPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagOrganizationCommentPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationCommentPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowTagOrganizationCommentPostAuthorWrite).optional(),
});
export const FlowTagOrganizationCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationCommentAuthorPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagOrganizationCommentAuthorPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationCommentAuthorPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowTagOrganizationCommentAuthorPostWrite))
    .optional(),
});
export const FlowTagOrganizationCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationCommentCommentPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagOrganizationCommentCommentPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationCommentCommentPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationCommentCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z
    .lazy(() => FlowTagOrganizationCommentCommentPostAuthorWrite)
    .optional(),
});
export const FlowTagOrganizationCommentCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationCommentCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationCommentCommentAuthorPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
});
export const FlowTagOrganizationCommentCommentAuthorPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationCommentCommentAuthorPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationCommentCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowTagOrganizationCommentCommentAuthorPostWrite))
    .optional(),
});
export const FlowTagOrganizationCommentCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationCommentCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowTagOrganizationCommentCommentPostWrite).optional(),
  author: z.lazy(() => FlowTagOrganizationCommentCommentAuthorWrite).optional(),
});
export const FlowTagOrganizationCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowTagOrganizationCommentPostWrite).optional(),
  author: z.lazy(() => FlowTagOrganizationCommentAuthorWrite).optional(),
  parent: z.lazy(() => FlowTagOrganizationCommentCommentWrite).optional(),
  replies: z
    .array(z.lazy(() => FlowTagOrganizationCommentCommentWrite))
    .optional(),
});
export const FlowTagOrganizationCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z.array(z.lazy(() => FlowTagOrganizationAuthorWrite)).optional(),
  posts: z.array(z.lazy(() => FlowTagOrganizationPostWrite)).optional(),
  comments: z.array(z.lazy(() => FlowTagOrganizationCommentWrite)).optional(),
});
export const FlowTagOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowTagOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  posts: z.array(z.lazy(() => FlowTagPostWrite)).optional(),
  organization: z.lazy(() => FlowTagOrganizationWrite).optional(),
});
export const FlowTagUpdateData = z.object({
  name: z.string().optional(),
  createdAt: z.date().optional(),
  posts: z.array(z.lazy(() => FlowTagPostWrite)).optional(),
  organization: z.lazy(() => FlowTagOrganizationWrite).optional(),
});
export const TagCreateSchema = FlowTagCreateData;
export type FlowTagCreate = z.infer<typeof TagCreateSchema>;
export const TagUpdateSchema = FlowTagUpdateData;
export type FlowTagUpdate = z.infer<typeof TagUpdateSchema>;
export type FlowTagWrite = FlowTagCreate | FlowTagUpdate;
