// @generated by next-prisma-flow-state-engine
// file: types/transforms.ts

import type { Prisma } from "../../prisma";
import type { FlowOrganizationCreate, FlowOrganizationUpdate } from "./schemas";

export function transformOrganizationCreate(
  input: FlowOrganizationCreate,
): Prisma.OrganizationCreateInput {
  const result: any = {};

  if ("name" in input && input.name !== undefined) {
    result.name = input.name;
  }
  if ("createdAt" in input && input.createdAt !== undefined) {
    result.createdAt = input.createdAt;
  }
  if (input.authors !== undefined) {
    const authorsData = input.authors;
    if (authorsData) {
      if ("connect" in authorsData && authorsData.connect) {
        result.authors = { connect: authorsData.connect };
      } else if ("create" in authorsData && authorsData.create) {
        result.authors = {
          create: authorsData.create as any,
        };
      } else if ("createMany" in authorsData && authorsData.createMany) {
      } else if (
        "connectOrCreate" in authorsData &&
        authorsData.connectOrCreate
      ) {
        result.authors = {
          connectOrCreate: authorsData.connectOrCreate as any,
        };
      }
    }
  }
  if (input.posts !== undefined) {
    const postsData = input.posts;
    if (postsData) {
      if ("connect" in postsData && postsData.connect) {
        result.posts = { connect: postsData.connect };
      } else if ("create" in postsData && postsData.create) {
        result.posts = {
          create: postsData.create as any,
        };
      } else if ("createMany" in postsData && postsData.createMany) {
      } else if ("connectOrCreate" in postsData && postsData.connectOrCreate) {
        result.posts = {
          connectOrCreate: postsData.connectOrCreate as any,
        };
      }
    }
  }
  if (input.comments !== undefined) {
    const commentsData = input.comments;
    if (commentsData) {
      if ("connect" in commentsData && commentsData.connect) {
        result.comments = { connect: commentsData.connect };
      } else if ("create" in commentsData && commentsData.create) {
        result.comments = {
          create: commentsData.create as any,
        };
      } else if ("createMany" in commentsData && commentsData.createMany) {
      } else if (
        "connectOrCreate" in commentsData &&
        commentsData.connectOrCreate
      ) {
        result.comments = {
          connectOrCreate: commentsData.connectOrCreate as any,
        };
      }
    }
  }
  if (input.tags !== undefined) {
    const tagsData = input.tags;
    if (tagsData) {
      if ("connect" in tagsData && tagsData.connect) {
        result.tags = { connect: tagsData.connect };
      } else if ("create" in tagsData && tagsData.create) {
        result.tags = {
          create: tagsData.create as any,
        };
      } else if ("createMany" in tagsData && tagsData.createMany) {
      } else if ("connectOrCreate" in tagsData && tagsData.connectOrCreate) {
        result.tags = {
          connectOrCreate: tagsData.connectOrCreate as any,
        };
      }
    }
  }

  return result;
}

export function transformOrganizationUpdate(
  input: FlowOrganizationUpdate,
): Prisma.OrganizationUpdateInput {
  const result: any = {};

  const nameValue = input.name;
  if (nameValue !== undefined) {
    result.name = nameValue;
  }
  const createdAtValue = input.createdAt;
  if (createdAtValue !== undefined && createdAtValue !== null) {
    result.createdAt = createdAtValue;
  }
  if (input.authors !== undefined) {
    const authorsData = input.authors;
    if (authorsData) {
      result.authors = authorsData as any;
    }
  }
  if (input.posts !== undefined) {
    const postsData = input.posts;
    if (postsData) {
      result.posts = postsData as any;
    }
  }
  if (input.comments !== undefined) {
    const commentsData = input.comments;
    if (commentsData) {
      result.comments = commentsData as any;
    }
  }
  if (input.tags !== undefined) {
    const tagsData = input.tags;
    if (tagsData) {
      result.tags = tagsData as any;
    }
  }

  return result;
}
