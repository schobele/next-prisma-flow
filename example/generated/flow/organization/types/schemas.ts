// @generated by next-prisma-flow-state-engine
// file: types/schemas.ts

import { z } from "zod";

// Scalar fields only
export const OrganizationScalarSchema = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

// Relation schemas
// Main schema with relations
export const OrganizationSchema = OrganizationScalarSchema;

// Input schemas for create operations
export const OrganizationCreateSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  createdAt: z.date().optional(),
  authors: z
    .object({
      create: z
        .union([
          OrganizationCreateAuthorsInputSchema,
          z.array(OrganizationCreateAuthorsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: OrganizationCreateAuthorsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: OrganizationCreateAuthorsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
  posts: z
    .object({
      create: z
        .union([
          OrganizationCreatePostsInputSchema,
          z.array(OrganizationCreatePostsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: OrganizationCreatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: OrganizationCreatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
  comments: z
    .object({
      create: z
        .union([
          OrganizationCreateCommentsInputSchema,
          z.array(OrganizationCreateCommentsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: OrganizationCreateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: OrganizationCreateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      create: z
        .union([
          OrganizationCreateTagsInputSchema,
          z.array(OrganizationCreateTagsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: OrganizationCreateTagsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: OrganizationCreateTagsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
});

export const OrganizationCreateManyInputSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  createdAt: z.date().optional(),
});

// Input schemas for update operations
export const OrganizationUpdateSchema = z.object({
  name: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
  authors: z
    .object({
      create: z
        .union([
          OrganizationUpdateAuthorsInputSchema,
          z.array(OrganizationUpdateAuthorsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: OrganizationUpdateAuthorsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: OrganizationUpdateAuthorsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: OrganizationUpdateAuthorsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: OrganizationUpdateAuthorsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: OrganizationUpdateAuthorsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: OrganizationUpdateAuthorsInputSchema,
            create: OrganizationUpdateAuthorsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: OrganizationUpdateAuthorsInputSchema,
              create: OrganizationUpdateAuthorsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
  posts: z
    .object({
      create: z
        .union([
          OrganizationUpdatePostsInputSchema,
          z.array(OrganizationUpdatePostsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: OrganizationUpdatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: OrganizationUpdatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: OrganizationUpdatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: OrganizationUpdatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: OrganizationUpdatePostsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: OrganizationUpdatePostsInputSchema,
            create: OrganizationUpdatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: OrganizationUpdatePostsInputSchema,
              create: OrganizationUpdatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
  comments: z
    .object({
      create: z
        .union([
          OrganizationUpdateCommentsInputSchema,
          z.array(OrganizationUpdateCommentsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: OrganizationUpdateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: OrganizationUpdateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: OrganizationUpdateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: OrganizationUpdateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: OrganizationUpdateCommentsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: OrganizationUpdateCommentsInputSchema,
            create: OrganizationUpdateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: OrganizationUpdateCommentsInputSchema,
              create: OrganizationUpdateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
  tags: z
    .object({
      create: z
        .union([
          OrganizationUpdateTagsInputSchema,
          z.array(OrganizationUpdateTagsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: OrganizationUpdateTagsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: OrganizationUpdateTagsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: OrganizationUpdateTagsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: OrganizationUpdateTagsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: OrganizationUpdateTagsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: OrganizationUpdateTagsInputSchema,
            create: OrganizationUpdateTagsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: OrganizationUpdateTagsInputSchema,
              create: OrganizationUpdateTagsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
});

export const OrganizationUpdateManyInputSchema = z.object({
  name: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
});

export const OrganizationUpsertInputSchema = z.object({
  create: OrganizationCreateSchema,
  update: OrganizationUpdateSchema,
});

// Filter and where schemas
// Relation where schemas
export const OrganizationAuthorsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  email: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  bio: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const OrganizationPostsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  title: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  content: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  published: z
    .union([
      z.boolean(),
      z.object({
        equals: z.boolean().optional(),
        not: z.boolean().optional(),
      }),
    ])
    .optional(),
  views: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  authorId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const OrganizationCommentsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  content: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  postId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  authorId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  parentId: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const OrganizationTagsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

// Base filter schema
export const OrganizationFilterBaseSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  authors: z
    .object({
      every: OrganizationAuthorsFilterSchema.optional(),
      some: OrganizationAuthorsFilterSchema.optional(),
      none: OrganizationAuthorsFilterSchema.optional(),
    })
    .optional(),
  posts: z
    .object({
      every: OrganizationPostsFilterSchema.optional(),
      some: OrganizationPostsFilterSchema.optional(),
      none: OrganizationPostsFilterSchema.optional(),
    })
    .optional(),
  comments: z
    .object({
      every: OrganizationCommentsFilterSchema.optional(),
      some: OrganizationCommentsFilterSchema.optional(),
      none: OrganizationCommentsFilterSchema.optional(),
    })
    .optional(),
  tags: z
    .object({
      every: OrganizationTagsFilterSchema.optional(),
      some: OrganizationTagsFilterSchema.optional(),
      none: OrganizationTagsFilterSchema.optional(),
    })
    .optional(),
  AND: z.union([z.any(), z.array(z.any())]).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.union([z.any(), z.array(z.any())]).optional(),
});

// Extended filter schema with self-references
export const OrganizationFilterSchema = OrganizationFilterBaseSchema.extend({
  AND: z.array(OrganizationFilterBaseSchema).optional(),
  OR: z.array(OrganizationFilterBaseSchema).optional(),
  NOT: OrganizationFilterBaseSchema.optional(),
});

// Alias for Prisma compatibility
export const OrganizationWhereInputSchema = OrganizationFilterSchema;

export const OrganizationWhereUniqueInputSchema = z.object({
  id: z.string().optional(),
});

// Type exports
export type FlowOrganization = z.infer<typeof OrganizationSchema>;
export type FlowOrganizationCreate = z.infer<typeof OrganizationCreateSchema>;
export type FlowOrganizationUpdate = z.infer<typeof OrganizationUpdateSchema>;
export type FlowOrganizationFilter = z.infer<typeof OrganizationFilterSchema>;
export type FlowOrganizationWhere = z.infer<
  typeof OrganizationWhereInputSchema
>;
export type FlowOrganizationWhereUnique = z.infer<
  typeof OrganizationWhereUniqueInputSchema
>;
