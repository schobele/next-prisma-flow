// @generated by next-prisma-flow-state-engine
// file: server/actions.ts

"use server";

import { prisma } from "../../prisma";
import {
  invalidateTags,
  keys,
  FlowCtx,
  FlowPolicyError,
  FlowValidationError,
} from "../../core";
import { canOrganization } from "../../policies";
import { OrganizationSelect } from "./selects";
import {
  OrganizationCreateSchema,
  OrganizationUpdateSchema,
} from "../types/schemas";
import type {
  FlowOrganizationCreate,
  FlowOrganizationUpdate,
} from "../types/schemas";
import {
  transformOrganizationCreate,
  transformOrganizationUpdate,
} from "../types/transforms";

// Transform Prisma response to match FlowPost schema (null -> undefined for relations)
function transformResponse(item: any): any {
  if (!item) return item;
  const result = { ...item };
  return result;
}

export async function createOrganization(
  data: FlowOrganizationCreate,
  ctx: FlowCtx = {},
) {
  const policy = await canOrganization("create", ctx || {});
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  const parsed = OrganizationCreateSchema.safeParse(data);
  if (!parsed.success) {
    throw new FlowValidationError(parsed.error.issues);
  }

  const createData = transformOrganizationCreate(parsed.data as any);
  const item = await prisma.organization.create({
    data: { ...createData, ...policy.data },
    select: OrganizationSelect,
  });

  await invalidateTags([keys.m("Organization").tag()]);
  return transformResponse(item);
}

export async function updateOrganization(
  id: string,
  data: FlowOrganizationUpdate,
  ctx: FlowCtx = {},
) {
  const policy = await canOrganization("update", ctx || {}, id);
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  const parsed = OrganizationUpdateSchema.safeParse(data);
  if (!parsed.success) {
    throw new FlowValidationError(parsed.error.issues);
  }

  const updateData = transformOrganizationUpdate(parsed.data as any);
  const item = await prisma.organization.update({
    where: { id: id, ...policy.where },
    data: { ...updateData, ...policy.data },
    select: OrganizationSelect,
  });

  await invalidateTags([
    keys.m("Organization").tag(),
    keys.m("Organization").tag(String(id)),
  ]);
  return transformResponse(item);
}

export async function deleteOrganization(id: string, ctx?: FlowCtx) {
  const policy = await canOrganization("delete", ctx || {}, id);
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  await prisma.organization.delete({
    where: { id: id, ...policy.where },
  });

  await invalidateTags([
    keys.m("Organization").tag(),
    keys.m("Organization").tag(String(id)),
  ]);
}
