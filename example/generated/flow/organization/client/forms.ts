// @generated by next-prisma-flow-state-engine
// file: client/forms.ts

"use client";

import { useCallback, useEffect } from "react";
import {
  useForm,
  type UseFormReturn,
  type UseFormProps,
} from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  OrganizationCreateSchema,
  OrganizationUpdateSchema,
} from "../types/schemas";
import type {
  FlowOrganization,
  FlowOrganizationCreate,
  FlowOrganizationUpdate,
} from "../types/schemas";
import {
  useOrganization,
  useCreateOrganization,
  useUpdateOrganization,
} from "./hooks";

export type OrganizationFormOptions = {
  id?: string;
  defaultValues?:
    | Partial<FlowOrganizationCreate>
    | Partial<FlowOrganizationUpdate>;
  onSuccess?: (data: FlowOrganization) => void;
  onError?: (error: Error) => void;
  formOptions?: Omit<
    UseFormProps<FlowOrganizationCreate | FlowOrganizationUpdate>,
    "resolver" | "defaultValues"
  >;
};

export function useOrganizationForm(options?: OrganizationFormOptions) {
  const { id, defaultValues, onSuccess, onError, formOptions } = options || {};

  // Smart mode detection
  const mode = id ? "update" : "create";

  // Fetch existing data if updating
  const { data: existingData } = useOrganization(id || "", {
    enabled: !!id,
  });

  // Choose appropriate schema
  const schema =
    mode === "create" ? OrganizationCreateSchema : OrganizationUpdateSchema;

  // Initialize form with proper defaults
  const form = useForm<FlowOrganizationCreate | FlowOrganizationUpdate>({
    ...formOptions,
    resolver: zodResolver(schema),
    defaultValues: {
      ...defaultValues,
      ...(existingData || {}),
    } as FlowOrganizationCreate | FlowOrganizationUpdate,
  });

  // Update form when existing data loads, preserving user changes
  useEffect(() => {
    if (existingData && mode === "update") {
      // Extract only scalar fields for update forms
      const updateData: any = {};

      // Copy scalar fields only, skip relations (arrays and objects)
      Object.keys(existingData).forEach((key) => {
        const value = (existingData as any)[key];
        // Include scalar values and nulls, skip arrays and objects (relations)
        if (
          value === null ||
          (typeof value !== "object" && !Array.isArray(value))
        ) {
          updateData[key] = value;
        }
      });

      console.log(
        "[OrganizationForm] Resetting form with scalar data only:",
        updateData,
      );
      form.reset(updateData as FlowOrganizationUpdate, {
        keepDirtyValues: true, // Preserve user-modified fields
        keepErrors: true, // Keep validation errors for dirty fields
      });
    }
  }, [existingData, mode, form]);

  // Get appropriate mutation
  const createMutation = useCreateOrganization({
    onSuccess: (data) => {
      form.reset();
      onSuccess?.(data);
    },
    onError,
  });

  const updateMutation = useUpdateOrganization(id || "", {
    onSuccess: (data) => {
      onSuccess?.(data);
    },
    onError,
  });

  const mutation = mode === "update" ? updateMutation : createMutation;

  // Submit handler
  const submit = useCallback(
    (data: FlowOrganizationCreate | FlowOrganizationUpdate) => {
      console.log("[OrganizationForm] Submitting " + mode + " form:", data);
      if (mode === "update") {
        return updateMutation.mutate(data as FlowOrganizationUpdate);
      } else {
        return createMutation.mutate(data as FlowOrganizationCreate);
      }
    },
    [createMutation, updateMutation, mode],
  );

  // Validation error handler
  const onInvalid = useCallback((errors: any) => {
    console.error("[OrganizationForm] Validation failed:", errors);
  }, []);

  return {
    form,
    submit: form.handleSubmit(submit, onInvalid),
    isSubmitting: mutation.isPending,
    error: mutation.error,
    isSuccess: mutation.isSuccess,
    mode,
    reset: () => form.reset(),
  };
}

export function useOrganizationQuickForm(id?: string) {
  return useOrganizationForm({ id });
}

export type OrganizationFormProps = {
  form: UseFormReturn<FlowOrganizationCreate | FlowOrganizationUpdate>;
  onSubmit: () => void;
  isSubmitting: boolean;
  error?: Error | null;
};
