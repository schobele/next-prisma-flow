// @generated by next-prisma-flow-state-engine
// file: hooks.ts

"use client";

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useState } from "react";
import { keys } from "../core/keys";
import { useFlowCtx } from "../core/provider";
import type { OrganizationListParams } from "./queries.server";
import type { FlowOrganization, FlowOrganizationWrite } from "./zod";

export function useOrganization(id: string) {
  const ctx = useFlowCtx();
  return useQuery({
    queryKey: keys.m("Organization").byId(String(id)),
    queryFn: async () => {
      const { getOrganizationById } = await import("./queries.server");
      return getOrganizationById(id, ctx);
    },
  });
}

export function useOrganizationList(params?: OrganizationListParams) {
  const ctx = useFlowCtx();
  const [localParams, setLocalParams] = useState(params || {});

  const query = useQuery({
    queryKey: keys.m("Organization").list(localParams),
    queryFn: async () => {
      const { listOrganizations } = await import("./queries.server");
      return listOrganizations(localParams, ctx);
    },
  });

  return {
    ...query,
    params: localParams,
    setParams: setLocalParams,
  };
}

export function useCreateOrganization() {
  const ctx = useFlowCtx();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (data: FlowOrganizationWrite) => {
      const { createOrganization } = await import("./actions.server");
      const result = await createOrganization(data, ctx);
      if (!result.ok) throw result;
      return result.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: [keys.m("Organization").tag()],
      });
    },
  });
}

export function useUpdateOrganization(id: string) {
  const ctx = useFlowCtx();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (data: Partial<FlowOrganizationWrite>) => {
      const { updateOrganization } = await import("./actions.server");
      const result = await updateOrganization(id, data, ctx);
      if (!result.ok) throw result;
      return result.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: keys.m("Organization").byId(String(id)),
      });
      queryClient.invalidateQueries({
        queryKey: [keys.m("Organization").tag()],
      });
    },
  });
}

export function useDeleteOrganization() {
  const ctx = useFlowCtx();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (id: string) => {
      const { deleteOrganization } = await import("./actions.server");
      const result = await deleteOrganization(id, ctx);
      if (!result.ok) throw result;
    },
    onSuccess: (_, id) => {
      queryClient.invalidateQueries({
        queryKey: keys.m("Organization").byId(String(id)),
      });
      queryClient.invalidateQueries({
        queryKey: [keys.m("Organization").tag()],
      });
    },
  });
}
