// @generated by next-prisma-flow-state-engine
// file: zod.ts

import { z } from "zod";
import type {
  OrganizationDeepSelect,
  OrganizationShallowSelect,
} from "./selects";

// Reusable scalar field helpers for Organization
// Note: Relations are added via named schemas to avoid cycles

export const FlowOrganizationSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
});
export type FlowOrganization = z.infer<typeof FlowOrganizationSchema>;
export const OrganizationDeepSchema = FlowOrganizationSchema;

export const OrganizationShallowSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
});
export type FlowOrganizationShallow = z.infer<typeof OrganizationShallowSchema>;
// Shallow Prisma payload type removed; prefer inferring from Zod schema

export const FlowOrganizationAuthorPostCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationAuthorPostCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationAuthorPostCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationAuthorPostCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowOrganizationAuthorPostCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowOrganizationAuthorPostCommentCommentWrite))
    .optional(),
});
export const FlowOrganizationAuthorPostCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationAuthorPostCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationAuthorPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationAuthorPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationAuthorPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationAuthorPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowOrganizationAuthorPostCommentWrite))
    .optional(),
  tags: z.array(z.lazy(() => FlowOrganizationAuthorPostTagWrite)).optional(),
});
export const FlowOrganizationAuthorPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationAuthorPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationAuthorCommentPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationAuthorCommentPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationAuthorCommentPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationAuthorCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowOrganizationAuthorCommentPostTagWrite))
    .optional(),
});
export const FlowOrganizationAuthorCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationAuthorCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationAuthorCommentCommentPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationAuthorCommentCommentPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationAuthorCommentCommentPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationAuthorCommentCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowOrganizationAuthorCommentCommentPostTagWrite))
    .optional(),
});
export const FlowOrganizationAuthorCommentCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationAuthorCommentCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationAuthorCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowOrganizationAuthorCommentCommentPostWrite).optional(),
});
export const FlowOrganizationAuthorCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationAuthorCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationAuthorCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowOrganizationAuthorCommentPostWrite).optional(),
  parent: z.lazy(() => FlowOrganizationAuthorCommentCommentWrite).optional(),
  replies: z
    .array(z.lazy(() => FlowOrganizationAuthorCommentCommentWrite))
    .optional(),
});
export const FlowOrganizationAuthorCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationAuthorCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z.array(z.lazy(() => FlowOrganizationAuthorPostWrite)).optional(),
  comments: z
    .array(z.lazy(() => FlowOrganizationAuthorCommentWrite))
    .optional(),
});
export const FlowOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationPostAuthorCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationPostAuthorCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationPostAuthorCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationPostAuthorCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowOrganizationPostAuthorCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowOrganizationPostAuthorCommentCommentWrite))
    .optional(),
});
export const FlowOrganizationPostAuthorCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationPostAuthorCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowOrganizationPostAuthorCommentWrite))
    .optional(),
});
export const FlowOrganizationPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationPostCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationPostCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationPostCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationPostCommentCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationPostCommentCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationPostCommentCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationPostCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z
    .lazy(() => FlowOrganizationPostCommentCommentAuthorWrite)
    .optional(),
});
export const FlowOrganizationPostCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationPostCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationPostCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowOrganizationPostCommentAuthorWrite).optional(),
  parent: z.lazy(() => FlowOrganizationPostCommentCommentWrite).optional(),
  replies: z
    .array(z.lazy(() => FlowOrganizationPostCommentCommentWrite))
    .optional(),
});
export const FlowOrganizationPostCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationPostCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowOrganizationPostAuthorWrite).optional(),
  comments: z.array(z.lazy(() => FlowOrganizationPostCommentWrite)).optional(),
  tags: z.array(z.lazy(() => FlowOrganizationPostTagWrite)).optional(),
});
export const FlowOrganizationPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationCommentPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationCommentPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowOrganizationCommentPostAuthorWrite).optional(),
  tags: z.array(z.lazy(() => FlowOrganizationCommentPostTagWrite)).optional(),
});
export const FlowOrganizationCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentAuthorPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationCommentAuthorPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentAuthorPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentAuthorPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowOrganizationCommentAuthorPostTagWrite))
    .optional(),
});
export const FlowOrganizationCommentAuthorPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentAuthorPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowOrganizationCommentAuthorPostWrite))
    .optional(),
});
export const FlowOrganizationCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentCommentPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationCommentCommentPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentCommentPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentCommentPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationCommentCommentPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentCommentPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentCommentPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z
    .lazy(() => FlowOrganizationCommentCommentPostAuthorWrite)
    .optional(),
  tags: z
    .array(z.lazy(() => FlowOrganizationCommentCommentPostTagWrite))
    .optional(),
});
export const FlowOrganizationCommentCommentPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentCommentPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentCommentAuthorPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationCommentCommentAuthorPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentCommentAuthorPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentCommentAuthorPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowOrganizationCommentCommentAuthorPostTagWrite))
    .optional(),
});
export const FlowOrganizationCommentCommentAuthorPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentCommentAuthorPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  posts: z
    .array(z.lazy(() => FlowOrganizationCommentCommentAuthorPostWrite))
    .optional(),
});
export const FlowOrganizationCommentCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowOrganizationCommentCommentPostWrite).optional(),
  author: z.lazy(() => FlowOrganizationCommentCommentAuthorWrite).optional(),
});
export const FlowOrganizationCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  post: z.lazy(() => FlowOrganizationCommentPostWrite).optional(),
  author: z.lazy(() => FlowOrganizationCommentAuthorWrite).optional(),
  parent: z.lazy(() => FlowOrganizationCommentCommentWrite).optional(),
  replies: z
    .array(z.lazy(() => FlowOrganizationCommentCommentWrite))
    .optional(),
});
export const FlowOrganizationCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationTagPostAuthorCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationTagPostAuthorCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationTagPostAuthorCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationTagPostAuthorCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowOrganizationTagPostAuthorCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowOrganizationTagPostAuthorCommentCommentWrite))
    .optional(),
});
export const FlowOrganizationTagPostAuthorCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationTagPostAuthorCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationTagPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowOrganizationTagPostAuthorCommentWrite))
    .optional(),
});
export const FlowOrganizationTagPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationTagPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationTagPostCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationTagPostCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationTagPostCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationTagPostCommentCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowOrganizationTagPostCommentCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationTagPostCommentCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationTagPostCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z
    .lazy(() => FlowOrganizationTagPostCommentCommentAuthorWrite)
    .optional(),
});
export const FlowOrganizationTagPostCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationTagPostCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationTagPostCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowOrganizationTagPostCommentAuthorWrite).optional(),
  parent: z.lazy(() => FlowOrganizationTagPostCommentCommentWrite).optional(),
  replies: z
    .array(z.lazy(() => FlowOrganizationTagPostCommentCommentWrite))
    .optional(),
});
export const FlowOrganizationTagPostCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationTagPostCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationTagPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowOrganizationTagPostAuthorWrite).optional(),
  comments: z
    .array(z.lazy(() => FlowOrganizationTagPostCommentWrite))
    .optional(),
});
export const FlowOrganizationTagPostWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationTagPostCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      title: z.string().optional(),
      content: z.string().optional().optional(),
      published: z.boolean().optional(),
      views: z.number().int().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  posts: z.array(z.lazy(() => FlowOrganizationTagPostWrite)).optional(),
});
export const FlowOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z.array(z.lazy(() => FlowOrganizationAuthorWrite)).optional(),
  posts: z.array(z.lazy(() => FlowOrganizationPostWrite)).optional(),
  comments: z.array(z.lazy(() => FlowOrganizationCommentWrite)).optional(),
  tags: z.array(z.lazy(() => FlowOrganizationTagWrite)).optional(),
});
export const FlowOrganizationUpdateData = z.object({
  name: z.string().optional(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
  authors: z.array(z.lazy(() => FlowOrganizationAuthorWrite)).optional(),
  posts: z.array(z.lazy(() => FlowOrganizationPostWrite)).optional(),
  comments: z.array(z.lazy(() => FlowOrganizationCommentWrite)).optional(),
  tags: z.array(z.lazy(() => FlowOrganizationTagWrite)).optional(),
});
export const OrganizationCreateSchema = FlowOrganizationCreateData;
export type FlowOrganizationCreate = z.infer<typeof OrganizationCreateSchema>;
export const OrganizationUpdateSchema = FlowOrganizationUpdateData;
export type FlowOrganizationUpdate = z.infer<typeof OrganizationUpdateSchema>;
export type FlowOrganizationWrite =
  | FlowOrganizationCreate
  | FlowOrganizationUpdate;
