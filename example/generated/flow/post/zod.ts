// @generated by next-prisma-flow-state-engine
// file: zod.ts

import { z } from "zod";
import type { PostDeepSelect, PostShallowSelect } from "./selects";

// Reusable scalar field helpers for Post
// Note: Relations are added via named schemas to avoid cycles

export const FlowPostAuthorCommentComment = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional(),
});
export const FlowPostAuthorComment = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  parentId: z.string().optional(),
  replies: z.array(z.lazy(() => FlowPostAuthorCommentComment)),
});
export const FlowPostAuthor = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional(),
  bio: z.string().optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
  comments: z.array(z.lazy(() => FlowPostAuthorComment)),
});
export const FlowPostCommentAuthor = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional(),
  bio: z.string().optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
});
export const FlowPostCommentCommentAuthor = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional(),
  bio: z.string().optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
});
export const FlowPostCommentComment = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  author: z.lazy(() => FlowPostCommentCommentAuthor),
  parentId: z.string().optional(),
});
export const FlowPostComment = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  postId: z.string(),
  authorId: z.string(),
  author: z.lazy(() => FlowPostCommentAuthor),
  parentId: z.string().optional(),
  replies: z.array(z.lazy(() => FlowPostCommentComment)),
});
export const FlowPostTag = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.date(),
});
export const FlowPostSchema = z.object({
  id: z.string(),
  title: z.string(),
  content: z.string().optional(),
  published: z.boolean(),
  views: z.number().int(),
  createdAt: z.date(),
  updatedAt: z.date(),
  authorId: z.string(),
  author: z.lazy(() => FlowPostAuthor),
  comments: z.array(z.lazy(() => FlowPostComment)),
  tags: z.array(z.lazy(() => FlowPostTag)),
});
export type FlowPost = z.infer<typeof FlowPostSchema>;
export const PostDeepSchema = FlowPostSchema;

export const PostShallowSchema = z.object({
  id: z.string(),
  title: z.string(),
  content: z.string().optional(),
  published: z.boolean(),
  views: z.number().int(),
  createdAt: z.date(),
  updatedAt: z.date(),
  authorId: z.string(),
});
export type FlowPostShallow = z.infer<typeof PostShallowSchema>;
// Shallow Prisma payload type removed; prefer inferring from Zod schema

export const FlowPostAuthorCommentCommentOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowPostAuthorCommentCommentOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostAuthorCommentCommentOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostAuthorCommentCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowPostAuthorCommentCommentOrganizationTagWrite))
    .optional(),
});
export const FlowPostAuthorCommentCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostAuthorCommentCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostAuthorCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  organization: z
    .lazy(() => FlowPostAuthorCommentCommentOrganizationWrite)
    .optional(),
});
export const FlowPostAuthorCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostAuthorCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostAuthorCommentOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowPostAuthorCommentOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostAuthorCommentOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostAuthorCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowPostAuthorCommentOrganizationTagWrite))
    .optional(),
});
export const FlowPostAuthorCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostAuthorCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostAuthorCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z.lazy(() => FlowPostAuthorCommentCommentWrite).optional(),
  replies: z.array(z.lazy(() => FlowPostAuthorCommentCommentWrite)).optional(),
  organization: z.lazy(() => FlowPostAuthorCommentOrganizationWrite).optional(),
});
export const FlowPostAuthorCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostAuthorCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostAuthorOrganizationCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowPostAuthorOrganizationCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostAuthorOrganizationCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostAuthorOrganizationCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowPostAuthorOrganizationCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowPostAuthorOrganizationCommentCommentWrite))
    .optional(),
});
export const FlowPostAuthorOrganizationCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostAuthorOrganizationCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostAuthorOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowPostAuthorOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostAuthorOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostAuthorOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowPostAuthorOrganizationCommentWrite))
    .optional(),
  tags: z.array(z.lazy(() => FlowPostAuthorOrganizationTagWrite)).optional(),
});
export const FlowPostAuthorOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostAuthorOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  comments: z.array(z.lazy(() => FlowPostAuthorCommentWrite)).optional(),
  organization: z.lazy(() => FlowPostAuthorOrganizationWrite).optional(),
});
export const FlowPostAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentAuthorOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowPostCommentAuthorOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentAuthorOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentAuthorOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowPostCommentAuthorOrganizationTagWrite))
    .optional(),
});
export const FlowPostCommentAuthorOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentAuthorOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  organization: z.lazy(() => FlowPostCommentAuthorOrganizationWrite).optional(),
});
export const FlowPostCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentCommentAuthorOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowPostCommentCommentAuthorOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentCommentAuthorOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentCommentAuthorOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  tags: z
    .array(z.lazy(() => FlowPostCommentCommentAuthorOrganizationTagWrite))
    .optional(),
});
export const FlowPostCommentCommentAuthorOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentCommentAuthorOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  organization: z
    .lazy(() => FlowPostCommentCommentAuthorOrganizationWrite)
    .optional(),
});
export const FlowPostCommentCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentCommentOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowPostCommentCommentOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentCommentOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentCommentOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowPostCommentCommentOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentCommentOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z
    .array(z.lazy(() => FlowPostCommentCommentOrganizationAuthorWrite))
    .optional(),
  tags: z
    .array(z.lazy(() => FlowPostCommentCommentOrganizationTagWrite))
    .optional(),
});
export const FlowPostCommentCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowPostCommentCommentAuthorWrite).optional(),
  organization: z
    .lazy(() => FlowPostCommentCommentOrganizationWrite)
    .optional(),
});
export const FlowPostCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowPostCommentOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowPostCommentOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z
    .array(z.lazy(() => FlowPostCommentOrganizationAuthorWrite))
    .optional(),
  tags: z.array(z.lazy(() => FlowPostCommentOrganizationTagWrite)).optional(),
});
export const FlowPostCommentOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowPostCommentAuthorWrite).optional(),
  parent: z.lazy(() => FlowPostCommentCommentWrite).optional(),
  replies: z.array(z.lazy(() => FlowPostCommentCommentWrite)).optional(),
  organization: z.lazy(() => FlowPostCommentOrganizationWrite).optional(),
});
export const FlowPostCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostTagOrganizationAuthorCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowPostTagOrganizationAuthorCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostTagOrganizationAuthorCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostTagOrganizationAuthorCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowPostTagOrganizationAuthorCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowPostTagOrganizationAuthorCommentCommentWrite))
    .optional(),
});
export const FlowPostTagOrganizationAuthorCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostTagOrganizationAuthorCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostTagOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowPostTagOrganizationAuthorCommentWrite))
    .optional(),
});
export const FlowPostTagOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostTagOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostTagOrganizationCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowPostTagOrganizationCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostTagOrganizationCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostTagOrganizationCommentCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowPostTagOrganizationCommentCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostTagOrganizationCommentCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostTagOrganizationCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z
    .lazy(() => FlowPostTagOrganizationCommentCommentAuthorWrite)
    .optional(),
});
export const FlowPostTagOrganizationCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostTagOrganizationCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostTagOrganizationCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowPostTagOrganizationCommentAuthorWrite).optional(),
  parent: z.lazy(() => FlowPostTagOrganizationCommentCommentWrite).optional(),
  replies: z
    .array(z.lazy(() => FlowPostTagOrganizationCommentCommentWrite))
    .optional(),
});
export const FlowPostTagOrganizationCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostTagOrganizationCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostTagOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z.array(z.lazy(() => FlowPostTagOrganizationAuthorWrite)).optional(),
  comments: z
    .array(z.lazy(() => FlowPostTagOrganizationCommentWrite))
    .optional(),
});
export const FlowPostTagOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostTagOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  organization: z.lazy(() => FlowPostTagOrganizationWrite).optional(),
});
export const FlowPostTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostOrganizationAuthorCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
});
export const FlowPostOrganizationAuthorCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostOrganizationAuthorCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostOrganizationAuthorCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  parent: z
    .lazy(() => FlowPostOrganizationAuthorCommentCommentWrite)
    .optional(),
  replies: z
    .array(z.lazy(() => FlowPostOrganizationAuthorCommentCommentWrite))
    .optional(),
});
export const FlowPostOrganizationAuthorCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostOrganizationAuthorCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostOrganizationAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
  comments: z
    .array(z.lazy(() => FlowPostOrganizationAuthorCommentWrite))
    .optional(),
});
export const FlowPostOrganizationAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostOrganizationAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostOrganizationCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowPostOrganizationCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostOrganizationCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostOrganizationCommentCommentAuthorCreateData = z.object({
  email: z.string(),
  name: z.string().optional().optional(),
  bio: z.string().optional().optional(),
  createdAt: z.date().optional(),
});
export const FlowPostOrganizationCommentCommentAuthorWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      email: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostOrganizationCommentCommentAuthorCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      email: z.string().optional(),
      name: z.string().optional().optional(),
      bio: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostOrganizationCommentCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z
    .lazy(() => FlowPostOrganizationCommentCommentAuthorWrite)
    .optional(),
});
export const FlowPostOrganizationCommentCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostOrganizationCommentCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostOrganizationCommentCreateData = z.object({
  content: z.string(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowPostOrganizationCommentAuthorWrite).optional(),
  parent: z.lazy(() => FlowPostOrganizationCommentCommentWrite).optional(),
  replies: z
    .array(z.lazy(() => FlowPostOrganizationCommentCommentWrite))
    .optional(),
});
export const FlowPostOrganizationCommentWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostOrganizationCommentCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      content: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostOrganizationTagCreateData = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
});
export const FlowPostOrganizationTagWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
      name: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostOrganizationTagCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostOrganizationCreateData = z.object({
  name: z.string().optional().optional(),
  createdAt: z.date().optional(),
  authors: z.array(z.lazy(() => FlowPostOrganizationAuthorWrite)).optional(),
  comments: z.array(z.lazy(() => FlowPostOrganizationCommentWrite)).optional(),
  tags: z.array(z.lazy(() => FlowPostOrganizationTagWrite)).optional(),
});
export const FlowPostOrganizationWrite = z
  .discriminatedUnion("flowRelationStrategy", [
    z.object({
      flowRelationStrategy: z.literal("connect"),
      id: z.string().optional(),
    }),
    z.object({
      flowRelationStrategy: z.literal("create"),
      ...FlowPostOrganizationCreateData.shape,
    }),
    z.object({
      flowRelationStrategy: z.literal("connectOrCreate"),
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  ])
  .or(
    z.object({
      id: z.string().optional(),
      name: z.string().optional().optional(),
      createdAt: z.date().optional(),
    }),
  );
export const FlowPostCreateData = z.object({
  title: z.string(),
  content: z.string().optional().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  author: z.lazy(() => FlowPostAuthorWrite).optional(),
  comments: z.array(z.lazy(() => FlowPostCommentWrite)).optional(),
  tags: z.array(z.lazy(() => FlowPostTagWrite)).optional(),
  organization: z.lazy(() => FlowPostOrganizationWrite).optional(),
});
export const FlowPostUpdateData = z.object({
  title: z.string().optional(),
  content: z.string().optional(),
  published: z.boolean().optional(),
  views: z.number().int().optional(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
  author: z.lazy(() => FlowPostAuthorWrite).optional(),
  comments: z.array(z.lazy(() => FlowPostCommentWrite)).optional(),
  tags: z.array(z.lazy(() => FlowPostTagWrite)).optional(),
  organization: z.lazy(() => FlowPostOrganizationWrite).optional(),
});
export const PostCreateSchema = FlowPostCreateData;
export type FlowPostCreate = z.infer<typeof PostCreateSchema>;
export const PostUpdateSchema = FlowPostUpdateData;
export type FlowPostUpdate = z.infer<typeof PostUpdateSchema>;
export type FlowPostWrite = FlowPostCreate | FlowPostUpdate;
