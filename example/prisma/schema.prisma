// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator flow {
  provider = "node /Users/leo/workspace/schobele/next-prisma-flow-next/next-prisma-flow/dist/index.js"
  output   = "../generated/flow"
  prismaImport = "../../lib/prisma"
  models = "all"
  
  // Select configuration - explicitly include relations
  postSelect = ["id","title","content","published","views","createdAt","updatedAt","authorId","author","comments","tags"]
  authorSelect = ["id","email","name","bio","createdAt","updatedAt","posts","comments"]
  commentSelect = ["id","content","createdAt","updatedAt","postId","authorId","author","parentId","replies"]
  tagSelect = ["id","name","createdAt"]

  // Tenant field
  tenantField = "organizationId"
  
  // Custom configuration for relations
  postCommentsLimit = 100
  postCommentsOrder = "{ createdAt: 'desc' }"
  authorPostsLimit = 50
  authorPostsOrder = "{ createdAt: 'desc' }"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Organization {
  id        String   @id @default(cuid())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authors Author[]
  posts   Post[]
  comments Comment[]
  tags    Tag[]
}

model Author {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  posts     Post[]
  comments  Comment[]

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  views     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  authorId  String
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  comments  Comment[]
  tags      Tag[]

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  authorId  String
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  
  posts     Post[]

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}