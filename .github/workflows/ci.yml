name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build generator
        run: bun run build

      - name: Verify build output
        run: |
          test -f dist/index.js
          echo "‚úÖ Build output verified"

      - name: Test generator with TodoList example
        run: |
          cd examples/todolist
          bun install --frozen-lockfile
          echo "üîÑ Running Prisma generate..."
          bunx prisma generate
          echo "‚úÖ Generator completed successfully"

      - name: Verify generated code structure
        run: |
          cd examples/todolist
          echo "üîç Checking generated file structure..."
          
          # Core files
          test -f generated/flow/index.ts && echo "‚úÖ index.ts"
          test -f generated/flow/store.ts && echo "‚úÖ store.ts"
          test -f generated/flow/actions.ts && echo "‚úÖ actions.ts"
          test -f generated/flow/atoms.ts && echo "‚úÖ atoms.ts"
          test -f generated/flow/hooks.ts && echo "‚úÖ hooks.ts"
          test -f generated/flow/types.ts && echo "‚úÖ types.ts"
          
          # Todo model files
          test -f generated/flow/todo/actions.ts && echo "‚úÖ todo/actions.ts"
          test -f generated/flow/todo/types.ts && echo "‚úÖ todo/types.ts"
          test -f generated/flow/todo/hooks.ts && echo "‚úÖ todo/hooks.ts"
          test -f generated/flow/todo/routes.ts && echo "‚úÖ todo/routes.ts"
          test -f generated/flow/todo/atoms.ts && echo "‚úÖ todo/atoms.ts"
          
          # Category model files
          test -f generated/flow/category/actions.ts && echo "‚úÖ category/actions.ts"
          test -f generated/flow/category/types.ts && echo "‚úÖ category/types.ts"
          test -f generated/flow/category/hooks.ts && echo "‚úÖ category/hooks.ts"
          test -f generated/flow/category/routes.ts && echo "‚úÖ category/routes.ts"
          test -f generated/flow/category/atoms.ts && echo "‚úÖ category/atoms.ts"
          
          # User model files
          test -f generated/flow/user/actions.ts && echo "‚úÖ user/actions.ts"
          test -f generated/flow/user/types.ts && echo "‚úÖ user/types.ts"
          test -f generated/flow/user/hooks.ts && echo "‚úÖ user/hooks.ts"
          test -f generated/flow/user/routes.ts && echo "‚úÖ user/routes.ts"
          test -f generated/flow/user/atoms.ts && echo "‚úÖ user/atoms.ts"
          
          echo "‚úÖ All expected files generated successfully"

      - name: Verify code quality
        run: |
          cd examples/todolist
          echo "üîç Checking for critical functions..."
          
          # Check for server actions
          grep -q "export async function getAllTodos" generated/flow/todo/actions.ts && echo "‚úÖ getAllTodos function"
          grep -q "export async function createTodo" generated/flow/todo/actions.ts && echo "‚úÖ createTodo function"
          grep -q "export async function updateTodo" generated/flow/todo/actions.ts && echo "‚úÖ updateTodo function"
          grep -q "export async function deleteTodo" generated/flow/todo/actions.ts && echo "‚úÖ deleteTodo function"
          grep -q "export async function createManyTodos" generated/flow/todo/actions.ts && echo "‚úÖ createManyTodos function"
          
          # Check for proper types
          grep -q "TodoCreateInput" generated/flow/todo/types.ts && echo "‚úÖ TodoCreateInput type"
          grep -q "TodoUpdateInput" generated/flow/todo/types.ts && echo "‚úÖ TodoUpdateInput type"
          grep -q "TodoCreateManyInput" generated/flow/todo/types.ts && echo "‚úÖ TodoCreateManyInput type"
          
          # Check for Zod schemas
          grep -q "TodoCreateInputSchema" generated/flow/todo/types.ts && echo "‚úÖ TodoCreateInputSchema"
          grep -q "TodoUpdateInputSchema" generated/flow/todo/types.ts && echo "‚úÖ TodoUpdateInputSchema"
          grep -q "TodoCreateManyInputSchema" generated/flow/todo/types.ts && echo "‚úÖ TodoCreateManyInputSchema"
          
          # Check for circular reference prevention
          grep -q "category: { select:" generated/flow/todo/actions.ts && echo "‚úÖ Nested category select"
          grep -q "user: { select:" generated/flow/todo/actions.ts && echo "‚úÖ Nested user select"
          
          echo "‚úÖ Code quality checks passed"

      - name: Check TypeScript compilation
        run: |
          cd examples/todolist
          echo "üîç Checking TypeScript compilation..."
          bunx tsc --noEmit --skipLibCheck
          echo "‚úÖ TypeScript compilation successful"

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Biome linting
        run: |
          # Check if biome.json exists and run linting
          if [ -f "biome.json" ]; then
            echo "üîç Running Biome linting..."
            bunx @biomejs/biome check src/
            echo "‚úÖ Linting passed"
          else
            echo "‚ÑπÔ∏è No biome.json found, skipping linting"
          fi

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run security audit
        run: |
          # Check for security vulnerabilities
          npm audit --audit-level=moderate
          echo "‚úÖ Security audit completed"

      - name: Check for secrets
        run: |
          echo "üîç Checking for potential secrets..."
          
          # Check for common secret patterns (basic check)
          if grep -r -E "(api_key|secret_key|private_key|password.*=|token.*=)" --include="*.ts" --include="*.js" --include="*.json" src/ 2>/dev/null; then
            echo "‚ö†Ô∏è Potential secrets found in source code"
            exit 1
          else
            echo "‚úÖ No obvious secrets found"
          fi

  validate-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build and validate package
        run: |
          echo "üîç Validating package.json..."
          
          # Check required fields
          node -e "
            const pkg = require('./package.json');
            const required = ['name', 'version', 'description', 'main', 'bin'];
            const missing = required.filter(field => !pkg[field]);
            if (missing.length > 0) {
              console.error('‚ùå Missing required fields:', missing);
              process.exit(1);
            }
            console.log('‚úÖ All required fields present');
            
            // Validate bin path
            if (!require('fs').existsSync(pkg.main)) {
              console.error('‚ùå Main file does not exist:', pkg.main);
              process.exit(1);
            }
            console.log('‚úÖ Main file exists');
          "

      - name: Test package installation
        run: |
          echo "üîç Testing package can be installed..."
          
          # Create a temporary directory and test installation
          mkdir -p /tmp/test-install
          cd /tmp/test-install
          npm init -y
          
          # Install locally built package
          npm install file:$GITHUB_WORKSPACE
          
          # Check if binary is available
          if [ -f node_modules/.bin/next-prisma-flow ]; then
            echo "‚úÖ Package binary installed successfully"
          else
            echo "‚ùå Package binary not found"
            exit 1
          fi