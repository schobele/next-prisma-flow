name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build generator
        run: bun run build

      - name: Verify build output
        run: |
          test -f dist/index.js
          echo "‚úÖ Build output verified"

      - name: Test generator with Blog example
        run: |
          cd examples/blog
          bun install
          echo "üîÑ Running Prisma generate..."
          bunx prisma generate
          echo "‚úÖ Generator completed successfully"

      - name: Verify generated code structure
        run: |
          cd examples/blog
          echo "üîç Checking generated file structure..."
          
          # Core files
          test -f flow/index.ts && echo "‚úÖ index.ts"
          test -f flow/prisma.ts && echo "‚úÖ prisma.ts"
          
          # Post model files
          test -f flow/post/actions.ts && echo "‚úÖ post/actions.ts"
          test -f flow/post/types.ts && echo "‚úÖ post/types.ts"
          test -f flow/post/hooks.ts && echo "‚úÖ post/hooks.ts"
          test -f flow/post/atoms.ts && echo "‚úÖ post/atoms.ts"
          test -f flow/post/derived.ts && echo "‚úÖ post/derived.ts"
          test -f flow/post/fx.ts && echo "‚úÖ post/fx.ts"
          test -f flow/post/schemas.ts && echo "‚úÖ post/schemas.ts"
          test -f flow/post/index.ts && echo "‚úÖ post/index.ts"
          
          # Author model files
          test -f flow/author/actions.ts && echo "‚úÖ author/actions.ts"
          test -f flow/author/types.ts && echo "‚úÖ author/types.ts"
          test -f flow/author/hooks.ts && echo "‚úÖ author/hooks.ts"
          test -f flow/author/atoms.ts && echo "‚úÖ author/atoms.ts"
          
          # Category model files
          test -f flow/category/actions.ts && echo "‚úÖ category/actions.ts"
          test -f flow/category/types.ts && echo "‚úÖ category/types.ts"
          test -f flow/category/hooks.ts && echo "‚úÖ category/hooks.ts"
          test -f flow/category/atoms.ts && echo "‚úÖ category/atoms.ts"
          
          # Comment model files
          test -f flow/comment/actions.ts && echo "‚úÖ comment/actions.ts"
          test -f flow/comment/types.ts && echo "‚úÖ comment/types.ts"
          test -f flow/comment/hooks.ts && echo "‚úÖ comment/hooks.ts"
          test -f flow/comment/atoms.ts && echo "‚úÖ comment/atoms.ts"
          
          echo "‚úÖ All expected files generated successfully"

      - name: Verify code quality
        run: |
          cd examples/blog
          echo "üîç Checking for critical functions..."
          
          # Check for server actions
          grep -q "export async function getAll" flow/post/actions.ts && echo "‚úÖ findMany function"
          grep -q "export async function create" flow/post/actions.ts && echo "‚úÖ create function"
          grep -q "export async function update" flow/post/actions.ts && echo "‚úÖ update function"
          grep -q "export async function delete" flow/post/actions.ts && echo "‚úÖ delete function"
          
          # Check for proper types
          grep -q "CreateInput" flow/post/types.ts && echo "‚úÖ CreateInput type"
          grep -q "UpdateInput" flow/post/types.ts && echo "‚úÖ UpdateInput type"
          grep -q "ModelType" flow/post/types.ts && echo "‚úÖ ModelType type"
          
          # Check for atoms
          grep -q "entitiesAtom" flow/post/atoms.ts && echo "‚úÖ entitiesAtom"
          grep -q "pendingPatchesAtom" flow/post/atoms.ts && echo "‚úÖ pendingPatchesAtom"
          
          # Check for hooks
          grep -q "usePosts" flow/post/hooks.ts && echo "‚úÖ usePosts hook"
          grep -q "usePost" flow/post/hooks.ts && echo "‚úÖ usePost hook"
          grep -q "usePostForm" flow/post/hooks.ts && echo "‚úÖ usePostForm hook"
          
          echo "‚úÖ Code quality checks passed"

      - name: Check TypeScript compilation
        run: |
          cd examples/blog
          echo "üîç Checking TypeScript compilation..."
          bunx tsc --noEmit --skipLibCheck
          echo "‚úÖ TypeScript compilation successful"
          
      - name: Run baseline tests
        run: |
          echo "üß™ Running baseline comparison tests..."
          bun test
          echo "‚úÖ Baseline tests passed"

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Biome linting
        run: |
          # Check if biome.json exists and run linting
          if [ -f "biome.json" ]; then
            echo "üîç Running Biome linting..."
            bunx @biomejs/biome check src/
            echo "‚úÖ Linting passed"
          else
            echo "‚ÑπÔ∏è No biome.json found, skipping linting"
          fi

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit with Bun
        run: |
          # Check for security vulnerabilities using Bun
          echo "üîç Running security audit with Bun..."
          bun audit || echo "‚ö†Ô∏è Audit completed with warnings"
          echo "‚úÖ Security audit completed"

      - name: Check for secrets
        run: |
          echo "üîç Checking for potential secrets..."
          
          # Check for common secret patterns (basic check)
          if grep -r -E "(api_key|secret_key|private_key|password.*=|token.*=)" --include="*.ts" --include="*.js" --include="*.json" src/ 2>/dev/null; then
            echo "‚ö†Ô∏è Potential secrets found in source code"
            exit 1
          else
            echo "‚úÖ No obvious secrets found"
          fi

  validate-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build project
        run: bun run build

      - name: Validate package
        run: |
          echo "üîç Validating package.json..."
          
          # Check required fields and main file existence
          node -e "
            import('fs').then(fs => {
              const pkg = JSON.parse(fs.default.readFileSync('./package.json', 'utf8'));
              const required = ['name', 'version', 'description', 'main', 'bin'];
              const missing = required.filter(field => !pkg[field]);
              if (missing.length > 0) {
                console.error('‚ùå Missing required fields:', missing);
                process.exit(1);
              }
              console.log('‚úÖ All required fields present');
              
              if (!fs.default.existsSync(pkg.main)) {
                console.error('‚ùå Main file does not exist:', pkg.main);
                process.exit(1);
              }
              console.log('‚úÖ Main file exists');
            }).catch(err => {
              console.error('‚ùå Validation failed:', err);
              process.exit(1);
            });
          "

      - name: Test package installation
        run: |
          echo "üîç Testing package can be installed..."
          
          # Create a temporary directory and test installation
          mkdir -p /tmp/test-install
          cd /tmp/test-install
          npm init -y
          
          # Install locally built package
          npm install file:$GITHUB_WORKSPACE
          
          # Check if binary is available
          if [ -f node_modules/.bin/next-prisma-flow ]; then
            echo "‚úÖ Package binary installed successfully"
          else
            echo "‚ùå Package binary not found"
            exit 1
          fi