name: Publish to NPM

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0, v1.2.3
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Required for creating releases
  id-token: write  # Required for npm publishing

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build generator
        run: bun run build

      - name: Test generator with example
        run: |
          cd examples/blog
          bun install
          # Test that generator runs without errors
          bunx prisma generate

      - name: Verify generated code structure
        run: |
          cd examples/blog
          # Check that expected files are generated
          test -f flow/index.ts
          test -f flow/prisma.ts
          test -f flow/post/actions.ts
          test -f flow/post/types.ts
          test -f flow/post/hooks.ts
          test -f flow/post/atoms.ts
          test -f flow/author/actions.ts
          test -f flow/category/actions.ts
          test -f flow/comment/actions.ts

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build generator
        run: bun run build

      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version to publish: $VERSION"

      - name: Update package.json version
        run: |
          bun run --bun -e "
            const pkg = require('./package.json');
            pkg.version = '${{ steps.extract_version.outputs.version }}';
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

      - name: Verify package.json
        run: |
          echo "Updated package.json:"
          cat package.json | grep -A 5 -B 5 version

      - name: Create .npmrc
        run: |
          echo "@next-prisma-flow:registry=https://registry.npmjs.org" > .npmrc
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ steps.extract_version.outputs.version }}" \
            --notes "## What's Changed

          Release ${{ steps.extract_version.outputs.version }} of Next Prisma Flow Generator

          ### Features
          - ðŸš€ Full-stack type-safe code generation from Prisma schema
          - âš¡ Server actions, Jotai atoms, React hooks, and API routes
          - ðŸ”’ End-to-end type safety with Zod validation
          - ðŸŽ¯ Smart relationship handling with circular reference prevention
          - ðŸ“¦ Optimized batch operations with proper schemas

          ### Installation
          \`\`\`bash
          npm install next-prisma-flow
          # or
          yarn add next-prisma-flow
          # or
          pnpm add next-prisma-flow
          \`\`\`

          ### Usage
          Add to your \`schema.prisma\`:
          \`\`\`prisma
          generator flow {
            provider = \"next-prisma-flow\"
            output   = \"./generated/flow\"
            models   = [\"User\", \"Post\", \"Category\"]
          }
          \`\`\`

          Then run:
          \`\`\`bash
          npx prisma generate
          \`\`\`

          See the [README](https://github.com/schobele/next-prisma-flow#readme) for full documentation."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-preview:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build generator
        run: bun run build

      - name: Create preview version
        id: preview_version
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          COMMIT_SHA=${GITHUB_SHA:0:7}
          PREVIEW_VERSION="$(jq -r .version package.json)-preview.${TIMESTAMP}.${COMMIT_SHA}"
          echo "version=$PREVIEW_VERSION" >> $GITHUB_OUTPUT
          echo "Preview version: $PREVIEW_VERSION"

      - name: Update package.json version
        run: |
          bun run --bun -e "
            const pkg = require('./package.json');
            pkg.version = '${{ steps.preview_version.outputs.version }}';
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

      - name: Create .npmrc
        run: |
          echo "@next-prisma-flow:registry=https://registry.npmjs.org" > .npmrc
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish preview to NPM
        run: npm publish --tag preview --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Comment on commit
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;
            
            await github.rest.repos.createCommitComment({
              owner,
              repo,
              commit_sha: sha,
              body: `ðŸš€ Preview version published: \`${{ steps.preview_version.outputs.version }}\`
              
              Install with:
              \`\`\`bash
              npm install next-prisma-flow@preview
              \`\`\`
              
              This preview version will be available for testing.`
            });