// This file is auto-generated by Next Prisma Flow Generator.
// Do not edit this file manually as it will be overwritten.
// Generated at: 2025-06-01T21:17:55.354Z

// Central store setup for all Flow atoms
// This file provides utilities for global state management

import { createStore } from 'jotai';
import {
  baseUsersAtom,
  usersLoadingAtom,
  usersErrorAtom,
  baseCategoriesAtom,
  categoriesLoadingAtom,
  categoriesErrorAtom,
  baseTodosAtom,
  todosLoadingAtom,
  todosErrorAtom,
} from './atoms';

// Create a store instance for SSR/testing if needed
export const flowStore = createStore();

// Export all base atoms for external access
export const flowAtoms = {
  baseUsersAtom,
  usersLoadingAtom,
  usersErrorAtom,
  baseCategoriesAtom,
  categoriesLoadingAtom,
  categoriesErrorAtom,
  baseTodosAtom,
  todosLoadingAtom,
  todosErrorAtom,
};

// Utility function to clear all data (useful for logout, testing, etc.)
export function clearAllFlowData() {
  flowStore.set(baseUsersAtom, {});
  flowStore.set(usersLoadingAtom, false);
  flowStore.set(usersErrorAtom, null);
  flowStore.set(baseCategoriesAtom, {});
  flowStore.set(categoriesLoadingAtom, false);
  flowStore.set(categoriesErrorAtom, null);
  flowStore.set(baseTodosAtom, {});
  flowStore.set(todosLoadingAtom, false);
  flowStore.set(todosErrorAtom, null);
}

// Utility function to check if any data is loading
export function isAnyFlowDataLoading(): boolean {
  return [
    flowStore.get(usersLoadingAtom),
    flowStore.get(categoriesLoadingAtom),
    flowStore.get(todosLoadingAtom),
  ].some(Boolean);
}

// Utility function to get all errors
export function getAllFlowErrors(): Record<string, string | null> {
  return {
    user: flowStore.get(usersErrorAtom),
    category: flowStore.get(categoriesErrorAtom),
    todo: flowStore.get(todosErrorAtom),
  };
}

// Type for the complete state shape
export interface FlowState {
  users: ReturnType<typeof baseUsersAtom['read']>;
  usersLoading: boolean;
  usersError: string | null;
  categories: ReturnType<typeof baseCategoriesAtom['read']>;
  categoriesLoading: boolean;
  categoriesError: string | null;
  todos: ReturnType<typeof baseTodosAtom['read']>;
  todosLoading: boolean;
  todosError: string | null;
}

// Utility to get complete state snapshot
export function getFlowSnapshot(): FlowState {
  return {
    users: flowStore.get(baseUsersAtom),
    usersLoading: flowStore.get(usersLoadingAtom),
    usersError: flowStore.get(usersErrorAtom),
    categories: flowStore.get(baseCategoriesAtom),
    categoriesLoading: flowStore.get(categoriesLoadingAtom),
    categoriesError: flowStore.get(categoriesErrorAtom),
    todos: flowStore.get(baseTodosAtom),
    todosLoading: flowStore.get(todosLoadingAtom),
    todosError: flowStore.get(todosErrorAtom),
  };
}
