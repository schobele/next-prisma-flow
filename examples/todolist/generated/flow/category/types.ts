// This file is auto-generated by Next Prisma Flow Generator.
// Do not edit this file manually as it will be overwritten.
// Generated at: 2025-06-01T21:12:21.074Z

import type { Prisma } from '@prisma/client';
import { z } from 'zod';

// Re-export Zod schemas from zod-prisma-types
export {
  CategorySchema as categorySchema,
  CategoryCreateInputSchema,
  CategoryUpdateInputSchema,
  CategoryCreateManyInputSchema,
} from '../../zod';

// Import schemas for type inference
import {
  CategoryCreateInputSchema,
  CategoryUpdateInputSchema,
  CategoryCreateManyInputSchema,
} from '../../zod';

// Infer types from Zod schemas
export type CategoryCreateInput = z.infer<typeof CategoryCreateInputSchema>;
export type CategoryUpdateInput = z.infer<typeof CategoryUpdateInputSchema>;
export type CategoryCreateManyInput = z.infer<typeof CategoryCreateManyInputSchema>;

// Define the select object for this model
export const categorySelect = { id: true, name: true, color: true, createdAt: true, todos: { select: { id: true, title: true, description: true, status: true, priority: true, dueDate: true, completedAt: true, createdAt: true, updatedAt: true, userId: true, categoryId: true, user: true } } } satisfies Prisma.CategorySelect;

// Generate the exact type based on our select
export type Category = Prisma.CategoryGetPayload<{
  select: typeof categorySelect;
}>;

// Utility types for working with this model
export type CategoryId = Category['id'];

export type CategoryInput = CategoryCreateInput;
export type CategoryWhereInput = Prisma.CategoryWhereInput;
export type CategoryWhereUniqueInput = Prisma.CategoryWhereUniqueInput;
export type CategoryOrderByInput = Prisma.CategoryOrderByWithRelationInput;

// For array operations
export type CategoryArray = Category[];
export type CategoryCreateInputArray = CategoryInput[];
export type CategoryCreateManyInputArray = CategoryCreateManyInput[];

// For partial updates (useful for forms)
export type PartialCategoryInput = Partial<CategoryInput>;

// For search and filtering
export interface CategorySearchParams {
  query?: string;
  page?: number;
  limit?: number;
  orderBy?: keyof Category;
  orderDirection?: 'asc' | 'desc';
}

export interface CategoryFilterParams extends CategorySearchParams {
  where?: CategoryWhereInput;
}

// Response types for API operations
export interface CategoryApiResponse {
  data: Category;
  success: boolean;
  message?: string;
}

export interface CategoryListApiResponse {
  data: Category[];
  success: boolean;
  message?: string;
  pagination?: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

export interface CategoryMutationResponse {
  data?: Category;
  success: boolean;
  message?: string;
  errors?: Record<string, string[]>;
}

export interface CategoryBatchResponse {
  count: number;
  success: boolean;
  message?: string;
}

// State management types for Jotai atoms
export interface CategoryState {
  items: Record<string, Category>;
  loading: boolean;
  creating: boolean;
  updating: Record<string, boolean>;
  deleting: Record<string, boolean>;
  error: string | null;
}

export interface CategoryOptimisticUpdate {
  id: string;
  data: Partial<Category>;
  timestamp: number;
}

// Form types (useful for React Hook Form integration)
export type CategoryFormData = Omit<CategoryInput, 'id' | 'createdAt' | 'updatedAt'>;
export type CategoryUpdateFormData = Partial<CategoryFormData>;

// Event types for custom hooks
export interface CategoryChangeEvent {
  type: 'create' | 'update' | 'delete';
  category: Category;
  previousValue?: Category;
}

// Validation error types
export interface CategoryValidationError {
  field: keyof CategoryInput;
  message: string;
  code: string;
}

export interface CategoryValidationErrors {
  errors: CategoryValidationError[];
  message: string;
}
