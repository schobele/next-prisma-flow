// This file is auto-generated by Next Prisma Flow Generator.
// Do not edit this file manually as it will be overwritten.
// Generated at: 2025-06-05T08:52:12.054Z

'use server';

import { prisma } from '../../../lib/db';
import { revalidateTag } from 'next/cache';
import { 
  categorySchema, 
  type Category, 
  type CategoryCreateInput, 
  type CategoryUpdateInput,
  type CategoryCreateManyInput,
  CategoryCreateInputSchema,
  CategoryUpdateInputSchema,
  CategoryCreateManyInputSchema
} from './types';

const categorySelect = { id: true, name: true, color: true, createdAt: true, todos: { select: { id: true, title: true, description: true, status: true, priority: true, dueDate: true, completedAt: true, createdAt: true, updatedAt: true, userId: true, categoryId: true, user: true } } };

export async function getAllCategories(): Promise<Category[]> {
  const categories = await prisma.category.findMany({ 
    select: categorySelect 
  });
  return categories as Category[];
}

export async function getCategory(id: string): Promise<Category | null> {
  const category = await prisma.category.findUnique({ 
    where: { id }, 
    select: categorySelect 
  });
  return category as Category | null;
}

export async function createCategory(input: CategoryCreateInput): Promise<Category> {
  const data = CategoryCreateInputSchema.parse(input);
  const newCategory = await prisma.category.create({ 
    data, 
    select: categorySelect 
  });
  
  // Invalidate cache tags
  revalidateTag('Category');
  
  return newCategory as Category;
}

export async function updateCategory(
  id: string, 
  input: CategoryUpdateInput
): Promise<Category> {
  const data = CategoryUpdateInputSchema.parse(input);
  const updatedCategory = await prisma.category.update({
    where: { id },
    data,
    select: categorySelect,
  });
  
  // Invalidate cache tags
  revalidateTag('Category');
  revalidateTag(`Category:${id}`);
  
  return updatedCategory as Category;
}

export async function deleteCategory(id: string): Promise<void> {
  await prisma.category.delete({ where: { id } });
  
  // Invalidate cache tags
  revalidateTag('Category');
  revalidateTag(`Category:${id}`);
}

// Batch operations
export async function createManyCategories(
  inputs: CategoryCreateManyInput[]
): Promise<{ count: number }> {
  const data = inputs.map(input => CategoryCreateManyInputSchema.parse(input));
  const result = await prisma.category.createMany({ data });
  
  // Invalidate cache tags
  revalidateTag('Category');
  
  return result;
}

export async function deleteManyCategories(ids: string[]): Promise<{ count: number }> {
  const result = await prisma.category.deleteMany({
    where: { id: { in: ids } }
  });
  
  // Invalidate cache tags
  revalidateTag('Category');
  ids.forEach(id => revalidateTag(`Category:${id}`));
  
  return result;
}
