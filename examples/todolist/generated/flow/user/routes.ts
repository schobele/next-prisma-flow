// This file is auto-generated by Next Prisma Flow Generator.
// Do not edit this file manually as it will be overwritten.
// Generated at: 2025-06-06T18:13:19.629Z

import { type NextRequest, NextResponse } from "next/server";
import * as UserActions from "./actions";

async function GET(request: NextRequest) {
	try {
		const { searchParams } = new URL(request.url);
		const id = searchParams.get("id");

		if (id) {
			const result = await UserActions.getUser(id);
			if (!result) {
				return NextResponse.json({ error: "User not found" }, { status: 404 });
			}
			return NextResponse.json(result);
		} else {
			const results = await UserActions.getAllUsers();
			return NextResponse.json(results);
		}
	} catch (error) {
		console.error("GET /user error:", error);
		return NextResponse.json({ error: "Internal server error" }, { status: 500 });
	}
}

async function POST(request: NextRequest) {
	try {
		const data = await request.json();
		const result = await UserActions.createUser(data);
		return NextResponse.json(result, { status: 201 });
	} catch (error) {
		console.error("POST /user error:", error);
		const status = (error as any)?.code === "P2002" ? 409 : 400;
		return NextResponse.json({ error: error instanceof Error ? error.message : "Invalid request" }, { status });
	}
}

async function PATCH(request: NextRequest) {
	try {
		const data = await request.json();
		const { id, ...updateData } = data;

		if (!id) {
			return NextResponse.json({ error: "Missing id in request body" }, { status: 400 });
		}

		const result = await UserActions.updateUser(id, updateData);
		return NextResponse.json(result);
	} catch (error) {
		console.error("PATCH /user error:", error);
		let status = 400;
		if ((error as any)?.code === "P2025") status = 404;
		if ((error as any)?.code === "P2002") status = 409;

		return NextResponse.json({ error: error instanceof Error ? error.message : "Update failed" }, { status });
	}
}

async function DELETE(request: NextRequest) {
	try {
		const { searchParams } = new URL(request.url);
		const id = searchParams.get("id");

		if (!id) {
			return NextResponse.json({ error: "Missing id parameter" }, { status: 400 });
		}

		await UserActions.deleteUser(id);
		return NextResponse.json({ success: true });
	} catch (error) {
		console.error("DELETE /user error:", error);
		const status = (error as any)?.code === "P2025" ? 404 : 500;
		return NextResponse.json({ error: error instanceof Error ? error.message : "Delete failed" }, { status });
	}
}

export const routesHandlers = {
	GET,
	POST,
	PATCH,
	DELETE,
};
