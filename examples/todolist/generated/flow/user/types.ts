// This file is auto-generated by Next Prisma Flow Generator.
// Do not edit this file manually as it will be overwritten.
// Generated at: 2025-06-01T19:44:19.115Z

import type { Prisma } from '@prisma/client';
import { z } from 'zod';

// Re-export Zod schemas from zod-prisma-types
export {
  UserSchema as userSchema,
  UserCreateInputSchema,
  UserUpdateInputSchema,
  UserCreateManyInputSchema,
} from '../../zod';

// Import schemas for type inference
import {
  UserCreateInputSchema,
  UserUpdateInputSchema,
  UserCreateManyInputSchema,
} from '../../zod';

// Infer types from Zod schemas
export type UserCreateInput = z.infer<typeof UserCreateInputSchema>;
export type UserUpdateInput = z.infer<typeof UserUpdateInputSchema>;
export type UserCreateManyInput = z.infer<typeof UserCreateManyInputSchema>;

// Define the select object for this model
export const userSelect = { id: true, email: true, name: true, createdAt: true, updatedAt: true } satisfies Prisma.UserSelect;

// Generate the exact type based on our select
export type User = Prisma.UserGetPayload<{
  select: typeof userSelect;
}>;

// Utility types for working with this model
export type UserId = User['id'];

export type UserInput = UserCreateInput;
export type UserUpdateInput = UserUpdateInput;
export type UserWhereInput = Prisma.UserWhereInput;
export type UserWhereUniqueInput = Prisma.UserWhereUniqueInput;
export type UserOrderByInput = Prisma.UserOrderByWithRelationInput;

// For array operations
export type UserArray = User[];
export type UserCreateInputArray = UserInput[];
export type UserCreateManyInputArray = UserCreateManyInput[];

// For partial updates (useful for forms)
export type PartialUserInput = Partial<UserInput>;

// For search and filtering
export interface UserSearchParams {
  query?: string;
  page?: number;
  limit?: number;
  orderBy?: keyof User;
  orderDirection?: 'asc' | 'desc';
}

export interface UserFilterParams extends UserSearchParams {
  where?: UserWhereInput;
}

// Response types for API operations
export interface UserApiResponse {
  data: User;
  success: boolean;
  message?: string;
}

export interface UserListApiResponse {
  data: User[];
  success: boolean;
  message?: string;
  pagination?: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

export interface UserMutationResponse {
  data?: User;
  success: boolean;
  message?: string;
  errors?: Record<string, string[]>;
}

export interface UserBatchResponse {
  count: number;
  success: boolean;
  message?: string;
}

// State management types for Jotai atoms
export interface UserState {
  items: Record<string, User>;
  loading: boolean;
  creating: boolean;
  updating: Record<string, boolean>;
  deleting: Record<string, boolean>;
  error: string | null;
}

export interface UserOptimisticUpdate {
  id: string;
  data: Partial<User>;
  timestamp: number;
}

// Form types (useful for React Hook Form integration)
export type UserFormData = Omit<UserInput, 'id' | 'createdAt' | 'updatedAt'>;
export type UserUpdateFormData = Partial<UserFormData>;

// Event types for custom hooks
export interface UserChangeEvent {
  type: 'create' | 'update' | 'delete';
  user: User;
  previousValue?: User;
}

// Validation error types
export interface UserValidationError {
  field: keyof UserInput;
  message: string;
  code: string;
}

export interface UserValidationErrors {
  errors: UserValidationError[];
  message: string;
}
