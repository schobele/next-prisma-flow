// This file is auto-generated by Next Prisma Flow Generator.
// Do not edit this file manually as it will be overwritten.
// Generated at: 2025-06-07T12:32:18.075Z

'use server';

import { prisma } from '../../../lib/db';
import { revalidateTag } from 'next/cache';
import { 
  userSchema, 
  type User, 
  type UserCreateInput, 
  type UserUpdateInput,
  type UserCreateManyInput,
  UserCreateInputSchema,
  UserUpdateInputSchema,
  UserCreateManyInputSchema
} from './types';

const userSelect = { id: true, email: true, name: true, createdAt: true, updatedAt: true };

export async function getAllUsers(): Promise<User[]> {
  const users = await prisma.user.findMany({ 
    select: userSelect 
  });
  return users as User[];
}

export async function getUser(id: string): Promise<User | null> {
  const user = await prisma.user.findUnique({ 
    where: { id }, 
    select: userSelect 
  });
  return user as User | null;
}

export async function createUser(input: UserCreateInput): Promise<User> {
  const data = UserCreateInputSchema.parse(input);
  const newUser = await prisma.user.create({ 
    data, 
    select: userSelect 
  });
  
  // Invalidate cache tags
  revalidateTag('User');
  
  return newUser as User;
}

export async function updateUser(
  id: string, 
  input: UserUpdateInput
): Promise<User> {
  const data = UserUpdateInputSchema.parse(input);
  const updatedUser = await prisma.user.update({
    where: { id },
    data,
    select: userSelect,
  });
  
  // Invalidate cache tags
  revalidateTag('User');
  revalidateTag(`User:${id}`);
  
  return updatedUser as User;
}

export async function deleteUser(id: string): Promise<void> {
  await prisma.user.delete({ where: { id } });
  
  // Invalidate cache tags
  revalidateTag('User');
  revalidateTag(`User:${id}`);
}

// Batch operations
export async function createManyUsers(
  inputs: UserCreateManyInput[]
): Promise<{ count: number }> {
  const data = inputs.map(input => UserCreateManyInputSchema.parse(input));
  const result = await prisma.user.createMany({ data });
  
  // Invalidate cache tags
  revalidateTag('User');
  
  return result;
}

export async function deleteManyUsers(ids: string[]): Promise<{ count: number }> {
  const result = await prisma.user.deleteMany({
    where: { id: { in: ids } }
  });
  
  // Invalidate cache tags
  revalidateTag('User');
  ids.forEach(id => revalidateTag(`User:${id}`));
  
  return result;
}
