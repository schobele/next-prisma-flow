// This file is auto-generated by Next Prisma Flow Generator.
// Do not edit this file manually as it will be overwritten.
// Generated at: 2025-06-07T12:32:18.080Z

// Flow configuration types and state definitions

import type React from 'react';
import type { User } from './user/types';
import type { Category } from './category/types';
import type { Todo } from './todo/types';

// ============================================================================
// FLOW CONFIGURATION
// ============================================================================

export interface FlowConfig {
  // Error handling
  errorBoundary: boolean;
  errorFallback?: React.ComponentType<{ error: Error; reset: () => void }>;
  
  // Development tools
  devTools: boolean;
  
  // Auto-refresh configuration
  autoRefresh: boolean;
  refreshInterval: number; // milliseconds
  
  // SSR/Hydration
  ssrSafe: boolean;
  
  // Performance optimizations
  batchUpdates: boolean;
  optimisticUpdates: boolean;
  
  // Custom settings
  [key: string]: any;
}

// ============================================================================
// FLOW STATE TYPE
// ============================================================================

export interface FlowState {
  users: Record<string, User>;
  usersLoading: boolean;
  usersError: string | null;
  categories: Record<string, Category>;
  categoriesLoading: boolean;
  categoriesError: string | null;
  todos: Record<string, Todo>;
  todosLoading: boolean;
  todosError: string | null;
}

// ============================================================================
// DEFAULT CONFIGURATION
// ============================================================================

export const DEFAULT_FLOW_CONFIG: FlowConfig = {
  errorBoundary: true,
  devTools: process.env.NODE_ENV === 'development',
  autoRefresh: false,
  refreshInterval: 30000,
  ssrSafe: true,
  batchUpdates: true,
  optimisticUpdates: true,
};

// ============================================================================
// CONFIGURATION HELPERS
// ============================================================================

export function createFlowConfig(userConfig?: Partial<FlowConfig>): FlowConfig {
  return {
    ...DEFAULT_FLOW_CONFIG,
    ...userConfig,
  };
}

export function validateFlowConfig(config: Partial<FlowConfig>): string[] {
  const errors: string[] = [];
  
  if (config.refreshInterval !== undefined && config.refreshInterval < 1000) {
    errors.push('refreshInterval must be at least 1000ms');
  }
  
  if (config.errorBoundary === false && config.errorFallback) {
    errors.push('errorFallback requires errorBoundary to be true');
  }
  
  return errors;
}

// ============================================================================
// TYPE EXPORTS FOR CONVENIENCE
// ============================================================================

export type { FlowContextValue, FlowDebugInfo, FlowErrorBoundaryRef } from './flow-context';
