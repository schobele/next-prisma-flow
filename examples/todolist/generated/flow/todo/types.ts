// This file is auto-generated by Next Prisma Flow Generator.
// Do not edit this file manually as it will be overwritten.
// Generated at: 2025-06-01T19:44:19.116Z

import type { Prisma } from '@prisma/client';
import { z } from 'zod';

// Re-export Zod schemas from zod-prisma-types
export {
  TodoSchema as todoSchema,
  TodoCreateInputSchema,
  TodoUpdateInputSchema,
  TodoCreateManyInputSchema,
} from '../../zod';

// Import schemas for type inference
import {
  TodoCreateInputSchema,
  TodoUpdateInputSchema,
  TodoCreateManyInputSchema,
} from '../../zod';

// Infer types from Zod schemas
export type TodoCreateInput = z.infer<typeof TodoCreateInputSchema>;
export type TodoUpdateInput = z.infer<typeof TodoUpdateInputSchema>;
export type TodoCreateManyInput = z.infer<typeof TodoCreateManyInputSchema>;

// Define the select object for this model
export const todoSelect = { id: true, title: true, description: true, status: true, priority: true, dueDate: true, completedAt: true, createdAt: true, updatedAt: true, userId: true, categoryId: true, user: { select: { id: true, email: true, name: true, createdAt: true, updatedAt: true } }, category: { select: { id: true, name: true, color: true, createdAt: true } } } satisfies Prisma.TodoSelect;

// Generate the exact type based on our select
export type Todo = Prisma.TodoGetPayload<{
  select: typeof todoSelect;
}>;

// Utility types for working with this model
export type TodoId = Todo['id'];

export type TodoInput = TodoCreateInput;
export type TodoUpdateInput = TodoUpdateInput;
export type TodoWhereInput = Prisma.TodoWhereInput;
export type TodoWhereUniqueInput = Prisma.TodoWhereUniqueInput;
export type TodoOrderByInput = Prisma.TodoOrderByWithRelationInput;

// For array operations
export type TodoArray = Todo[];
export type TodoCreateInputArray = TodoInput[];
export type TodoCreateManyInputArray = TodoCreateManyInput[];

// For partial updates (useful for forms)
export type PartialTodoInput = Partial<TodoInput>;

// For search and filtering
export interface TodoSearchParams {
  query?: string;
  page?: number;
  limit?: number;
  orderBy?: keyof Todo;
  orderDirection?: 'asc' | 'desc';
}

export interface TodoFilterParams extends TodoSearchParams {
  where?: TodoWhereInput;
}

// Response types for API operations
export interface TodoApiResponse {
  data: Todo;
  success: boolean;
  message?: string;
}

export interface TodoListApiResponse {
  data: Todo[];
  success: boolean;
  message?: string;
  pagination?: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

export interface TodoMutationResponse {
  data?: Todo;
  success: boolean;
  message?: string;
  errors?: Record<string, string[]>;
}

export interface TodoBatchResponse {
  count: number;
  success: boolean;
  message?: string;
}

// State management types for Jotai atoms
export interface TodoState {
  items: Record<string, Todo>;
  loading: boolean;
  creating: boolean;
  updating: Record<string, boolean>;
  deleting: Record<string, boolean>;
  error: string | null;
}

export interface TodoOptimisticUpdate {
  id: string;
  data: Partial<Todo>;
  timestamp: number;
}

// Form types (useful for React Hook Form integration)
export type TodoFormData = Omit<TodoInput, 'id' | 'createdAt' | 'updatedAt'>;
export type TodoUpdateFormData = Partial<TodoFormData>;

// Event types for custom hooks
export interface TodoChangeEvent {
  type: 'create' | 'update' | 'delete';
  todo: Todo;
  previousValue?: Todo;
}

// Validation error types
export interface TodoValidationError {
  field: keyof TodoInput;
  message: string;
  code: string;
}

export interface TodoValidationErrors {
  errors: TodoValidationError[];
  message: string;
}
