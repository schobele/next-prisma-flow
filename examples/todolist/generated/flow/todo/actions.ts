// This file is auto-generated by Next Prisma Flow Generator.
// Do not edit this file manually as it will be overwritten.
// Generated at: 2025-06-02T18:57:26.038Z

'use server';

import { prisma } from '../../../lib/db';
import { revalidateTag } from 'next/cache';
import { 
  todoSchema, 
  type Todo, 
  type TodoCreateInput, 
  type TodoUpdateInput,
  type TodoCreateManyInput,
  TodoCreateInputSchema,
  TodoUpdateInputSchema,
  TodoCreateManyInputSchema
} from './types';

const todoSelect = { id: true, title: true, description: true, status: true, priority: true, dueDate: true, completedAt: true, createdAt: true, updatedAt: true, userId: true, categoryId: true, user: { select: { id: true, email: true, name: true, createdAt: true, updatedAt: true } }, category: { select: { id: true, name: true, color: true, createdAt: true } } };

export async function getAllTodos(): Promise<Todo[]> {
  const todos = await prisma.todo.findMany({ 
    select: todoSelect 
  });
  return todos as Todo[];
}

export async function getTodo(id: string): Promise<Todo | null> {
  const todo = await prisma.todo.findUnique({ 
    where: { id }, 
    select: todoSelect 
  });
  return todo as Todo | null;
}

export async function createTodo(input: TodoCreateInput): Promise<Todo> {
  const data = TodoCreateInputSchema.parse(input);
  const newTodo = await prisma.todo.create({ 
    data, 
    select: todoSelect 
  });
  
  // Invalidate cache tags
  revalidateTag('Todo');
  
  return newTodo as Todo;
}

export async function updateTodo(
  id: string, 
  input: TodoUpdateInput
): Promise<Todo> {
  const data = TodoUpdateInputSchema.parse(input);
  const updatedTodo = await prisma.todo.update({
    where: { id },
    data,
    select: todoSelect,
  });
  
  // Invalidate cache tags
  revalidateTag('Todo');
  revalidateTag(`Todo:${id}`);
  
  return updatedTodo as Todo;
}

export async function deleteTodo(id: string): Promise<void> {
  await prisma.todo.delete({ where: { id } });
  
  // Invalidate cache tags
  revalidateTag('Todo');
  revalidateTag(`Todo:${id}`);
}

// Batch operations
export async function createManyTodos(
  inputs: TodoCreateManyInput[]
): Promise<{ count: number }> {
  const data = inputs.map(input => TodoCreateManyInputSchema.parse(input));
  const result = await prisma.todo.createMany({ data });
  
  // Invalidate cache tags
  revalidateTag('Todo');
  
  return result;
}

export async function deleteManyTodos(ids: string[]): Promise<{ count: number }> {
  const result = await prisma.todo.deleteMany({
    where: { id: { in: ids } }
  });
  
  // Invalidate cache tags
  revalidateTag('Todo');
  ids.forEach(id => revalidateTag(`Todo:${id}`));
  
  return result;
}
