// @generated by next-prisma-flow-state-engine
// file: server/actions.ts

"use server";

import { prisma } from "../../prisma";
import {
  invalidateTags,
  keys,
  FlowCtx,
  FlowPolicyError,
  FlowValidationError,
} from "../../core";
import { canAuthor } from "../../policies";
import { AuthorSelect } from "./selects";
import { AuthorCreateSchema, AuthorUpdateSchema } from "../types/schemas";
import type {
  FlowAuthor,
  FlowAuthorCreate,
  FlowAuthorUpdate,
} from "../types/schemas";
import {
  transformAuthorCreate,
  transformAuthorUpdate,
} from "../types/transforms";

// Transform Prisma response to match FlowPost schema (null -> undefined for relations)
function transformResponse(item: any): any {
  if (!item) return item;
  const result = { ...item };
  return result;
}

export async function createAuthor(
  data: FlowAuthorCreate,
  ctx: FlowCtx = {},
): Promise<FlowAuthor> {
  const policy = await canAuthor("create", ctx || {});
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  const parsed = AuthorCreateSchema.safeParse(data);
  if (!parsed.success) {
    throw new FlowValidationError(parsed.error.issues);
  }

  const createData = transformAuthorCreate(parsed.data as any);
  const item = (await prisma.author.create({
    data: { ...createData, ...policy.data },
    select: AuthorSelect,
  })) as FlowAuthor;

  await invalidateTags([keys.m("Author").tag()]);
  return transformResponse(item) as FlowAuthor;
}

export async function updateAuthor(
  id: string,
  data: FlowAuthorUpdate,
  ctx: FlowCtx = {},
): Promise<FlowAuthor> {
  const policy = await canAuthor("update", ctx || {}, id);
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  const parsed = AuthorUpdateSchema.safeParse(data);
  if (!parsed.success) {
    throw new FlowValidationError(parsed.error.issues);
  }

  const updateData = transformAuthorUpdate(parsed.data as any);
  const item = (await prisma.author.update({
    where: { id: id, ...policy.where },
    data: { ...updateData, ...policy.data },
    select: AuthorSelect,
  })) as FlowAuthor;

  await invalidateTags([
    keys.m("Author").tag(),
    keys.m("Author").tag(String(id)),
  ]);
  return transformResponse(item) as FlowAuthor;
}

export async function deleteAuthor(id: string, ctx?: FlowCtx): Promise<void> {
  const policy = await canAuthor("delete", ctx || {}, id);
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  await prisma.author.delete({
    where: { id: id, ...policy.where },
  });

  await invalidateTags([
    keys.m("Author").tag(),
    keys.m("Author").tag(String(id)),
  ]);
}
