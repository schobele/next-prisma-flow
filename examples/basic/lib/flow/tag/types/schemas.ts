// @generated by next-prisma-flow-state-engine
// file: types/schemas.ts

import { z } from "zod";

// Scalar fields only
export const TagScalarSchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

// Relation schemas
export const TagPostsAuthorSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  bio: z.string().optional().nullable(),
});

export const TagPostsSchema = z.object({
  id: z.string(),
  title: z.string(),
  slug: z.string(),
  excerpt: z.string().optional().nullable(),
  content: z.string(),
  published: z.boolean(),
  publishedAt: z.date().optional().nullable(),
  createdAt: z.date(),
  updatedAt: z.date(),
  authorId: z.string(),
  author: TagPostsAuthorSchema.optional(),
});

// Main schema with relations
export const TagSchema = TagScalarSchema.extend({
  posts: z.array(TagPostsSchema).optional(),
});

// Input schemas for create operations
const TagCreatePostsInputSchema = z.object({
  id: z.string().optional(),
  title: z.string(),
  slug: z.string(),
  excerpt: z.string().optional().nullable(),
  content: z.string(),
  published: z.boolean().optional(),
  publishedAt: z.date().optional().nullable(),
  createdAt: z.date().optional(),
  authorId: z.string(),
  author: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const TagCreateSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  posts: z
    .object({
      create: z
        .union([TagCreatePostsInputSchema, z.array(TagCreatePostsInputSchema)])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: TagCreatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: TagCreatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
});

export const TagCreateManyInputSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
});

// Input schemas for update operations
const TagUpdatePostsInputSchema = z.object({
  title: z.string().optional(),
  slug: z.string().optional(),
  excerpt: z.string().optional().nullable(),
  content: z.string().optional(),
  published: z.boolean().optional(),
  publishedAt: z.date().optional().nullable(),
  createdAt: z.date().optional(),
  authorId: z.string().optional(),
  author: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const TagUpdateSchema = z.object({
  name: z.string().optional(),
  slug: z.string().optional(),
  posts: z
    .object({
      create: z
        .union([TagCreatePostsInputSchema, z.array(TagCreatePostsInputSchema)])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: TagCreatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: TagCreatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: TagUpdatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: TagUpdatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: TagUpdatePostsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: TagUpdatePostsInputSchema,
            create: TagCreatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: TagUpdatePostsInputSchema,
              create: TagCreatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
});

export const TagUpdateManyInputSchema = z.object({
  name: z.string().optional().nullable(),
  slug: z.string().optional().nullable(),
});

export const TagUpsertInputSchema = z.object({
  create: TagCreateSchema,
  update: TagUpdateSchema,
});

// Filter and where schemas
// Relation where schemas
export const TagPostsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  title: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  slug: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  excerpt: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  content: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  published: z
    .union([
      z.boolean(),
      z.object({
        equals: z.boolean().optional(),
        not: z.boolean().optional(),
      }),
    ])
    .optional(),
  publishedAt: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  authorId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

// Base filter schema
export const TagFilterBaseSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  slug: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  posts: z
    .object({
      every: TagPostsFilterSchema.optional(),
      some: TagPostsFilterSchema.optional(),
      none: TagPostsFilterSchema.optional(),
    })
    .optional(),
  AND: z.union([z.any(), z.array(z.any())]).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.union([z.any(), z.array(z.any())]).optional(),
});

// Extended filter schema with self-references
export const TagFilterSchema = TagFilterBaseSchema.extend({
  AND: z.array(TagFilterBaseSchema).optional(),
  OR: z.array(TagFilterBaseSchema).optional(),
  NOT: TagFilterBaseSchema.optional(),
});

// Alias for Prisma compatibility
export const TagWhereInputSchema = TagFilterSchema;

export const TagWhereUniqueInputSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
});

// Type exports
export type FlowTag = z.infer<typeof TagSchema>;
export type FlowTagCreate = z.infer<typeof TagCreateSchema>;
export type FlowTagUpdate = z.infer<typeof TagUpdateSchema>;
export type FlowTagFilter = z.infer<typeof TagFilterSchema>;
export type FlowTagWhere = z.infer<typeof TagWhereInputSchema>;
export type FlowTagWhereUnique = z.infer<typeof TagWhereUniqueInputSchema>;
