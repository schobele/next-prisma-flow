// @generated by next-prisma-flow-state-engine
// file: types/transforms.ts

import type { Prisma } from "../../prisma";
import type { FlowPostCreate, FlowPostUpdate } from "./schemas";

export function transformPostCreate(
  input: FlowPostCreate,
): Prisma.PostCreateInput {
  const result: any = {};

  result.title = input.title;
  if ("content" in input && input.content !== undefined) {
    result.content = input.content;
  }
  if ("createdAt" in input && input.createdAt !== undefined) {
    result.createdAt = input.createdAt;
  }
  if (input.author !== undefined) {
    const authorData = input.author;
    if (authorData) {
      if ("connect" in authorData && authorData.connect) {
        result.author = { connect: authorData.connect };
      } else if ("create" in authorData && authorData.create) {
        result.author = { create: authorData.create as any };
      } else if (
        "connectOrCreate" in authorData &&
        authorData.connectOrCreate
      ) {
        result.author = {
          connectOrCreate: authorData.connectOrCreate as any,
        };
      }
    }
  }
  // Handle foreign key field when relation is not provided
  if (input.author === undefined && "authorId" in input && input.authorId) {
    result.author = { connect: { id: input.authorId } };
  }
  if (input.comments !== undefined) {
    const commentsData = input.comments;
    if (commentsData) {
      if ("connect" in commentsData && commentsData.connect) {
        result.comments = { connect: commentsData.connect };
      } else if ("create" in commentsData && commentsData.create) {
        result.comments = {
          create: commentsData.create as any,
        };
      } else if ("createMany" in commentsData && commentsData.createMany) {
      } else if (
        "connectOrCreate" in commentsData &&
        commentsData.connectOrCreate
      ) {
        result.comments = {
          connectOrCreate: commentsData.connectOrCreate as any,
        };
      }
    }
  }

  return result;
}

export function transformPostUpdate(
  input: FlowPostUpdate,
): Prisma.PostUpdateInput {
  const result: any = {};

  const titleValue = input.title;
  if (titleValue !== undefined && titleValue !== null) {
    result.title = titleValue;
  }
  const contentValue = input.content;
  if (contentValue !== undefined) {
    result.content = contentValue;
  }
  const createdAtValue = input.createdAt;
  if (createdAtValue !== undefined && createdAtValue !== null) {
    result.createdAt = createdAtValue;
  }
  if (input.author !== undefined) {
    const authorData = input.author;
    if (authorData) {
      result.author = authorData as any;
    }
  }
  if (input.comments !== undefined) {
    const commentsData = input.comments;
    if (commentsData) {
      result.comments = commentsData as any;
    }
  }

  return result;
}
