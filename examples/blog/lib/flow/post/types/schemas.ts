// @generated by next-prisma-flow-state-engine
// file: types/schemas.ts

import { z } from "zod";

// Scalar fields only
export const PostScalarSchema = z.object({
  id: z.string(),
  title: z.string(),
  content: z.string().optional().nullable(),
  authorId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

// Relation schemas
export const PostAuthorCommentsSchema = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
});

export const PostCommentsAuthorSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
});

export const PostAuthorSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  comments: z.array(PostAuthorCommentsSchema).optional(),
});

export const PostCommentsSchema = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  author: PostCommentsAuthorSchema.optional(),
});

// Main schema with relations
export const PostSchema = PostScalarSchema.extend({
  author: PostAuthorSchema.optional(),
  comments: z.array(PostCommentsSchema).optional(),
});

// Input schemas for create operations
const PostCreateAuthorInputSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  name: z.string().optional().nullable(),
  posts: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  comments: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const PostCreateCommentsInputSchema = z.object({
  id: z.string().optional(),
  content: z.string(),
  createdAt: z.date().optional(),
  post: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  author: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
});

export const PostCreateSchema = z.object({
  id: z.string().optional(),
  title: z.string(),
  content: z.string().optional().nullable(),
  createdAt: z.date().optional(),
  authorId: z.string(),
  author: z
    .object({
      create: PostCreateAuthorInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: PostCreateAuthorInputSchema,
        })
        .optional(),
    })
    .optional(),
  comments: z
    .object({
      create: z
        .union([
          PostCreateCommentsInputSchema,
          z.array(PostCreateCommentsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: PostCreateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: PostCreateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
});

export const PostCreateManyInputSchema = z.object({
  id: z.string().optional(),
  title: z.string(),
  content: z.string().optional().nullable(),
  createdAt: z.date().optional(),
});

// Input schemas for update operations
const PostUpdateAuthorInputSchema = z.object({
  email: z.string().optional(),
  name: z.string().optional().nullable(),
  posts: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  comments: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const PostUpdateCommentsInputSchema = z.object({
  content: z.string().optional(),
  createdAt: z.date().optional(),
  post: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  author: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
});

export const PostUpdateSchema = z.object({
  title: z.string().optional(),
  content: z.string().optional().nullable(),
  createdAt: z.date().optional(),
  authorId: z.string().optional(),
  author: z
    .object({
      create: PostCreateAuthorInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: PostCreateAuthorInputSchema,
        })
        .optional(),
      update: z
        .object({
          where: z.object({ id: z.string() }).optional(),
          data: PostUpdateAuthorInputSchema,
        })
        .optional(),
      upsert: z
        .object({
          where: z.object({ id: z.string() }),
          update: PostUpdateAuthorInputSchema,
          create: PostCreateAuthorInputSchema,
        })
        .optional(),
    })
    .optional(),
  comments: z
    .object({
      create: z
        .union([
          PostCreateCommentsInputSchema,
          z.array(PostCreateCommentsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: PostCreateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: PostCreateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: PostUpdateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: PostUpdateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: PostUpdateCommentsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: PostUpdateCommentsInputSchema,
            create: PostCreateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: PostUpdateCommentsInputSchema,
              create: PostCreateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
});

export const PostUpdateManyInputSchema = z.object({
  title: z.string().optional().nullable(),
  content: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
});

export const PostUpsertInputSchema = z.object({
  create: PostCreateSchema,
  update: PostUpdateSchema,
});

// Filter and where schemas
// Relation where schemas
export const PostAuthorFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  email: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const PostCommentsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  content: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

// Base filter schema
export const PostFilterBaseSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  title: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  content: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  author: z.union([PostAuthorFilterSchema, z.null()]).optional(),
  comments: z
    .object({
      every: PostCommentsFilterSchema.optional(),
      some: PostCommentsFilterSchema.optional(),
      none: PostCommentsFilterSchema.optional(),
    })
    .optional(),
  AND: z.union([z.any(), z.array(z.any())]).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.union([z.any(), z.array(z.any())]).optional(),
});

// Extended filter schema with self-references
export const PostFilterSchema = PostFilterBaseSchema.extend({
  AND: z.array(PostFilterBaseSchema).optional(),
  OR: z.array(PostFilterBaseSchema).optional(),
  NOT: PostFilterBaseSchema.optional(),
});

// Alias for Prisma compatibility
export const PostWhereInputSchema = PostFilterSchema;

export const PostWhereUniqueInputSchema = z.object({
  id: z.string().optional(),
});

// Type exports
export type FlowPost = z.infer<typeof PostSchema>;
export type FlowPostCreate = z.infer<typeof PostCreateSchema>;
export type FlowPostUpdate = z.infer<typeof PostUpdateSchema>;
export type FlowPostFilter = z.infer<typeof PostFilterSchema>;
export type FlowPostWhere = z.infer<typeof PostWhereInputSchema>;
export type FlowPostWhereUnique = z.infer<typeof PostWhereUniqueInputSchema>;
