// @generated by next-prisma-flow-state-engine
// file: types/schemas.ts

import { z } from "zod";

// Scalar fields only
export const UserScalarSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

// Relation schemas
export const UserPostsCommentsSchema = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
});

export const UserCommentsPostSchema = z.object({
  id: z.string(),
  title: z.string(),
  content: z.string().optional().nullable(),
  createdAt: z.date(),
});

export const UserPostsSchema = z.object({
  id: z.string(),
  title: z.string(),
  content: z.string().optional().nullable(),
  createdAt: z.date(),
  comments: z.array(UserPostsCommentsSchema).optional(),
});

export const UserCommentsSchema = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.date(),
  post: UserCommentsPostSchema.optional(),
});

// Main schema with relations
export const UserSchema = UserScalarSchema.extend({
  posts: z.array(UserPostsSchema).optional(),
  comments: z.array(UserCommentsSchema).optional(),
});

// Input schemas for create operations
const UserCreatePostsInputSchema = z.object({
  id: z.string().optional(),
  title: z.string(),
  content: z.string().optional().nullable(),
  createdAt: z.date().optional(),
  author: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  comments: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const UserCreateCommentsInputSchema = z.object({
  id: z.string().optional(),
  content: z.string(),
  createdAt: z.date().optional(),
  post: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  author: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
});

export const UserCreateSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  name: z.string().optional().nullable(),
  posts: z
    .object({
      create: z
        .union([
          UserCreatePostsInputSchema,
          z.array(UserCreatePostsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: UserCreatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: UserCreatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
  comments: z
    .object({
      create: z
        .union([
          UserCreateCommentsInputSchema,
          z.array(UserCreateCommentsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: UserCreateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: UserCreateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
});

export const UserCreateManyInputSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  name: z.string().optional().nullable(),
});

// Input schemas for update operations
const UserUpdatePostsInputSchema = z.object({
  title: z.string().optional(),
  content: z.string().optional().nullable(),
  createdAt: z.date().optional(),
  author: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  comments: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const UserUpdateCommentsInputSchema = z.object({
  content: z.string().optional(),
  createdAt: z.date().optional(),
  post: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  author: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
});

export const UserUpdateSchema = z.object({
  email: z.string().optional(),
  name: z.string().optional().nullable(),
  posts: z
    .object({
      create: z
        .union([
          UserCreatePostsInputSchema,
          z.array(UserCreatePostsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: UserCreatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: UserCreatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: UserUpdatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: UserUpdatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: UserUpdatePostsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: UserUpdatePostsInputSchema,
            create: UserCreatePostsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: UserUpdatePostsInputSchema,
              create: UserCreatePostsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
  comments: z
    .object({
      create: z
        .union([
          UserCreateCommentsInputSchema,
          z.array(UserCreateCommentsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: UserCreateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: UserCreateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: UserUpdateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: UserUpdateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: UserUpdateCommentsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: UserUpdateCommentsInputSchema,
            create: UserCreateCommentsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: UserUpdateCommentsInputSchema,
              create: UserCreateCommentsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
});

export const UserUpdateManyInputSchema = z.object({
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
});

export const UserUpsertInputSchema = z.object({
  create: UserCreateSchema,
  update: UserUpdateSchema,
});

// Filter and where schemas
// Relation where schemas
export const UserPostsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  title: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  content: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const UserCommentsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  content: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

// Base filter schema
export const UserFilterBaseSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  email: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  posts: z
    .object({
      every: UserPostsFilterSchema.optional(),
      some: UserPostsFilterSchema.optional(),
      none: UserPostsFilterSchema.optional(),
    })
    .optional(),
  comments: z
    .object({
      every: UserCommentsFilterSchema.optional(),
      some: UserCommentsFilterSchema.optional(),
      none: UserCommentsFilterSchema.optional(),
    })
    .optional(),
  AND: z.union([z.any(), z.array(z.any())]).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.union([z.any(), z.array(z.any())]).optional(),
});

// Extended filter schema with self-references
export const UserFilterSchema = UserFilterBaseSchema.extend({
  AND: z.array(UserFilterBaseSchema).optional(),
  OR: z.array(UserFilterBaseSchema).optional(),
  NOT: UserFilterBaseSchema.optional(),
});

// Alias for Prisma compatibility
export const UserWhereInputSchema = UserFilterSchema;

export const UserWhereUniqueInputSchema = z.object({
  id: z.string().optional(),
  email: z.string().optional(),
});

// Type exports
export type FlowUser = z.infer<typeof UserSchema>;
export type FlowUserCreate = z.infer<typeof UserCreateSchema>;
export type FlowUserUpdate = z.infer<typeof UserUpdateSchema>;
export type FlowUserFilter = z.infer<typeof UserFilterSchema>;
export type FlowUserWhere = z.infer<typeof UserWhereInputSchema>;
export type FlowUserWhereUnique = z.infer<typeof UserWhereUniqueInputSchema>;
