// @generated by next-prisma-flow-state-engine
// file: types/transforms.ts

import type { Prisma } from "../../prisma";
import type { FlowUserCreate, FlowUserUpdate } from "./schemas";

export function transformUserCreate(
  input: FlowUserCreate,
): Prisma.UserCreateInput {
  const result: any = {};

  result.email = input.email;
  if ("name" in input && input.name !== undefined) {
    result.name = input.name;
  }
  if (input.posts !== undefined) {
    const postsData = input.posts;
    if (postsData) {
      if ("connect" in postsData && postsData.connect) {
        result.posts = { connect: postsData.connect };
      } else if ("create" in postsData && postsData.create) {
        result.posts = {
          create: postsData.create as any,
        };
      } else if ("createMany" in postsData && postsData.createMany) {
      } else if ("connectOrCreate" in postsData && postsData.connectOrCreate) {
        result.posts = {
          connectOrCreate: postsData.connectOrCreate as any,
        };
      }
    }
  }
  if (input.comments !== undefined) {
    const commentsData = input.comments;
    if (commentsData) {
      if ("connect" in commentsData && commentsData.connect) {
        result.comments = { connect: commentsData.connect };
      } else if ("create" in commentsData && commentsData.create) {
        result.comments = {
          create: commentsData.create as any,
        };
      } else if ("createMany" in commentsData && commentsData.createMany) {
      } else if (
        "connectOrCreate" in commentsData &&
        commentsData.connectOrCreate
      ) {
        result.comments = {
          connectOrCreate: commentsData.connectOrCreate as any,
        };
      }
    }
  }

  return result;
}

export function transformUserUpdate(
  input: FlowUserUpdate,
): Prisma.UserUpdateInput {
  const result: any = {};

  const emailValue = input.email;
  if (emailValue !== undefined && emailValue !== null) {
    result.email = emailValue;
  }
  const nameValue = input.name;
  if (nameValue !== undefined) {
    result.name = nameValue;
  }
  if (input.posts !== undefined) {
    const postsData = input.posts;
    if (postsData) {
      result.posts = postsData as any;
    }
  }
  if (input.comments !== undefined) {
    const commentsData = input.comments;
    if (commentsData) {
      result.comments = commentsData as any;
    }
  }

  return result;
}
