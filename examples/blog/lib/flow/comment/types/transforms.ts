// @generated by next-prisma-flow-state-engine
// file: types/transforms.ts

import type { Prisma } from "../../prisma";
import type { FlowCommentCreate, FlowCommentUpdate } from "./schemas";

export function transformCommentCreate(
  input: FlowCommentCreate,
): Prisma.CommentCreateInput {
  const result: any = {};

  result.content = input.content;
  if ("createdAt" in input && input.createdAt !== undefined) {
    result.createdAt = input.createdAt;
  }
  if (input.post !== undefined) {
    const postData = input.post;
    if (postData) {
      if ("connect" in postData && postData.connect) {
        result.post = { connect: postData.connect };
      } else if ("create" in postData && postData.create) {
        result.post = { create: postData.create as any };
      } else if ("connectOrCreate" in postData && postData.connectOrCreate) {
        result.post = {
          connectOrCreate: postData.connectOrCreate as any,
        };
      }
    }
  }
  // Handle foreign key field when relation is not provided
  if (input.post === undefined && "postId" in input && input.postId) {
    result.post = { connect: { id: input.postId } };
  }
  if (input.author !== undefined) {
    const authorData = input.author;
    if (authorData) {
      if ("connect" in authorData && authorData.connect) {
        result.author = { connect: authorData.connect };
      } else if ("create" in authorData && authorData.create) {
        result.author = { create: authorData.create as any };
      } else if (
        "connectOrCreate" in authorData &&
        authorData.connectOrCreate
      ) {
        result.author = {
          connectOrCreate: authorData.connectOrCreate as any,
        };
      }
    }
  }
  // Handle foreign key field when relation is not provided
  if (input.author === undefined && "authorId" in input && input.authorId) {
    result.author = { connect: { id: input.authorId } };
  }

  return result;
}

export function transformCommentUpdate(
  input: FlowCommentUpdate,
): Prisma.CommentUpdateInput {
  const result: any = {};

  const contentValue = input.content;
  if (contentValue !== undefined && contentValue !== null) {
    result.content = contentValue;
  }
  const createdAtValue = input.createdAt;
  if (createdAtValue !== undefined && createdAtValue !== null) {
    result.createdAt = createdAtValue;
  }
  if (input.post !== undefined) {
    const postData = input.post;
    if (postData) {
      result.post = postData as any;
    }
  }
  if (input.author !== undefined) {
    const authorData = input.author;
    if (authorData) {
      result.author = authorData as any;
    }
  }

  return result;
}
