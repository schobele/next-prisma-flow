// @generated by next-prisma-flow-state-engine
// file: types/types.ts

import type { Prisma } from "../../prisma";
import type {
  CommentDeepSelect,
  CommentListSelect,
  CommentShallowSelect,
} from "../server/selects";

// Type aliases for Comment with different select levels
export type CommentWithRelations = Prisma.CommentGetPayload<{
  select: typeof CommentDeepSelect;
}>;

export type CommentListItem = Prisma.CommentGetPayload<{
  select: typeof CommentListSelect;
}>;

export type CommentShallow = Prisma.CommentGetPayload<{
  select: typeof CommentShallowSelect;
}>;

// Input type helpers
export type CommentCreateInput = Prisma.CommentCreateInput;
export type CommentUpdateInput = Prisma.CommentUpdateInput;
export type CommentWhereInput = Prisma.CommentWhereInput;
export type CommentWhereUniqueInput = Prisma.CommentWhereUniqueInput;
export type CommentOrderByInput = Prisma.CommentOrderByWithRelationInput;

// Relation type helpers
export type CommentWithPost = CommentWithRelations & {
  post: NonNullable<CommentWithRelations["post"]>;
};
export type CommentWithAuthor = CommentWithRelations & {
  author: NonNullable<CommentWithRelations["author"]>;
};

// Utility types
export type CommentId = CommentWithRelations["id"];
export type PartialComment = Partial<CommentWithRelations>;
export type CommentKeys = keyof CommentWithRelations;

// Pagination types
export type CommentPage = {
  items: CommentListItem[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
};

export type CommentCursor = {
  items: CommentListItem[];
  nextCursor?: CommentWhereUniqueInput;
  hasMore: boolean;
};
