// @generated by next-prisma-flow-state-engine
// file: client/field.tsx

"use client";

import {} from "react";
import { type Path } from "react-hook-form";
import {
  FlowField,
  type FlowFieldProps,
  FlowFieldTransforms,
} from "../../core/field-wrapper";
import { useFlowFormContext } from "../../core/form-provider";
import type {
  FlowTodoListTemplateCreate,
  FlowTodoListTemplateUpdate,
} from "../types/schemas";

/**
 * Valid field names for TodoListTemplate forms
 */
export type TodoListTemplateFieldName =
  | Path<FlowTodoListTemplateCreate>
  | Path<FlowTodoListTemplateUpdate>;

/**
 * Props for TodoListTemplateFormField component
 */
export interface TodoListTemplateFormFieldProps
  extends Omit<FlowFieldProps, "name"> {
  /**
   * The field name - type-safe with autocomplete
   */
  name: TodoListTemplateFieldName;
}

/**
 * Type-safe form field for TodoListTemplate
 * Works seamlessly with shadcn/ui form components
 *
 * @example
 * ```tsx
 * <TodoListTemplateFormField
 *   name="title"
 *   render={({ field }) => (
 *     <FormItem>
 *       <FormLabel>Title</FormLabel>
 *       <FormControl>
 *         <Input {...field} />
 *       </FormControl>
 *       <FormDescription>
 *         Enter a descriptive title
 *       </FormDescription>
 *       <FormMessage />
 *     </FormItem>
 *   )}
 * />
 * ```
 */
export function TodoListTemplateFormField({
  name,
  ...props
}: TodoListTemplateFormFieldProps) {
  return <FlowField name={name as any} {...props} />;
}

/**
 * Common field transforms for TodoListTemplate
 *
 * @example
 * ```tsx
 * <TodoListTemplateFormField
 *   name="price"
 *   transform={TodoListTemplateFieldTransforms.number}
 *   render={({ field }) => <Input type="number" {...field} />}
 * />
 * ```
 */
export const TodoListTemplateFieldTransforms = {
  /**
   * Trim whitespace from text fields
   */
  text: FlowFieldTransforms.trim,
};

/**
 * Hook to get field value and setter
 *
 * @example
 * ```tsx
 * function MyComponent() {
 *   const [title, setTitle] = useTodoListTemplateFieldValue("title");
 *   return <input value={title} onChange={e => setTitle(e.target.value)} />;
 * }
 * ```
 */
export function useTodoListTemplateFieldValue(name: TodoListTemplateFieldName) {
  const { form } = useFlowFormContext();
  const value = form.watch(name as any);
  const setValue = (newValue: any) => {
    form.setValue(name as any, newValue, {
      shouldValidate: true,
      shouldDirty: true,
      shouldTouch: true,
    });
  };
  return [value, setValue] as const;
}

/**
 * Hook to get field state
 *
 * @example
 * ```tsx
 * function MyField() {
 *   const fieldState = useTodoListTemplateFieldState("title");
 *   return (
 *     <div>
 *       {fieldState.isDirty && <span>Modified</span>}
 *       {fieldState.error && <span>{fieldState.error.message}</span>}
 *     </div>
 *   );
 * }
 * ```
 */
export function useTodoListTemplateFieldState(name: TodoListTemplateFieldName) {
  const { form } = useFlowFormContext();
  return form.getFieldState(name as any);
}

/**
 * Hook to get field error
 *
 * @example
 * ```tsx
 * function MyField() {
 *   const error = useTodoListTemplateFieldError("email");
 *   if (error) {
 *     return <span className="text-red-500">{error.message}</span>;
 *   }
 *   return null;
 * }
 * ```
 */
export function useTodoListTemplateFieldError(name: TodoListTemplateFieldName) {
  const { form } = useFlowFormContext();
  const fieldState = form.getFieldState(name as any);
  return fieldState.error;
}
