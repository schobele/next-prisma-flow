// @generated by next-prisma-flow-state-engine
// file: types/schemas.ts

import { z } from "zod";

// Scalar fields only
export const TodoListTemplateScalarSchema = z.object({
  id: z.string(),
  name: z.string(),
});

// Relation schemas
// Main schema with relations
export const TodoListTemplateSchema = TodoListTemplateScalarSchema;

// Input schemas for create operations
export const TodoListTemplateCreateSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
});

export const TodoListTemplateCreateManyInputSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
});

// Input schemas for update operations
export const TodoListTemplateUpdateSchema = z.object({
  name: z.string().optional(),
});

export const TodoListTemplateUpdateManyInputSchema = z.object({
  name: z.string().optional().nullable(),
});

export const TodoListTemplateUpsertInputSchema = z.object({
  create: TodoListTemplateCreateSchema,
  update: TodoListTemplateUpdateSchema,
});

// Filter and where schemas
// Base filter schema
export const TodoListTemplateFilterBaseSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  AND: z.union([z.any(), z.array(z.any())]).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.union([z.any(), z.array(z.any())]).optional(),
});

// Extended filter schema with self-references
export const TodoListTemplateFilterSchema =
  TodoListTemplateFilterBaseSchema.extend({
    AND: z.array(TodoListTemplateFilterBaseSchema).optional(),
    OR: z.array(TodoListTemplateFilterBaseSchema).optional(),
    NOT: TodoListTemplateFilterBaseSchema.optional(),
  });

// Alias for Prisma compatibility
export const TodoListTemplateWhereInputSchema = TodoListTemplateFilterSchema;

export const TodoListTemplateWhereUniqueInputSchema = z.object({
  id: z.string().optional(),
});

// Type exports
export type FlowTodoListTemplate = z.infer<typeof TodoListTemplateSchema>;
export type FlowTodoListTemplateCreate = z.infer<
  typeof TodoListTemplateCreateSchema
>;
export type FlowTodoListTemplateUpdate = z.infer<
  typeof TodoListTemplateUpdateSchema
>;
export type FlowTodoListTemplateFilter = z.infer<
  typeof TodoListTemplateFilterSchema
>;
export type FlowTodoListTemplateWhere = z.infer<
  typeof TodoListTemplateWhereInputSchema
>;
export type FlowTodoListTemplateWhereUnique = z.infer<
  typeof TodoListTemplateWhereUniqueInputSchema
>;
