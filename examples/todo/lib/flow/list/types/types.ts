// @generated by next-prisma-flow-state-engine
// file: types/types.ts

import type { Prisma } from "../../prisma";
import type { ListSelect, ListScalarSelect } from "../server/selects";

// Type aliases for List with different select levels
export type ListWithRelations = Prisma.ListGetPayload<{
  select: typeof ListSelect;
}>;

export type ListListItem = Prisma.ListGetPayload<{
  select: typeof ListSelect;
}>;

export type ListShallow = Prisma.ListGetPayload<{
  select: typeof ListScalarSelect;
}>;

// Input type helpers
export type ListCreateInput = Prisma.ListCreateInput;
export type ListUpdateInput = Prisma.ListUpdateInput;
export type ListWhereInput = Prisma.ListWhereInput;
export type ListWhereUniqueInput = Prisma.ListWhereUniqueInput;
export type ListOrderByInput = Prisma.ListOrderByWithRelationInput;

// Relation type helpers
export type ListWithCompany = ListWithRelations & {
  company: NonNullable<ListWithRelations["company"]>;
};
export type ListWithUser = ListWithRelations & {
  user: NonNullable<ListWithRelations["user"]>;
};
export type ListWithTodos = ListWithRelations & {
  todos: NonNullable<ListWithRelations["todos"]>;
};

// Utility types
export type ListId = ListWithRelations["id"];
export type PartialList = Partial<ListWithRelations>;
export type ListKeys = keyof ListWithRelations;

// Pagination types
export type ListPage = {
  items: ListListItem[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
};

export type ListCursor = {
  items: ListListItem[];
  nextCursor?: ListWhereUniqueInput;
  hasMore: boolean;
};
