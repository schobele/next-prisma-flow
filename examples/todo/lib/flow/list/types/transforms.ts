// @generated by next-prisma-flow-state-engine
// file: types/transforms.ts

import type { Prisma } from "../../prisma";
import type { FlowListCreate, FlowListUpdate } from "./schemas";

export function transformListCreate(
  input: FlowListCreate,
): Prisma.ListCreateInput {
  const result: any = {};

  result.name = input.name;
  if ("description" in input && input.description !== undefined) {
    result.description = input.description;
  }
  if ("color" in input && input.color !== undefined) {
    result.color = input.color;
  }
  if ("icon" in input && input.icon !== undefined) {
    result.icon = input.icon;
  }
  if ("orderIndex" in input && input.orderIndex !== undefined) {
    result.orderIndex = input.orderIndex;
  }
  if ("isDefault" in input && input.isDefault !== undefined) {
    result.isDefault = input.isDefault;
  }
  if ("createdAt" in input && input.createdAt !== undefined) {
    result.createdAt = input.createdAt;
  }
  if (input.user !== undefined) {
    const userData = input.user;
    if (userData) {
      if ("connect" in userData && userData.connect) {
        result.user = { connect: userData.connect };
      } else if ("create" in userData && userData.create) {
        result.user = { create: userData.create as any };
      } else if ("connectOrCreate" in userData && userData.connectOrCreate) {
        result.user = {
          connectOrCreate: userData.connectOrCreate as any,
        };
      }
    }
  }
  // Handle foreign key field when relation is not provided
  if (input.user === undefined && "userId" in input && input.userId) {
    result.user = { connect: { id: input.userId } };
  }
  if (input.todos !== undefined) {
    const todosData = input.todos;
    if (todosData) {
      if ("connect" in todosData && todosData.connect) {
        result.todos = { connect: todosData.connect };
      } else if ("create" in todosData && todosData.create) {
        result.todos = {
          create: todosData.create as any,
        };
      } else if ("createMany" in todosData && todosData.createMany) {
      } else if ("connectOrCreate" in todosData && todosData.connectOrCreate) {
        result.todos = {
          connectOrCreate: todosData.connectOrCreate as any,
        };
      }
    }
  }

  return result;
}

export function transformListUpdate(
  input: FlowListUpdate,
): Prisma.ListUpdateInput {
  const result: any = {};

  const nameValue = input.name;
  if (nameValue !== undefined && nameValue !== null) {
    result.name = nameValue;
  }
  const descriptionValue = input.description;
  if (descriptionValue !== undefined) {
    result.description = descriptionValue;
  }
  const colorValue = input.color;
  if (colorValue !== undefined && colorValue !== null) {
    result.color = colorValue;
  }
  const iconValue = input.icon;
  if (iconValue !== undefined && iconValue !== null) {
    result.icon = iconValue;
  }
  const orderIndexValue = input.orderIndex;
  if (orderIndexValue !== undefined && orderIndexValue !== null) {
    result.orderIndex = orderIndexValue;
  }
  const isDefaultValue = input.isDefault;
  if (isDefaultValue !== undefined && isDefaultValue !== null) {
    result.isDefault = isDefaultValue;
  }
  const createdAtValue = input.createdAt;
  if (createdAtValue !== undefined && createdAtValue !== null) {
    result.createdAt = createdAtValue;
  }
  if (input.user !== undefined) {
    const userData = input.user;
    if (userData) {
      result.user = userData as any;
    }
  }
  if (input.todos !== undefined) {
    const todosData = input.todos;
    if (todosData) {
      result.todos = todosData as any;
    }
  }

  return result;
}
