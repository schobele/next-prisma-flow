// @generated by next-prisma-flow-state-engine
// file: types/types.ts

import type { Prisma } from "../../prisma";
import type { TagSelect, TagScalarSelect } from "../server/selects";

// Type aliases for Tag with different select levels
export type TagWithRelations = Prisma.TagGetPayload<{
  select: typeof TagSelect;
}>;

export type TagListItem = Prisma.TagGetPayload<{
  select: typeof TagSelect;
}>;

export type TagShallow = Prisma.TagGetPayload<{
  select: typeof TagScalarSelect;
}>;

// Input type helpers
export type TagCreateInput = Prisma.TagCreateInput;
export type TagUpdateInput = Prisma.TagUpdateInput;
export type TagWhereInput = Prisma.TagWhereInput;
export type TagWhereUniqueInput = Prisma.TagWhereUniqueInput;
export type TagOrderByInput = Prisma.TagOrderByWithRelationInput;

// Relation type helpers
export type TagWithCompany = TagWithRelations & {
  company: NonNullable<TagWithRelations["company"]>;
};
export type TagWithTodos = TagWithRelations & {
  todos: NonNullable<TagWithRelations["todos"]>;
};

// Utility types
export type TagId = TagWithRelations["id"];
export type PartialTag = Partial<TagWithRelations>;
export type TagKeys = keyof TagWithRelations;

// Pagination types
export type TagPage = {
  items: TagListItem[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
};

export type TagCursor = {
  items: TagListItem[];
  nextCursor?: TagWhereUniqueInput;
  hasMore: boolean;
};
