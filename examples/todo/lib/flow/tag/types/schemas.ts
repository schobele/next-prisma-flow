// @generated by next-prisma-flow-state-engine
// file: types/schemas.ts

import { z } from "zod";

// Scalar fields only
export const TagScalarSchema = z.object({
  id: z.string(),
  name: z.string(),
  color: z.string(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

// Relation schemas
export const TagCompanyUsersSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  role: z.string(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const TagCompanyListsSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string(),
  icon: z.string(),
  orderIndex: z.number().int(),
  isDefault: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const TagCompanyTodosSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const TagTodosCompanySchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  logo: z.string().optional().nullable(),
  plan: z.string(),
  maxUsers: z.number().int(),
  maxStorage: z.number().int(),
  createdAt: z.date(),
});

export const TagTodosListSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string(),
  icon: z.string(),
  orderIndex: z.number().int(),
  isDefault: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const TagTodosUserSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  role: z.string(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const TagTodosParentSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const TagTodosSubtasksSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const TagCompanySchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  logo: z.string().optional().nullable(),
  plan: z.string(),
  maxUsers: z.number().int(),
  maxStorage: z.number().int(),
  createdAt: z.date(),
  users: z.array(TagCompanyUsersSchema).optional(),
  lists: z.array(TagCompanyListsSchema).optional(),
  todos: z.array(TagCompanyTodosSchema).optional(),
});

export const TagTodosSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  company: TagTodosCompanySchema.optional(),
  list: TagTodosListSchema.optional(),
  user: TagTodosUserSchema.optional(),
  parent: TagTodosParentSchema.optional(),
  subtasks: z.array(TagTodosSubtasksSchema).optional(),
});

// Main schema with relations
export const TagSchema = TagScalarSchema.extend({
  company: TagCompanySchema.optional(),
  todos: z.array(TagTodosSchema).optional(),
});

// Input schemas for create operations
const TagCreateCompanyInputSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  logo: z.string().optional().nullable(),
  plan: z.string().optional(),
  maxUsers: z.number().int().optional(),
  maxStorage: z.number().int().optional(),
  createdAt: z.date().optional(),
  users: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  lists: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const TagCreateTodosInputSchema = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  list: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  parent: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  subtasks: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const TagCreateSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  color: z.string().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      create: TagCreateCompanyInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: TagCreateCompanyInputSchema,
        })
        .optional(),
    })
    .optional(),
  todos: z
    .object({
      create: z
        .union([TagCreateTodosInputSchema, z.array(TagCreateTodosInputSchema)])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: TagCreateTodosInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: TagCreateTodosInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
});

export const TagCreateManyInputSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  color: z.string().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
});

// Input schemas for update operations
const TagUpdateCompanyInputSchema = z.object({
  name: z.string().optional(),
  slug: z.string().optional(),
  logo: z.string().optional().nullable(),
  plan: z.string().optional(),
  maxUsers: z.number().int().optional(),
  maxStorage: z.number().int().optional(),
  createdAt: z.date().optional(),
  users: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  lists: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const TagUpdateTodosInputSchema = z.object({
  title: z.string().optional(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  list: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  parent: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
      disconnect: z.boolean().optional(),
    })
    .optional(),
  subtasks: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const TagUpdateSchema = z.object({
  name: z.string().optional(),
  color: z.string().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      create: TagCreateCompanyInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: TagCreateCompanyInputSchema,
        })
        .optional(),
      update: z
        .object({
          where: z.object({ id: z.string() }).optional(),
          data: TagUpdateCompanyInputSchema,
        })
        .optional(),
      upsert: z
        .object({
          where: z.object({ id: z.string() }),
          update: TagUpdateCompanyInputSchema,
          create: TagCreateCompanyInputSchema,
        })
        .optional(),
    })
    .optional(),
  todos: z
    .object({
      create: z
        .union([TagCreateTodosInputSchema, z.array(TagCreateTodosInputSchema)])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: TagCreateTodosInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: TagCreateTodosInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: TagUpdateTodosInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: TagUpdateTodosInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: TagUpdateTodosInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: TagUpdateTodosInputSchema,
            create: TagCreateTodosInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: TagUpdateTodosInputSchema,
              create: TagCreateTodosInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
});

export const TagUpdateManyInputSchema = z.object({
  name: z.string().optional().nullable(),
  color: z.string().optional().nullable(),
  companyId: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
});

export const TagUpsertInputSchema = z.object({
  create: TagCreateSchema,
  update: TagUpdateSchema,
});

// Filter and where schemas
// Relation where schemas
export const TagCompanyFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  slug: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  logo: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  plan: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  maxUsers: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  maxStorage: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const TagTodosFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  title: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  description: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  status: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  priority: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  dueDate: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  completedAt: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  orderIndex: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  isArchived: z
    .union([
      z.boolean(),
      z.object({
        equals: z.boolean().optional(),
        not: z.boolean().optional(),
      }),
    ])
    .optional(),
  companyId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

// Base filter schema
export const TagFilterBaseSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  color: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  companyId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  company: z.union([TagCompanyFilterSchema, z.null()]).optional(),
  todos: z
    .object({
      every: TagTodosFilterSchema.optional(),
      some: TagTodosFilterSchema.optional(),
      none: TagTodosFilterSchema.optional(),
    })
    .optional(),
  AND: z.union([z.any(), z.array(z.any())]).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.union([z.any(), z.array(z.any())]).optional(),
});

// Extended filter schema with self-references
export const TagFilterSchema = TagFilterBaseSchema.extend({
  AND: z.array(TagFilterBaseSchema).optional(),
  OR: z.array(TagFilterBaseSchema).optional(),
  NOT: TagFilterBaseSchema.optional(),
});

// Alias for Prisma compatibility
export const TagWhereInputSchema = TagFilterSchema;

export const TagWhereUniqueInputSchema = z.object({
  id: z.string().optional(),
});

// Type exports
export type FlowTag = z.infer<typeof TagSchema>;
export type FlowTagCreate = z.infer<typeof TagCreateSchema>;
export type FlowTagUpdate = z.infer<typeof TagUpdateSchema>;
export type FlowTagFilter = z.infer<typeof TagFilterSchema>;
export type FlowTagWhere = z.infer<typeof TagWhereInputSchema>;
export type FlowTagWhereUnique = z.infer<typeof TagWhereUniqueInputSchema>;
