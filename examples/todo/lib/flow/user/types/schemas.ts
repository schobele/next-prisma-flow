// @generated by next-prisma-flow-state-engine
// file: types/schemas.ts

import { z } from "zod";

// Scalar fields only
export const UserScalarSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  role: z.string(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

// Relation schemas
export const UserCompanyListsSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string(),
  icon: z.string(),
  orderIndex: z.number().int(),
  isDefault: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const UserCompanyTodosSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const UserCompanyTagsSchema = z.object({
  id: z.string(),
  name: z.string(),
  color: z.string(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const UserListsCompanySchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  logo: z.string().optional().nullable(),
  plan: z.string(),
  maxUsers: z.number().int(),
  maxStorage: z.number().int(),
  createdAt: z.date(),
});

export const UserListsTodosSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const UserTodosCompanySchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  logo: z.string().optional().nullable(),
  plan: z.string(),
  maxUsers: z.number().int(),
  maxStorage: z.number().int(),
  createdAt: z.date(),
});

export const UserTodosListSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string(),
  icon: z.string(),
  orderIndex: z.number().int(),
  isDefault: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const UserTodosParentSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const UserTodosSubtasksSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const UserTodosTagsSchema = z.object({
  id: z.string(),
  name: z.string(),
  color: z.string(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const UserCompanySchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  logo: z.string().optional().nullable(),
  plan: z.string(),
  maxUsers: z.number().int(),
  maxStorage: z.number().int(),
  createdAt: z.date(),
  lists: z.array(UserCompanyListsSchema).optional(),
  todos: z.array(UserCompanyTodosSchema).optional(),
  tags: z.array(UserCompanyTagsSchema).optional(),
});

export const UserListsSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string(),
  icon: z.string(),
  orderIndex: z.number().int(),
  isDefault: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  company: UserListsCompanySchema.optional(),
  todos: z.array(UserListsTodosSchema).optional(),
});

export const UserTodosSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  company: UserTodosCompanySchema.optional(),
  list: UserTodosListSchema.optional(),
  parent: UserTodosParentSchema.optional(),
  subtasks: z.array(UserTodosSubtasksSchema).optional(),
  tags: z.array(UserTodosTagsSchema).optional(),
});

// Main schema with relations
export const UserSchema = UserScalarSchema.extend({
  company: UserCompanySchema.optional(),
  lists: z.array(UserListsSchema).optional(),
  todos: z.array(UserTodosSchema).optional(),
});

// Input schemas for create operations
const UserCreateCompanyInputSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  logo: z.string().optional().nullable(),
  plan: z.string().optional(),
  maxUsers: z.number().int().optional(),
  maxStorage: z.number().int().optional(),
  createdAt: z.date().optional(),
  users: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  lists: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const UserCreateListsInputSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  icon: z.string().optional(),
  orderIndex: z.number().int().optional(),
  isDefault: z.boolean().optional(),
  companyId: z.string(),
  createdAt: z.date().optional(),
  company: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const UserCreateTodosInputSchema = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  companyId: z.string(),
  createdAt: z.date().optional(),
  company: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  list: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  parent: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  subtasks: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const UserCreateSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  role: z.string().optional(),
  companyId: z.string(),
  createdAt: z.date().optional(),
  company: z
    .object({
      create: UserCreateCompanyInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: UserCreateCompanyInputSchema,
        })
        .optional(),
    })
    .optional(),
  lists: z
    .object({
      create: z
        .union([
          UserCreateListsInputSchema,
          z.array(UserCreateListsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: UserCreateListsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: UserCreateListsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
  todos: z
    .object({
      create: z
        .union([
          UserCreateTodosInputSchema,
          z.array(UserCreateTodosInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: UserCreateTodosInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: UserCreateTodosInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
});

export const UserCreateManyInputSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  role: z.string().optional(),
  companyId: z.string(),
  createdAt: z.date().optional(),
});

// Input schemas for update operations
const UserUpdateCompanyInputSchema = z.object({
  name: z.string().optional(),
  slug: z.string().optional(),
  logo: z.string().optional().nullable(),
  plan: z.string().optional(),
  maxUsers: z.number().int().optional(),
  maxStorage: z.number().int().optional(),
  createdAt: z.date().optional(),
  users: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  lists: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const UserUpdateListsInputSchema = z.object({
  name: z.string().optional(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  icon: z.string().optional(),
  orderIndex: z.number().int().optional(),
  isDefault: z.boolean().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const UserUpdateTodosInputSchema = z.object({
  title: z.string().optional(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  list: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  parent: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
      disconnect: z.boolean().optional(),
    })
    .optional(),
  subtasks: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const UserUpdateSchema = z.object({
  email: z.string().optional(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  role: z.string().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      create: UserCreateCompanyInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: UserCreateCompanyInputSchema,
        })
        .optional(),
      update: z
        .object({
          where: z.object({ id: z.string() }).optional(),
          data: UserUpdateCompanyInputSchema,
        })
        .optional(),
      upsert: z
        .object({
          where: z.object({ id: z.string() }),
          update: UserUpdateCompanyInputSchema,
          create: UserCreateCompanyInputSchema,
        })
        .optional(),
    })
    .optional(),
  lists: z
    .object({
      create: z
        .union([
          UserCreateListsInputSchema,
          z.array(UserCreateListsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: UserCreateListsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: UserCreateListsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: UserUpdateListsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: UserUpdateListsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: UserUpdateListsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: UserUpdateListsInputSchema,
            create: UserCreateListsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: UserUpdateListsInputSchema,
              create: UserCreateListsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
  todos: z
    .object({
      create: z
        .union([
          UserCreateTodosInputSchema,
          z.array(UserCreateTodosInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: UserCreateTodosInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: UserCreateTodosInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: UserUpdateTodosInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: UserUpdateTodosInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: UserUpdateTodosInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: UserUpdateTodosInputSchema,
            create: UserCreateTodosInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: UserUpdateTodosInputSchema,
              create: UserCreateTodosInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
});

export const UserUpdateManyInputSchema = z.object({
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  companyId: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
});

export const UserUpsertInputSchema = z.object({
  create: UserCreateSchema,
  update: UserUpdateSchema,
});

// Filter and where schemas
// Relation where schemas
export const UserCompanyFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  slug: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  logo: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  plan: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  maxUsers: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  maxStorage: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const UserListsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  description: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  color: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  icon: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  orderIndex: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  isDefault: z
    .union([
      z.boolean(),
      z.object({
        equals: z.boolean().optional(),
        not: z.boolean().optional(),
      }),
    ])
    .optional(),
  companyId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const UserTodosFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  title: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  description: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  status: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  priority: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  dueDate: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  completedAt: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  orderIndex: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  isArchived: z
    .union([
      z.boolean(),
      z.object({
        equals: z.boolean().optional(),
        not: z.boolean().optional(),
      }),
    ])
    .optional(),
  companyId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

// Base filter schema
export const UserFilterBaseSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  email: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  avatar: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  role: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  companyId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  company: z.union([UserCompanyFilterSchema, z.null()]).optional(),
  lists: z
    .object({
      every: UserListsFilterSchema.optional(),
      some: UserListsFilterSchema.optional(),
      none: UserListsFilterSchema.optional(),
    })
    .optional(),
  todos: z
    .object({
      every: UserTodosFilterSchema.optional(),
      some: UserTodosFilterSchema.optional(),
      none: UserTodosFilterSchema.optional(),
    })
    .optional(),
  AND: z.union([z.any(), z.array(z.any())]).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.union([z.any(), z.array(z.any())]).optional(),
});

// Extended filter schema with self-references
export const UserFilterSchema = UserFilterBaseSchema.extend({
  AND: z.array(UserFilterBaseSchema).optional(),
  OR: z.array(UserFilterBaseSchema).optional(),
  NOT: UserFilterBaseSchema.optional(),
});

// Alias for Prisma compatibility
export const UserWhereInputSchema = UserFilterSchema;

export const UserWhereUniqueInputSchema = z.object({
  id: z.string().optional(),
  email: z.string().optional(),
});

// Type exports
export type FlowUser = z.infer<typeof UserSchema>;
export type FlowUserCreate = z.infer<typeof UserCreateSchema>;
export type FlowUserUpdate = z.infer<typeof UserUpdateSchema>;
export type FlowUserFilter = z.infer<typeof UserFilterSchema>;
export type FlowUserWhere = z.infer<typeof UserWhereInputSchema>;
export type FlowUserWhereUnique = z.infer<typeof UserWhereUniqueInputSchema>;
