// @generated by next-prisma-flow-state-engine
// file: types/types.ts

import type { Prisma } from "../../prisma";
import type {
  UserDeepSelect,
  UserListSelect,
  UserShallowSelect,
} from "../server/selects";

// Type aliases for User with different select levels
export type UserWithRelations = Prisma.UserGetPayload<{
  select: typeof UserDeepSelect;
}>;

export type UserListItem = Prisma.UserGetPayload<{
  select: typeof UserListSelect;
}>;

export type UserShallow = Prisma.UserGetPayload<{
  select: typeof UserShallowSelect;
}>;

// Input type helpers
export type UserCreateInput = Prisma.UserCreateInput;
export type UserUpdateInput = Prisma.UserUpdateInput;
export type UserWhereInput = Prisma.UserWhereInput;
export type UserWhereUniqueInput = Prisma.UserWhereUniqueInput;
export type UserOrderByInput = Prisma.UserOrderByWithRelationInput;

// Relation type helpers
export type UserWithLists = UserWithRelations & {
  lists: NonNullable<UserWithRelations["lists"]>;
};
export type UserWithTodos = UserWithRelations & {
  todos: NonNullable<UserWithRelations["todos"]>;
};

// Utility types
export type UserId = UserWithRelations["id"];
export type PartialUser = Partial<UserWithRelations>;
export type UserKeys = keyof UserWithRelations;

// Pagination types
export type UserPage = {
  items: UserListItem[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
};

export type UserCursor = {
  items: UserListItem[];
  nextCursor?: UserWhereUniqueInput;
  hasMore: boolean;
};
