// @generated by next-prisma-flow-state-engine
// file: types/transforms.ts

import type { Prisma } from "../../prisma";
import type { FlowUserCreate, FlowUserUpdate } from "./schemas";

export function transformUserCreate(
  input: FlowUserCreate,
): Prisma.UserCreateInput {
  const result: any = {};

  result.email = input.email;
  if ("name" in input && input.name !== undefined) {
    result.name = input.name;
  }
  if ("avatar" in input && input.avatar !== undefined) {
    result.avatar = input.avatar;
  }
  if ("role" in input && input.role !== undefined) {
    result.role = input.role;
  }
  if ("createdAt" in input && input.createdAt !== undefined) {
    result.createdAt = input.createdAt;
  }
  if (input.company !== undefined) {
    const companyData = input.company;
    if (companyData) {
      if ("connect" in companyData && companyData.connect) {
        result.company = { connect: companyData.connect };
      } else if ("create" in companyData && companyData.create) {
        result.company = { create: companyData.create as any };
      } else if (
        "connectOrCreate" in companyData &&
        companyData.connectOrCreate
      ) {
        result.company = {
          connectOrCreate: companyData.connectOrCreate as any,
        };
      }
    }
  }
  // Handle foreign key field when relation is not provided
  if (input.company === undefined && "companyId" in input && input.companyId) {
    result.company = { connect: { id: input.companyId } };
  }
  if (input.lists !== undefined) {
    const listsData = input.lists;
    if (listsData) {
      if ("connect" in listsData && listsData.connect) {
        result.lists = { connect: listsData.connect };
      } else if ("create" in listsData && listsData.create) {
        result.lists = {
          create: listsData.create as any,
        };
      } else if ("createMany" in listsData && listsData.createMany) {
      } else if ("connectOrCreate" in listsData && listsData.connectOrCreate) {
        result.lists = {
          connectOrCreate: listsData.connectOrCreate as any,
        };
      }
    }
  }
  if (input.todos !== undefined) {
    const todosData = input.todos;
    if (todosData) {
      if ("connect" in todosData && todosData.connect) {
        result.todos = { connect: todosData.connect };
      } else if ("create" in todosData && todosData.create) {
        result.todos = {
          create: todosData.create as any,
        };
      } else if ("createMany" in todosData && todosData.createMany) {
      } else if ("connectOrCreate" in todosData && todosData.connectOrCreate) {
        result.todos = {
          connectOrCreate: todosData.connectOrCreate as any,
        };
      }
    }
  }

  return result;
}

export function transformUserUpdate(
  input: FlowUserUpdate,
): Prisma.UserUpdateInput {
  const result: any = {};

  const emailValue = input.email;
  if (emailValue !== undefined && emailValue !== null) {
    result.email = emailValue;
  }
  const nameValue = input.name;
  if (nameValue !== undefined) {
    result.name = nameValue;
  }
  const avatarValue = input.avatar;
  if (avatarValue !== undefined) {
    result.avatar = avatarValue;
  }
  const roleValue = input.role;
  if (roleValue !== undefined && roleValue !== null) {
    result.role = roleValue;
  }
  const createdAtValue = input.createdAt;
  if (createdAtValue !== undefined && createdAtValue !== null) {
    result.createdAt = createdAtValue;
  }
  if (input.company !== undefined) {
    const companyData = input.company;
    if (companyData) {
      result.company = companyData as any;
    }
  }
  if (input.lists !== undefined) {
    const listsData = input.lists;
    if (listsData) {
      result.lists = listsData as any;
    }
  }
  if (input.todos !== undefined) {
    const todosData = input.todos;
    if (todosData) {
      result.todos = todosData as any;
    }
  }

  return result;
}
