// @generated by next-prisma-flow-state-engine
// file: client/forms.ts

"use client";

import { useCallback, useEffect, useState, useRef } from "react";
import {
  useForm,
  type UseFormReturn,
  type UseFormProps,
} from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { UserCreateSchema, UserUpdateSchema } from "../types/schemas";
import type {
  FlowUser,
  FlowUserCreate,
  FlowUserUpdate,
} from "../types/schemas";
import { useUser, useCreateUser, useUpdateUser } from "./hooks";

export type UserAutosaveConfig = {
  enabled: boolean;
  debounceMs?: number;
  fields?: string[];
  onFieldSave?: (field: string, value: any) => void;
  onFieldError?: (field: string, error: Error) => void;
};

export type UserFormOptions = {
  id?: string;
  defaultValues?: Partial<FlowUserCreate> | Partial<FlowUserUpdate>;
  onSuccess?: (data: FlowUser) => void;
  onError?: (error: Error) => void;
  formOptions?: Omit<
    UseFormProps<FlowUserCreate | FlowUserUpdate>,
    "resolver" | "defaultValues"
  >;
  autosave?: UserAutosaveConfig;
};

export function useUserForm(options?: UserFormOptions) {
  const { id, defaultValues, onSuccess, onError, formOptions, autosave } =
    options || {};

  // Smart mode detection
  const mode = id ? "update" : "create";

  // Autosave state
  const [fieldSaveStates, setFieldSaveStates] = useState<
    Record<string, "idle" | "saving" | "saved" | "error">
  >({});
  const debounceTimers = useRef<Record<string, NodeJS.Timeout>>({});

  // Fetch existing data if updating
  const { data: existingData } = useUser(id || "", {
    enabled: !!id,
  });

  // Choose appropriate schema
  const schema = mode === "create" ? UserCreateSchema : UserUpdateSchema;

  // Initialize form with proper defaults
  const form = useForm<FlowUserCreate | FlowUserUpdate>({
    ...formOptions,
    resolver: zodResolver(schema),
    defaultValues: {
      ...defaultValues,
      ...(existingData || {}),
    } as FlowUserCreate | FlowUserUpdate,
  });

  // Update form when existing data loads, preserving user changes
  useEffect(() => {
    if (existingData && mode === "update") {
      // Extract only scalar fields for update forms
      const updateData: any = {};

      // Copy scalar fields only, skip relations (arrays and objects)
      Object.keys(existingData).forEach((key) => {
        const value = (existingData as any)[key];
        // Include scalar values and nulls, skip arrays and objects (relations)
        if (
          value === null ||
          (typeof value !== "object" && !Array.isArray(value))
        ) {
          updateData[key] = value;
        }
      });

      console.log(
        "[UserForm] Resetting form with scalar data only:",
        updateData,
      );
      form.reset(updateData as FlowUserUpdate, {
        keepDirtyValues: true, // Preserve user-modified fields
        keepErrors: true, // Keep validation errors for dirty fields
      });
    }
  }, [existingData, mode, form]);

  // Get appropriate mutation
  const createMutation = useCreateUser({
    onSuccess: (data) => {
      form.reset();
      onSuccess?.(data);
    },
    onError,
  });

  // Only create update mutation if we have a valid ID
  const updateMutation = useUpdateUser(id || "dummy-id-never-used", {
    onSuccess: (data) => {
      onSuccess?.(data);
    },
    onError,
    enabled: !!id, // Only enable if we have a real ID
  });

  const mutation = mode === "update" ? updateMutation : createMutation;

  // Autosave handler for individual fields
  const handleAutosave = useCallback(
    (fieldName: string, value: any) => {
      if (!autosave?.enabled || mode !== "update" || !id) return;

      // Check if this field should be autosaved
      if (autosave.fields && !autosave.fields.includes(fieldName)) return;

      // Clear existing timer for this field
      if (debounceTimers.current[fieldName]) {
        clearTimeout(debounceTimers.current[fieldName]);
      }

      // Set field state to saving after debounce
      setFieldSaveStates((prev) => ({ ...prev, [fieldName]: "idle" }));

      // Create new debounced save
      debounceTimers.current[fieldName] = setTimeout(async () => {
        // Validate the specific field
        const isValid = await form.trigger(fieldName as any);
        if (!isValid) {
          setFieldSaveStates((prev) => ({ ...prev, [fieldName]: "error" }));
          return;
        }

        setFieldSaveStates((prev) => ({ ...prev, [fieldName]: "saving" }));

        try {
          // Create partial update with just this field
          const partialUpdate = { [fieldName]: value } as FlowUserUpdate;
          await updateMutation.mutateAsync(partialUpdate);

          setFieldSaveStates((prev) => ({ ...prev, [fieldName]: "saved" }));
          autosave.onFieldSave?.(fieldName, value);

          // Reset to idle after 2 seconds
          setTimeout(() => {
            setFieldSaveStates((prev) => ({ ...prev, [fieldName]: "idle" }));
          }, 2000);
        } catch (error) {
          setFieldSaveStates((prev) => ({ ...prev, [fieldName]: "error" }));
          autosave.onFieldError?.(fieldName, error as Error);
        }
      }, autosave.debounceMs || 1000);
    },
    [autosave, mode, form, updateMutation, id],
  );

  // Watch for field changes if autosave is enabled
  useEffect(() => {
    if (!autosave?.enabled || mode !== "update" || !id) return;

    const subscription = form.watch((value, { name }) => {
      if (name) {
        handleAutosave(name, value[name]);
      }
    });

    return () => subscription.unsubscribe();
  }, [form, autosave, mode, handleAutosave]);

  // Submit handler
  const submit = useCallback(
    (data: FlowUserCreate | FlowUserUpdate) => {
      console.log("[UserForm] Submitting " + mode + " form:", data);
      if (mode === "update") {
        return updateMutation.mutate(data as FlowUserUpdate);
      } else {
        return createMutation.mutate(data as FlowUserCreate);
      }
    },
    [createMutation, updateMutation, mode],
  );

  // Validation error handler
  const onInvalid = useCallback((errors: any) => {
    console.error("[UserForm] Validation failed:", errors);
  }, []);

  return {
    form,
    submit: form.handleSubmit(submit, onInvalid),
    isSubmitting: mutation.isPending,
    error: mutation.error,
    isSuccess: mutation.isSuccess,
    mode,
    reset: () => form.reset(),
    // Autosave specific
    fieldSaveStates,
    isAutosaving: Object.values(fieldSaveStates).some(
      (state) => state === "saving",
    ),
    autosaveEnabled: autosave?.enabled || false,
  };
}

export function useUserQuickForm(id?: string) {
  return useUserForm({ id });
}

export type UserFormProps = {
  form: UseFormReturn<FlowUserCreate | FlowUserUpdate>;
  onSubmit: () => void;
  isSubmitting: boolean;
  error?: Error | null;
};
