// @generated by next-prisma-flow-state-engine
// file: server/actions.ts

"use server";

import { prisma } from "../../prisma";
import {
  invalidateTags,
  keys,
  FlowCtx,
  FlowPolicyError,
  FlowValidationError,
  deepMergePrismaData,
} from "../../core";
import { canTodo } from "../../policies";
import { TodoSelect } from "./selects";
import { TodoCreateSchema, TodoUpdateSchema } from "../types/schemas";
import type {
  FlowTodo,
  FlowTodoCreate,
  FlowTodoUpdate,
} from "../types/schemas";
import { transformTodoCreate, transformTodoUpdate } from "../types/transforms";

// Transform Prisma response to match FlowPost schema (null -> undefined for relations)
function transformResponse(item: any): any {
  if (!item) return item;
  const result = { ...item };
  if (result.parent === null) result.parent = undefined;
  return result;
}

export async function createTodo(
  data: FlowTodoCreate,
  ctx: FlowCtx = {},
): Promise<FlowTodo> {
  const policy = await canTodo("create", ctx || {});
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  const parsed = TodoCreateSchema.safeParse(data);
  if (!parsed.success) {
    throw new FlowValidationError(parsed.error.issues);
  }

  const createData = transformTodoCreate(parsed.data as any);
  const item = (await prisma.todo.create({
    data: deepMergePrismaData(createData, policy.data || {}, "Todo"),
    select: TodoSelect,
  })) as FlowTodo;

  await invalidateTags([keys.m("Todo").tag()]);
  return transformResponse(item) as FlowTodo;
}

export async function updateTodo(
  id: string,
  data: FlowTodoUpdate,
  ctx: FlowCtx = {},
): Promise<FlowTodo> {
  const policy = await canTodo("update", ctx || {}, id);
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  const parsed = TodoUpdateSchema.safeParse(data);
  if (!parsed.success) {
    throw new FlowValidationError(parsed.error.issues);
  }

  const updateData = transformTodoUpdate(parsed.data as any);
  const item = (await prisma.todo.update({
    where: { id: id, ...policy.where },
    data: deepMergePrismaData(updateData, policy.data || {}, "Todo"),
    select: TodoSelect,
  })) as FlowTodo;

  await invalidateTags([keys.m("Todo").tag(), keys.m("Todo").tag(String(id))]);
  return transformResponse(item) as FlowTodo;
}

export async function deleteTodo(id: string, ctx?: FlowCtx): Promise<void> {
  const policy = await canTodo("delete", ctx || {}, id);
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  await prisma.todo.delete({
    where: { id: id, ...policy.where },
  });

  await invalidateTags([keys.m("Todo").tag(), keys.m("Todo").tag(String(id))]);
}
