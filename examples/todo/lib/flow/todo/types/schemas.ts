// @generated by next-prisma-flow-state-engine
// file: types/schemas.ts

import { z } from "zod";

// Scalar fields only
export const TodoScalarSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  createdAt: z.date(),
  updatedAt: z.date(),
  listId: z.string(),
  userId: z.string(),
  parentId: z.string().optional().nullable(),
});

// Relation schemas
export const TodoListUserSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  createdAt: z.date(),
});

export const TodoSubtasksListSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string(),
  icon: z.string(),
  orderIndex: z.number().int(),
  isDefault: z.boolean(),
  createdAt: z.date(),
});

export const TodoSubtasksUserSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  createdAt: z.date(),
});

export const TodoSubtasksTagsSchema = z.object({
  id: z.string(),
  name: z.string(),
  color: z.string(),
  createdAt: z.date(),
});

export const TodoParentListSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string(),
  icon: z.string(),
  orderIndex: z.number().int(),
  isDefault: z.boolean(),
  createdAt: z.date(),
});

export const TodoParentUserSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  createdAt: z.date(),
});

export const TodoParentTagsSchema = z.object({
  id: z.string(),
  name: z.string(),
  color: z.string(),
  createdAt: z.date(),
});

export const TodoUserListsSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string(),
  icon: z.string(),
  orderIndex: z.number().int(),
  isDefault: z.boolean(),
  createdAt: z.date(),
});

export const TodoListSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string(),
  icon: z.string(),
  orderIndex: z.number().int(),
  isDefault: z.boolean(),
  createdAt: z.date(),
  user: TodoListUserSchema.optional(),
});

export const TodoTagsSchema = z.object({
  id: z.string(),
  name: z.string(),
  color: z.string(),
  createdAt: z.date(),
});

export const TodoSubtasksSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  createdAt: z.date(),
  updatedAt: z.date(),
  list: TodoSubtasksListSchema.optional(),
  user: TodoSubtasksUserSchema.optional(),
  tags: z.array(TodoSubtasksTagsSchema).optional(),
});

export const TodoParentSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  createdAt: z.date(),
  updatedAt: z.date(),
  list: TodoParentListSchema.optional(),
  user: TodoParentUserSchema.optional(),
  tags: z.array(TodoParentTagsSchema).optional(),
});

export const TodoUserSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  createdAt: z.date(),
  lists: z.array(TodoUserListsSchema).optional(),
});

// Main schema with relations
export const TodoSchema = TodoScalarSchema.extend({
  list: TodoListSchema.optional(),
  tags: z.array(TodoTagsSchema).optional(),
  subtasks: z.array(TodoSubtasksSchema).optional(),
  parent: TodoParentSchema.optional(),
  user: TodoUserSchema.optional(),
});

// Input schemas for create operations
const TodoCreateListInputSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  icon: z.string().optional(),
  orderIndex: z.number().int().optional(),
  isDefault: z.boolean().optional(),
  createdAt: z.date().optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const TodoCreateTagsInputSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  color: z.string().optional(),
  createdAt: z.date().optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const TodoCreateSubtasksInputSchema = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  createdAt: z.date().optional(),
  list: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  parent: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  subtasks: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const TodoCreateParentInputSchema = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  createdAt: z.date().optional(),
  list: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  parent: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  subtasks: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const TodoCreateUserInputSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  createdAt: z.date().optional(),
  lists: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const TodoCreateSchema = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  createdAt: z.date().optional(),
  listId: z.string(),
  userId: z.string(),
  parentId: z.string().optional().nullable(),
  list: z
    .object({
      create: TodoCreateListInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: TodoCreateListInputSchema,
        })
        .optional(),
    })
    .optional(),
  user: z
    .object({
      create: TodoCreateUserInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: TodoCreateUserInputSchema,
        })
        .optional(),
    })
    .optional(),
  parent: z
    .object({
      create: TodoCreateParentInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: TodoCreateParentInputSchema,
        })
        .optional(),
    })
    .optional(),
  subtasks: z
    .object({
      create: z
        .union([
          TodoCreateSubtasksInputSchema,
          z.array(TodoCreateSubtasksInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: TodoCreateSubtasksInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: TodoCreateSubtasksInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      create: z
        .union([TodoCreateTagsInputSchema, z.array(TodoCreateTagsInputSchema)])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: TodoCreateTagsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: TodoCreateTagsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
});

export const TodoCreateManyInputSchema = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  createdAt: z.date().optional(),
});

// Input schemas for update operations
const TodoUpdateListInputSchema = z.object({
  name: z.string().optional(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  icon: z.string().optional(),
  orderIndex: z.number().int().optional(),
  isDefault: z.boolean().optional(),
  createdAt: z.date().optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const TodoUpdateTagsInputSchema = z.object({
  name: z.string().optional(),
  color: z.string().optional(),
  createdAt: z.date().optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const TodoUpdateSubtasksInputSchema = z.object({
  title: z.string().optional(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  createdAt: z.date().optional(),
  list: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  parent: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
      disconnect: z.boolean().optional(),
    })
    .optional(),
  subtasks: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const TodoUpdateParentInputSchema = z.object({
  title: z.string().optional(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  createdAt: z.date().optional(),
  list: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  parent: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
      disconnect: z.boolean().optional(),
    })
    .optional(),
  subtasks: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const TodoUpdateUserInputSchema = z.object({
  email: z.string().optional(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  createdAt: z.date().optional(),
  lists: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const TodoUpdateSchema = z.object({
  title: z.string().optional(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  createdAt: z.date().optional(),
  listId: z.string().optional(),
  userId: z.string().optional(),
  parentId: z.string().optional().nullable(),
  list: z
    .object({
      create: TodoCreateListInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: TodoCreateListInputSchema,
        })
        .optional(),
      update: z
        .object({
          where: z.object({ id: z.string() }).optional(),
          data: TodoUpdateListInputSchema,
        })
        .optional(),
      upsert: z
        .object({
          where: z.object({ id: z.string() }),
          update: TodoUpdateListInputSchema,
          create: TodoCreateListInputSchema,
        })
        .optional(),
    })
    .optional(),
  user: z
    .object({
      create: TodoCreateUserInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: TodoCreateUserInputSchema,
        })
        .optional(),
      update: z
        .object({
          where: z.object({ id: z.string() }).optional(),
          data: TodoUpdateUserInputSchema,
        })
        .optional(),
      upsert: z
        .object({
          where: z.object({ id: z.string() }),
          update: TodoUpdateUserInputSchema,
          create: TodoCreateUserInputSchema,
        })
        .optional(),
    })
    .optional(),
  parent: z
    .object({
      create: TodoCreateParentInputSchema.optional(),
      connect: z.object({ id: z.string() }).optional(),
      connectOrCreate: z
        .object({
          where: z.object({ id: z.string() }),
          create: TodoCreateParentInputSchema,
        })
        .optional(),
      disconnect: z.boolean().optional(),
      update: z
        .object({
          where: z.object({ id: z.string() }).optional(),
          data: TodoUpdateParentInputSchema,
        })
        .optional(),
      upsert: z
        .object({
          where: z.object({ id: z.string() }),
          update: TodoUpdateParentInputSchema,
          create: TodoCreateParentInputSchema,
        })
        .optional(),
      delete: z.boolean().optional(),
    })
    .optional(),
  subtasks: z
    .object({
      create: z
        .union([
          TodoCreateSubtasksInputSchema,
          z.array(TodoCreateSubtasksInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: TodoCreateSubtasksInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: TodoCreateSubtasksInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: TodoUpdateSubtasksInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: TodoUpdateSubtasksInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: TodoUpdateSubtasksInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: TodoUpdateSubtasksInputSchema,
            create: TodoCreateSubtasksInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: TodoUpdateSubtasksInputSchema,
              create: TodoCreateSubtasksInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
  tags: z
    .object({
      create: z
        .union([TodoCreateTagsInputSchema, z.array(TodoCreateTagsInputSchema)])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: TodoCreateTagsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: TodoCreateTagsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: TodoUpdateTagsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: TodoUpdateTagsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: TodoUpdateTagsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: TodoUpdateTagsInputSchema,
            create: TodoCreateTagsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: TodoUpdateTagsInputSchema,
              create: TodoCreateTagsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
});

export const TodoUpdateManyInputSchema = z.object({
  title: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  priority: z.string().optional().nullable(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional().nullable(),
  isArchived: z.boolean().optional().nullable(),
  createdAt: z.date().optional().nullable(),
});

export const TodoUpsertInputSchema = z.object({
  create: TodoCreateSchema,
  update: TodoUpdateSchema,
});

// Filter and where schemas
// Relation where schemas
export const TodoListFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  description: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  color: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  icon: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  orderIndex: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  isDefault: z
    .union([
      z.boolean(),
      z.object({
        equals: z.boolean().optional(),
        not: z.boolean().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const TodoUserFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  email: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  avatar: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const TodoParentFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  title: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  description: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  status: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  priority: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  dueDate: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  completedAt: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  orderIndex: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  isArchived: z
    .union([
      z.boolean(),
      z.object({
        equals: z.boolean().optional(),
        not: z.boolean().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const TodoSubtasksFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  title: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  description: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  status: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  priority: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  dueDate: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  completedAt: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  orderIndex: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  isArchived: z
    .union([
      z.boolean(),
      z.object({
        equals: z.boolean().optional(),
        not: z.boolean().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const TodoTagsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  color: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

// Base filter schema
export const TodoFilterBaseSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  title: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  description: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  status: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  priority: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  dueDate: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  completedAt: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  orderIndex: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  isArchived: z
    .union([
      z.boolean(),
      z.object({
        equals: z.boolean().optional(),
        not: z.boolean().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  list: z.union([TodoListFilterSchema, z.null()]).optional(),
  user: z.union([TodoUserFilterSchema, z.null()]).optional(),
  parent: z.union([TodoParentFilterSchema, z.null()]).optional(),
  subtasks: z
    .object({
      every: TodoSubtasksFilterSchema.optional(),
      some: TodoSubtasksFilterSchema.optional(),
      none: TodoSubtasksFilterSchema.optional(),
    })
    .optional(),
  tags: z
    .object({
      every: TodoTagsFilterSchema.optional(),
      some: TodoTagsFilterSchema.optional(),
      none: TodoTagsFilterSchema.optional(),
    })
    .optional(),
  AND: z.union([z.any(), z.array(z.any())]).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.union([z.any(), z.array(z.any())]).optional(),
});

// Extended filter schema with self-references
export const TodoFilterSchema = TodoFilterBaseSchema.extend({
  AND: z.array(TodoFilterBaseSchema).optional(),
  OR: z.array(TodoFilterBaseSchema).optional(),
  NOT: TodoFilterBaseSchema.optional(),
});

// Alias for Prisma compatibility
export const TodoWhereInputSchema = TodoFilterSchema;

export const TodoWhereUniqueInputSchema = z.object({
  id: z.string().optional(),
});

// Type exports
export type FlowTodo = z.infer<typeof TodoSchema>;
export type FlowTodoCreate = z.infer<typeof TodoCreateSchema>;
export type FlowTodoUpdate = z.infer<typeof TodoUpdateSchema>;
export type FlowTodoFilter = z.infer<typeof TodoFilterSchema>;
export type FlowTodoWhere = z.infer<typeof TodoWhereInputSchema>;
export type FlowTodoWhereUnique = z.infer<typeof TodoWhereUniqueInputSchema>;
