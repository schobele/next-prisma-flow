// @generated by next-prisma-flow-state-engine
// file: types/types.ts

import type { Prisma } from "../../prisma";
import type { TodoSelect, TodoScalarSelect } from "../server/selects";

// Type aliases for Todo with different select levels
export type TodoWithRelations = Prisma.TodoGetPayload<{
  select: typeof TodoSelect;
}>;

export type TodoListItem = Prisma.TodoGetPayload<{
  select: typeof TodoSelect;
}>;

export type TodoShallow = Prisma.TodoGetPayload<{
  select: typeof TodoScalarSelect;
}>;

// Input type helpers
export type TodoCreateInput = Prisma.TodoCreateInput;
export type TodoUpdateInput = Prisma.TodoUpdateInput;
export type TodoWhereInput = Prisma.TodoWhereInput;
export type TodoWhereUniqueInput = Prisma.TodoWhereUniqueInput;
export type TodoOrderByInput = Prisma.TodoOrderByWithRelationInput;

// Relation type helpers
export type TodoWithCompany = TodoWithRelations & {
  company: NonNullable<TodoWithRelations["company"]>;
};
export type TodoWithList = TodoWithRelations & {
  list: NonNullable<TodoWithRelations["list"]>;
};
export type TodoWithUser = TodoWithRelations & {
  user: NonNullable<TodoWithRelations["user"]>;
};
export type TodoWithParent = TodoWithRelations & {
  parent: NonNullable<TodoWithRelations["parent"]>;
};
export type TodoWithSubtasks = TodoWithRelations & {
  subtasks: NonNullable<TodoWithRelations["subtasks"]>;
};
export type TodoWithTags = TodoWithRelations & {
  tags: NonNullable<TodoWithRelations["tags"]>;
};

// Utility types
export type TodoId = TodoWithRelations["id"];
export type PartialTodo = Partial<TodoWithRelations>;
export type TodoKeys = keyof TodoWithRelations;

// Pagination types
export type TodoPage = {
  items: TodoListItem[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
};

export type TodoCursor = {
  items: TodoListItem[];
  nextCursor?: TodoWhereUniqueInput;
  hasMore: boolean;
};
