// @generated by next-prisma-flow-state-engine
// file: server/actions.ts

"use server";

import { prisma } from "../../prisma";
import {
  invalidateTags,
  keys,
  FlowCtx,
  FlowPolicyError,
  FlowValidationError,
  deepMergePrismaData,
} from "../../core";
import { canCompany } from "../../policies";
import { CompanySelect } from "./selects";
import { CompanyCreateSchema, CompanyUpdateSchema } from "../types/schemas";
import type {
  FlowCompany,
  FlowCompanyCreate,
  FlowCompanyUpdate,
} from "../types/schemas";
import {
  transformCompanyCreate,
  transformCompanyUpdate,
} from "../types/transforms";

// Transform Prisma response to match FlowPost schema (null -> undefined for relations)
function transformResponse(item: any): any {
  if (!item) return item;
  const result = { ...item };
  return result;
}

export async function createCompany(
  data: FlowCompanyCreate,
  ctx: FlowCtx = {},
): Promise<FlowCompany> {
  const policy = await canCompany("create", ctx || {});
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  const parsed = CompanyCreateSchema.safeParse(data);
  if (!parsed.success) {
    throw new FlowValidationError(parsed.error.issues);
  }

  const createData = transformCompanyCreate(parsed.data as any);
  const item = (await prisma.company.create({
    data: deepMergePrismaData(createData, policy.data || {}, "Company"),
    select: CompanySelect,
  })) as FlowCompany;

  await invalidateTags([keys.m("Company").tag()]);
  return transformResponse(item) as FlowCompany;
}

export async function updateCompany(
  id: string,
  data: FlowCompanyUpdate,
  ctx: FlowCtx = {},
): Promise<FlowCompany> {
  const policy = await canCompany("update", ctx || {}, id);
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  const parsed = CompanyUpdateSchema.safeParse(data);
  if (!parsed.success) {
    throw new FlowValidationError(parsed.error.issues);
  }

  const updateData = transformCompanyUpdate(parsed.data as any);
  const item = (await prisma.company.update({
    where: { id: id, ...policy.where },
    data: deepMergePrismaData(updateData, policy.data || {}, "Company"),
    select: CompanySelect,
  })) as FlowCompany;

  await invalidateTags([
    keys.m("Company").tag(),
    keys.m("Company").tag(String(id)),
  ]);
  return transformResponse(item) as FlowCompany;
}

export async function deleteCompany(id: string, ctx?: FlowCtx): Promise<void> {
  const policy = await canCompany("delete", ctx || {}, id);
  if (!policy.ok) throw new FlowPolicyError(policy.message);

  await prisma.company.delete({
    where: { id: id, ...policy.where },
  });

  await invalidateTags([
    keys.m("Company").tag(),
    keys.m("Company").tag(String(id)),
  ]);
}
