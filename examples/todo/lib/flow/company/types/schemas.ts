// @generated by next-prisma-flow-state-engine
// file: types/schemas.ts

import { z } from "zod";

// Scalar fields only
export const CompanyScalarSchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  logo: z.string().optional().nullable(),
  plan: z.string(),
  maxUsers: z.number().int(),
  maxStorage: z.number().int(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

// Relation schemas
export const CompanyUsersListsSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string(),
  icon: z.string(),
  orderIndex: z.number().int(),
  isDefault: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const CompanyUsersTodosSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const CompanyListsUserSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  role: z.string(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const CompanyListsTodosSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const CompanyTodosListSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string(),
  icon: z.string(),
  orderIndex: z.number().int(),
  isDefault: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const CompanyTodosUserSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  role: z.string(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const CompanyTodosParentSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const CompanyTodosSubtasksSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const CompanyTodosTagsSchema = z.object({
  id: z.string(),
  name: z.string(),
  color: z.string(),
  companyId: z.string(),
  createdAt: z.date(),
});

export const CompanyTagsTodosSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const CompanyUsersSchema = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  role: z.string(),
  companyId: z.string(),
  createdAt: z.date(),
  lists: z.array(CompanyUsersListsSchema).optional(),
  todos: z.array(CompanyUsersTodosSchema).optional(),
});

export const CompanyListsSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string(),
  icon: z.string(),
  orderIndex: z.number().int(),
  isDefault: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  user: CompanyListsUserSchema.optional(),
  todos: z.array(CompanyListsTodosSchema).optional(),
});

export const CompanyTodosSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  priority: z.string(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int(),
  isArchived: z.boolean(),
  companyId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  list: CompanyTodosListSchema.optional(),
  user: CompanyTodosUserSchema.optional(),
  parent: CompanyTodosParentSchema.optional(),
  subtasks: z.array(CompanyTodosSubtasksSchema).optional(),
  tags: z.array(CompanyTodosTagsSchema).optional(),
});

export const CompanyTagsSchema = z.object({
  id: z.string(),
  name: z.string(),
  color: z.string(),
  companyId: z.string(),
  createdAt: z.date(),
  todos: z.array(CompanyTagsTodosSchema).optional(),
});

// Main schema with relations
export const CompanySchema = CompanyScalarSchema.extend({
  users: z.array(CompanyUsersSchema).optional(),
  lists: z.array(CompanyListsSchema).optional(),
  todos: z.array(CompanyTodosSchema).optional(),
  tags: z.array(CompanyTagsSchema).optional(),
});

// Input schemas for create operations
const CompanyCreateUsersInputSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  role: z.string().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  lists: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const CompanyCreateListsInputSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  icon: z.string().optional(),
  orderIndex: z.number().int().optional(),
  isDefault: z.boolean().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const CompanyCreateTodosInputSchema = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  list: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  parent: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  subtasks: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const CompanyCreateTagsInputSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  color: z.string().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const CompanyCreateSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  logo: z.string().optional().nullable(),
  plan: z.string().optional(),
  maxUsers: z.number().int().optional(),
  maxStorage: z.number().int().optional(),
  createdAt: z.date().optional(),
  users: z
    .object({
      create: z
        .union([
          CompanyCreateUsersInputSchema,
          z.array(CompanyCreateUsersInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: CompanyCreateUsersInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: CompanyCreateUsersInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
  lists: z
    .object({
      create: z
        .union([
          CompanyCreateListsInputSchema,
          z.array(CompanyCreateListsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: CompanyCreateListsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: CompanyCreateListsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
  todos: z
    .object({
      create: z
        .union([
          CompanyCreateTodosInputSchema,
          z.array(CompanyCreateTodosInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: CompanyCreateTodosInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: CompanyCreateTodosInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      create: z
        .union([
          CompanyCreateTagsInputSchema,
          z.array(CompanyCreateTagsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: CompanyCreateTagsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: CompanyCreateTagsInputSchema,
            }),
          ),
        ])
        .optional(),
    })
    .optional(),
});

export const CompanyCreateManyInputSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  logo: z.string().optional().nullable(),
  plan: z.string().optional(),
  maxUsers: z.number().int().optional(),
  maxStorage: z.number().int().optional(),
  createdAt: z.date().optional(),
});

// Input schemas for update operations
const CompanyUpdateUsersInputSchema = z.object({
  email: z.string().optional(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  role: z.string().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  lists: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const CompanyUpdateListsInputSchema = z.object({
  name: z.string().optional(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  icon: z.string().optional(),
  orderIndex: z.number().int().optional(),
  isDefault: z.boolean().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const CompanyUpdateTodosInputSchema = z.object({
  title: z.string().optional(),
  description: z.string().optional().nullable(),
  status: z.string().optional(),
  priority: z.string().optional(),
  dueDate: z.date().optional().nullable(),
  completedAt: z.date().optional().nullable(),
  orderIndex: z.number().int().optional(),
  isArchived: z.boolean().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  company: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  list: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  user: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
    })
    .optional(),
  parent: z
    .object({
      connect: z.object({ id: z.string() }).optional(),
      disconnect: z.boolean().optional(),
    })
    .optional(),
  subtasks: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
  tags: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

const CompanyUpdateTagsInputSchema = z.object({
  name: z.string().optional(),
  color: z.string().optional(),
  companyId: z.string().optional(),
  createdAt: z.date().optional(),
  todos: z
    .object({
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
    })
    .optional(),
});

export const CompanyUpdateSchema = z.object({
  name: z.string().optional(),
  slug: z.string().optional(),
  logo: z.string().optional().nullable(),
  plan: z.string().optional(),
  maxUsers: z.number().int().optional(),
  maxStorage: z.number().int().optional(),
  createdAt: z.date().optional(),
  users: z
    .object({
      create: z
        .union([
          CompanyCreateUsersInputSchema,
          z.array(CompanyCreateUsersInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: CompanyCreateUsersInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: CompanyCreateUsersInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: CompanyUpdateUsersInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: CompanyUpdateUsersInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: CompanyUpdateUsersInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: CompanyUpdateUsersInputSchema,
            create: CompanyCreateUsersInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: CompanyUpdateUsersInputSchema,
              create: CompanyCreateUsersInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
  lists: z
    .object({
      create: z
        .union([
          CompanyCreateListsInputSchema,
          z.array(CompanyCreateListsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: CompanyCreateListsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: CompanyCreateListsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: CompanyUpdateListsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: CompanyUpdateListsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: CompanyUpdateListsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: CompanyUpdateListsInputSchema,
            create: CompanyCreateListsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: CompanyUpdateListsInputSchema,
              create: CompanyCreateListsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
  todos: z
    .object({
      create: z
        .union([
          CompanyCreateTodosInputSchema,
          z.array(CompanyCreateTodosInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: CompanyCreateTodosInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: CompanyCreateTodosInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: CompanyUpdateTodosInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: CompanyUpdateTodosInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: CompanyUpdateTodosInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: CompanyUpdateTodosInputSchema,
            create: CompanyCreateTodosInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: CompanyUpdateTodosInputSchema,
              create: CompanyCreateTodosInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
  tags: z
    .object({
      create: z
        .union([
          CompanyCreateTagsInputSchema,
          z.array(CompanyCreateTagsInputSchema),
        ])
        .optional(),
      connect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            create: CompanyCreateTagsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              create: CompanyCreateTagsInputSchema,
            }),
          ),
        ])
        .optional(),
      set: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      disconnect: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      update: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            data: CompanyUpdateTagsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              data: CompanyUpdateTagsInputSchema,
            }),
          ),
        ])
        .optional(),
      updateMany: z
        .object({
          where: z.any().optional(),
          data: CompanyUpdateTagsInputSchema,
        })
        .optional(),
      upsert: z
        .union([
          z.object({
            where: z.object({ id: z.string() }),
            update: CompanyUpdateTagsInputSchema,
            create: CompanyCreateTagsInputSchema,
          }),
          z.array(
            z.object({
              where: z.object({ id: z.string() }),
              update: CompanyUpdateTagsInputSchema,
              create: CompanyCreateTagsInputSchema,
            }),
          ),
        ])
        .optional(),
      delete: z
        .union([
          z.object({ id: z.string() }),
          z.array(z.object({ id: z.string() })),
        ])
        .optional(),
      deleteMany: z.any().optional(),
    })
    .optional(),
});

export const CompanyUpdateManyInputSchema = z.object({
  name: z.string().optional().nullable(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  plan: z.string().optional().nullable(),
  maxUsers: z.number().int().optional().nullable(),
  maxStorage: z.number().int().optional().nullable(),
  createdAt: z.date().optional().nullable(),
});

export const CompanyUpsertInputSchema = z.object({
  create: CompanyCreateSchema,
  update: CompanyUpdateSchema,
});

// Filter and where schemas
// Relation where schemas
export const CompanyUsersFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  email: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  avatar: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  role: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  companyId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const CompanyListsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  description: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  color: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  icon: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  orderIndex: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  isDefault: z
    .union([
      z.boolean(),
      z.object({
        equals: z.boolean().optional(),
        not: z.boolean().optional(),
      }),
    ])
    .optional(),
  companyId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const CompanyTodosFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  title: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  description: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  status: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  priority: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  dueDate: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  completedAt: z
    .union([
      z.date().optional().nullable(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  orderIndex: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  isArchived: z
    .union([
      z.boolean(),
      z.object({
        equals: z.boolean().optional(),
        not: z.boolean().optional(),
      }),
    ])
    .optional(),
  companyId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  updatedAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

export const CompanyTagsFilterSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  color: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  companyId: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  AND: z.array(z.any()).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.any().optional(),
});

// Base filter schema
export const CompanyFilterBaseSchema = z.object({
  id: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  name: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  slug: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  logo: z
    .union([
      z.string().optional().nullable(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  plan: z
    .union([
      z.string(),
      z.object({
        equals: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        in: z.array(z.string()).optional(),
        notIn: z.array(z.string()).optional(),
        not: z.string().optional(),
      }),
    ])
    .optional(),
  maxUsers: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  maxStorage: z
    .union([
      z.number().int(),
      z.object({
        equals: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional(),
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        in: z.array(z.number().int()).optional(),
        notIn: z.array(z.number().int()).optional(),
        not: z.number().int().optional(),
      }),
    ])
    .optional(),
  createdAt: z
    .union([
      z.date(),
      z.object({
        equals: z.date().optional(),
        lt: z.date().optional(),
        lte: z.date().optional(),
        gt: z.date().optional(),
        gte: z.date().optional(),
        in: z.array(z.date()).optional(),
        notIn: z.array(z.date()).optional(),
        not: z.date().optional(),
      }),
    ])
    .optional(),
  users: z
    .object({
      every: CompanyUsersFilterSchema.optional(),
      some: CompanyUsersFilterSchema.optional(),
      none: CompanyUsersFilterSchema.optional(),
    })
    .optional(),
  lists: z
    .object({
      every: CompanyListsFilterSchema.optional(),
      some: CompanyListsFilterSchema.optional(),
      none: CompanyListsFilterSchema.optional(),
    })
    .optional(),
  todos: z
    .object({
      every: CompanyTodosFilterSchema.optional(),
      some: CompanyTodosFilterSchema.optional(),
      none: CompanyTodosFilterSchema.optional(),
    })
    .optional(),
  tags: z
    .object({
      every: CompanyTagsFilterSchema.optional(),
      some: CompanyTagsFilterSchema.optional(),
      none: CompanyTagsFilterSchema.optional(),
    })
    .optional(),
  AND: z.union([z.any(), z.array(z.any())]).optional(),
  OR: z.array(z.any()).optional(),
  NOT: z.union([z.any(), z.array(z.any())]).optional(),
});

// Extended filter schema with self-references
export const CompanyFilterSchema = CompanyFilterBaseSchema.extend({
  AND: z.array(CompanyFilterBaseSchema).optional(),
  OR: z.array(CompanyFilterBaseSchema).optional(),
  NOT: CompanyFilterBaseSchema.optional(),
});

// Alias for Prisma compatibility
export const CompanyWhereInputSchema = CompanyFilterSchema;

export const CompanyWhereUniqueInputSchema = z.object({
  id: z.string().optional(),
  slug: z.string().optional(),
});

// Type exports
export type FlowCompany = z.infer<typeof CompanySchema>;
export type FlowCompanyCreate = z.infer<typeof CompanyCreateSchema>;
export type FlowCompanyUpdate = z.infer<typeof CompanyUpdateSchema>;
export type FlowCompanyFilter = z.infer<typeof CompanyFilterSchema>;
export type FlowCompanyWhere = z.infer<typeof CompanyWhereInputSchema>;
export type FlowCompanyWhereUnique = z.infer<
  typeof CompanyWhereUniqueInputSchema
>;
