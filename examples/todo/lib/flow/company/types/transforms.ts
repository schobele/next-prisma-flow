// @generated by next-prisma-flow-state-engine
// file: types/transforms.ts

import type { Prisma } from "../../prisma";
import type { FlowCompanyCreate, FlowCompanyUpdate } from "./schemas";

export function transformCompanyCreate(
  input: FlowCompanyCreate,
): Prisma.CompanyCreateInput {
  const result: any = {};

  result.name = input.name;
  result.slug = input.slug;
  if ("logo" in input && input.logo !== undefined) {
    result.logo = input.logo;
  }
  if ("plan" in input && input.plan !== undefined) {
    result.plan = input.plan;
  }
  if ("maxUsers" in input && input.maxUsers !== undefined) {
    result.maxUsers = input.maxUsers;
  }
  if ("maxStorage" in input && input.maxStorage !== undefined) {
    result.maxStorage = input.maxStorage;
  }
  if ("createdAt" in input && input.createdAt !== undefined) {
    result.createdAt = input.createdAt;
  }
  if (input.users !== undefined) {
    const usersData = input.users;
    if (usersData) {
      if ("connect" in usersData && usersData.connect) {
        result.users = { connect: usersData.connect };
      } else if ("create" in usersData && usersData.create) {
        result.users = {
          create: usersData.create as any,
        };
      } else if ("createMany" in usersData && usersData.createMany) {
      } else if ("connectOrCreate" in usersData && usersData.connectOrCreate) {
        result.users = {
          connectOrCreate: usersData.connectOrCreate as any,
        };
      }
    }
  }
  if (input.lists !== undefined) {
    const listsData = input.lists;
    if (listsData) {
      if ("connect" in listsData && listsData.connect) {
        result.lists = { connect: listsData.connect };
      } else if ("create" in listsData && listsData.create) {
        result.lists = {
          create: listsData.create as any,
        };
      } else if ("createMany" in listsData && listsData.createMany) {
      } else if ("connectOrCreate" in listsData && listsData.connectOrCreate) {
        result.lists = {
          connectOrCreate: listsData.connectOrCreate as any,
        };
      }
    }
  }
  if (input.todos !== undefined) {
    const todosData = input.todos;
    if (todosData) {
      if ("connect" in todosData && todosData.connect) {
        result.todos = { connect: todosData.connect };
      } else if ("create" in todosData && todosData.create) {
        result.todos = {
          create: todosData.create as any,
        };
      } else if ("createMany" in todosData && todosData.createMany) {
      } else if ("connectOrCreate" in todosData && todosData.connectOrCreate) {
        result.todos = {
          connectOrCreate: todosData.connectOrCreate as any,
        };
      }
    }
  }
  if (input.tags !== undefined) {
    const tagsData = input.tags;
    if (tagsData) {
      if ("connect" in tagsData && tagsData.connect) {
        result.tags = { connect: tagsData.connect };
      } else if ("create" in tagsData && tagsData.create) {
        result.tags = {
          create: tagsData.create as any,
        };
      } else if ("createMany" in tagsData && tagsData.createMany) {
      } else if ("connectOrCreate" in tagsData && tagsData.connectOrCreate) {
        result.tags = {
          connectOrCreate: tagsData.connectOrCreate as any,
        };
      }
    }
  }

  return result;
}

export function transformCompanyUpdate(
  input: FlowCompanyUpdate,
): Prisma.CompanyUpdateInput {
  const result: any = {};

  const nameValue = input.name;
  if (nameValue !== undefined && nameValue !== null) {
    result.name = nameValue;
  }
  const slugValue = input.slug;
  if (slugValue !== undefined && slugValue !== null) {
    result.slug = slugValue;
  }
  const logoValue = input.logo;
  if (logoValue !== undefined) {
    result.logo = logoValue;
  }
  const planValue = input.plan;
  if (planValue !== undefined && planValue !== null) {
    result.plan = planValue;
  }
  const maxUsersValue = input.maxUsers;
  if (maxUsersValue !== undefined && maxUsersValue !== null) {
    result.maxUsers = maxUsersValue;
  }
  const maxStorageValue = input.maxStorage;
  if (maxStorageValue !== undefined && maxStorageValue !== null) {
    result.maxStorage = maxStorageValue;
  }
  const createdAtValue = input.createdAt;
  if (createdAtValue !== undefined && createdAtValue !== null) {
    result.createdAt = createdAtValue;
  }
  if (input.users !== undefined) {
    const usersData = input.users;
    if (usersData) {
      result.users = usersData as any;
    }
  }
  if (input.lists !== undefined) {
    const listsData = input.lists;
    if (listsData) {
      result.lists = listsData as any;
    }
  }
  if (input.todos !== undefined) {
    const todosData = input.todos;
    if (todosData) {
      result.todos = todosData as any;
    }
  }
  if (input.tags !== undefined) {
    const tagsData = input.tags;
    if (tagsData) {
      result.tags = tagsData as any;
    }
  }

  return result;
}
