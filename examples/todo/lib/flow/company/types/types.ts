// @generated by next-prisma-flow-state-engine
// file: types/types.ts

import type { Prisma } from "../../prisma";
import type {
  CompanyDeepSelect,
  CompanyListSelect,
  CompanyShallowSelect,
} from "../server/selects";

// Type aliases for Company with different select levels
export type CompanyWithRelations = Prisma.CompanyGetPayload<{
  select: typeof CompanyDeepSelect;
}>;

export type CompanyListItem = Prisma.CompanyGetPayload<{
  select: typeof CompanyListSelect;
}>;

export type CompanyShallow = Prisma.CompanyGetPayload<{
  select: typeof CompanyShallowSelect;
}>;

// Input type helpers
export type CompanyCreateInput = Prisma.CompanyCreateInput;
export type CompanyUpdateInput = Prisma.CompanyUpdateInput;
export type CompanyWhereInput = Prisma.CompanyWhereInput;
export type CompanyWhereUniqueInput = Prisma.CompanyWhereUniqueInput;
export type CompanyOrderByInput = Prisma.CompanyOrderByWithRelationInput;

// Relation type helpers
export type CompanyWithUsers = CompanyWithRelations & {
  users: NonNullable<CompanyWithRelations["users"]>;
};
export type CompanyWithLists = CompanyWithRelations & {
  lists: NonNullable<CompanyWithRelations["lists"]>;
};
export type CompanyWithTodos = CompanyWithRelations & {
  todos: NonNullable<CompanyWithRelations["todos"]>;
};
export type CompanyWithTags = CompanyWithRelations & {
  tags: NonNullable<CompanyWithRelations["tags"]>;
};

// Utility types
export type CompanyId = CompanyWithRelations["id"];
export type PartialCompany = Partial<CompanyWithRelations>;
export type CompanyKeys = keyof CompanyWithRelations;

// Pagination types
export type CompanyPage = {
  items: CompanyListItem[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
};

export type CompanyCursor = {
  items: CompanyListItem[];
  nextCursor?: CompanyWhereUniqueInput;
  hasMore: boolean;
};
