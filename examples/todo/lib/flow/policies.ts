// @generated by next-prisma-flow-state-engine
// file: policies.ts

import type { FlowCtx } from "./core";

type PolicyResult = {
  ok: boolean;
  message?: string;
  where?: any;
  data?: any;
};

type PolicyAction = "list" | "read" | "create" | "update" | "delete";

export async function canCompany(
  action: PolicyAction,
  ctx: FlowCtx,
  id?: string,
): Promise<PolicyResult> {
  // Default: allow all for authenticated users
  if (!ctx.user) {
    return { ok: false, message: "Authentication required" };
  }

  switch (action) {
    case "list":
    case "read":
      // Tenant filtering if model has tenant field
      return { ok: true, where: {} };

    case "create":
      return { ok: true, data: {} };

    case "update":
    case "delete":
      // Ownership check could be added here
      return { ok: true, where: {} };

    default:
      return { ok: false, message: "Unknown action" };
  }
}

export async function canUser(
  action: PolicyAction,
  ctx: FlowCtx,
  id?: string,
): Promise<PolicyResult> {
  // Default: allow all for authenticated users
  if (!ctx.user) {
    return { ok: false, message: "Authentication required" };
  }

  switch (action) {
    case "list":
    case "read":
      // Tenant filtering if model has tenant field
      return {
        ok: true,
        where: ctx.tenantId ? { companyId: ctx.tenantId } : {},
      };

    case "create":
      return {
        ok: true,
        data: ctx.tenantId ? { companyId: ctx.tenantId } : {},
      };

    case "update":
    case "delete":
      // Ownership check could be added here
      return {
        ok: true,
        where: ctx.tenantId ? { companyId: ctx.tenantId } : {},
      };

    default:
      return { ok: false, message: "Unknown action" };
  }
}

export async function canList(
  action: PolicyAction,
  ctx: FlowCtx,
  id?: string,
): Promise<PolicyResult> {
  // Default: allow all for authenticated users
  if (!ctx.user) {
    return { ok: false, message: "Authentication required" };
  }

  switch (action) {
    case "list":
    case "read":
      // Tenant filtering if model has tenant field
      return {
        ok: true,
        where: ctx.tenantId ? { companyId: ctx.tenantId } : {},
      };

    case "create":
      return {
        ok: true,
        data: ctx.tenantId ? { companyId: ctx.tenantId } : {},
      };

    case "update":
    case "delete":
      // Ownership check could be added here
      return {
        ok: true,
        where: ctx.tenantId ? { companyId: ctx.tenantId } : {},
      };

    default:
      return { ok: false, message: "Unknown action" };
  }
}

export async function canTodo(
  action: PolicyAction,
  ctx: FlowCtx,
  id?: string,
): Promise<PolicyResult> {
  // Default: allow all for authenticated users
  if (!ctx.user) {
    return { ok: false, message: "Authentication required" };
  }

  switch (action) {
    case "list":
    case "read":
      // Tenant filtering if model has tenant field
      return {
        ok: true,
        where: ctx.tenantId ? { companyId: ctx.tenantId } : {},
      };

    case "create":
      // For creates, let transform handle relation and policy handle where filtering for now
      return {
        ok: true,
        data: {},
      };

    case "update":
    case "delete":
      // Ownership check could be added here
      return {
        ok: true,
        where: ctx.tenantId ? { companyId: ctx.tenantId } : {},
      };

    default:
      return { ok: false, message: "Unknown action" };
  }
}

export async function canTag(
  action: PolicyAction,
  ctx: FlowCtx,
  id?: string,
): Promise<PolicyResult> {
  // Default: allow all for authenticated users
  if (!ctx.user) {
    return { ok: false, message: "Authentication required" };
  }

  switch (action) {
    case "list":
    case "read":
      // Tenant filtering if model has tenant field
      return {
        ok: true,
        where: ctx.tenantId ? { companyId: ctx.tenantId } : {},
      };

    case "create":
      return {
        ok: true,
        data: ctx.tenantId ? { companyId: ctx.tenantId } : {},
      };

    case "update":
    case "delete":
      // Ownership check could be added here
      return {
        ok: true,
        where: ctx.tenantId ? { companyId: ctx.tenantId } : {},
      };

    default:
      return { ok: false, message: "Unknown action" };
  }
}
