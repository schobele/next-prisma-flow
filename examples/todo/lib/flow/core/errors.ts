// @generated by next-prisma-flow-state-engine
// file: core/errors.ts

import type { ZodIssue } from "zod";

export class FlowError extends Error {
  constructor(
    message: string,
    public code: string,
  ) {
    super(message);
    this.name = "FlowError";
  }
}

export class FlowPolicyError extends FlowError {
  constructor(message: string = "Permission denied") {
    super(message, "POLICY_DENIED");
    this.name = "FlowPolicyError";
  }
}

export class FlowValidationError extends FlowError {
  constructor(public issues: ZodIssue[]) {
    const message = issues
      .map((i) => `${i.path.join(".")}: ${i.message}`)
      .join(", ");
    super(message || "Validation failed", "VALIDATION_ERROR");
    this.name = "FlowValidationError";
  }
}

export class FlowNotFoundError extends FlowError {
  constructor(resource: string, id?: string | number) {
    const message = id
      ? `${resource} with id ${id} not found`
      : `${resource} not found`;
    super(message, "NOT_FOUND");
    this.name = "FlowNotFoundError";
  }
}
