import { readFile } from "node:fs/promises";
import { createTwoFilesPatch } from "diff";

export interface ComparisonResult {
	model: string;
	fileType: string;
	hasDifferences: boolean;
	diffLines: number;
	patch?: string;
}

/**
 * Normalize content for meaningful comparison
 * Removes generated timestamps and other volatile content
 */
function normalizeContent(content: string): string {
	return (
		content
			// Remove complete generated header block
			.replace(
				/^\/\/ This file is auto-generated by Next Prisma Flow Generator\.\n\/\/ Do not edit this file manually as it will be overwritten\.\n\/\/ Generated at: .+\n\n/m,
				"",
			)
			// Remove generated timestamps
			.replace(/Generated at: \d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z/g, "Generated at: [TIMESTAMP]")
			// Remove specific timestamp comments
			.replace(/\/\/ Generated at: .+/g, "// Generated at: [TIMESTAMP]")
			// Remove standalone file comment (for baseline files)
			.replace(/^\/\/ \w+\.ts\n/m, "")
			// Normalize line endings
			.replace(/\r\n/g, "\n")
			// Remove trailing whitespace
			.replace(/[ \t]+$/gm, "")
	);
}

/**
 * Format diff output with colors
 */
function formatDiff(patch: string): string {
	const colors = {
		reset: "\x1b[0m",
		red: "\x1b[31m",
		green: "\x1b[32m",
		cyan: "\x1b[36m",
		yellow: "\x1b[33m",
	};

	return patch
		.split("\n")
		.map((line) => {
			if (line.startsWith("+++") || line.startsWith("---")) {
				return colors.yellow + line + colors.reset;
			}
			if (line.startsWith("+")) {
				return colors.green + line + colors.reset;
			}
			if (line.startsWith("-")) {
				return colors.red + line + colors.reset;
			}
			if (line.startsWith("@@")) {
				return colors.cyan + line + colors.reset;
			}
			return line;
		})
		.join("\n");
}

/**
 * Compare two files and return detailed comparison result
 */
export async function compareFiles(
	model: string,
	fileType: string,
	baselinePath: string,
	generatedPath: string,
): Promise<ComparisonResult> {
	try {
		// Read and normalize file contents
		const baselineContent = normalizeContent(await readFile(baselinePath, "utf-8"));
		const generatedContent = normalizeContent(await readFile(generatedPath, "utf-8"));

		// Create diff patch
		const patch = createTwoFilesPatch(
			`baseline/${model}/${fileType}.ts`,
			`generated/${model}/${fileType}.ts`,
			baselineContent,
			generatedContent,
			"baseline",
			"generated",
		);

		// Count actual difference lines (excluding headers)
		const diffLines = patch
			.split("\n")
			.filter((line) => line.startsWith("+") || line.startsWith("-"))
			.filter((line) => !line.startsWith("+++") && !line.startsWith("---")).length;

		const hasDifferences = diffLines > 0;

		// Print immediate results
		const status = hasDifferences ? "❌" : "✅";
		const diffInfo = hasDifferences ? ` (${diffLines} differences)` : "";
		console.log(`${status} ${model}/${fileType}.ts${diffInfo}`);

		// Show detailed diff if there are differences
		if (hasDifferences) {
			console.log("");
			console.log(formatDiff(patch));
			console.log("");
		}

		return {
			model,
			fileType,
			hasDifferences,
			diffLines,
			patch: hasDifferences ? patch : undefined,
		};
	} catch (error) {
		console.error(`❌ Error comparing ${model}/${fileType}.ts: ${error}`);
		return {
			model,
			fileType,
			hasDifferences: true,
			diffLines: -1,
		};
	}
}
